[
  {
    "id": "FOLIO_dev_0",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Bonnie performs in school talent shows often.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbonnie ::: represents bonnie\nPredicates:\nperform_often(x) ::: x performs in school talent shows often.\nattend_and_engaged(x) ::: x attends and is very engaged with school events.\nis_inactive_member(x) ::: x is an inactive and disinterested member of their community.\nchaperone_dances(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nPremises:\n∀x (perform_often(x) → attend_and_engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n∀x ((perform_often(x) ∧ ¬is_inactive_member(x)) ∨ (¬perform_often(x) ∧ is_inactive_member(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n∀x ∀y (chaperone_dances(x) → (is_student(y) → x ≠ y)) ::: If people chaperone high school dances, then they are not students who attend the school.\n∀x (is_inactive_member(x) → chaperone_dances(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n∃x ∀y ((young_children(y) ∨ teenagers(y)) ∧ wish_to_further_academic_careers_and_educational_opportunities(y) → is_student(y)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n((attend_and_engaged(\"bonnie\") ∧ is_student(\"bonnie\")) ∧ (¬attend_and_engaged(\"bonnie\") ∧ ¬is_student(\"bonnie\"))) ∨ ((¬(attend_and_engaged(\"bonnie\") ∧ is_student(\"bonnie\"))) ∧ ¬(¬attend_and_engaged(\"bonnie\") ∧ ¬is_student(\"bonnie\"))) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\nperform_often(\"bonnie\") ::: Bonnie performs in school talent shows often."
  },
  {
    "id": "FOLIO_dev_1",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "I'll be happy to help you with this task. However, I need to clarify that the problem statement is quite long and involves multiple texts, questions, and rules for parsing sentences into first-order logic formulas.\n\nTo ensure that I provide accurate assistance, I will break down the solution into smaller steps and focus on one text at a time. Please let me know which specific text you would like me to start with.\n\nOnce I understand the specific text and question you'd like me to address, I'll follow the format you specified and provide a step-by-step solution.\n\nPlease respond with the number of the text you'd like me to start with (e.g., Text 1, Text 2, etc.)."
  },
  {
    "id": "FOLIO_dev_2",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbonnie ::: represents bonnie\nPredicates:\nperform_often(x) ::: x performs in school talent shows often.\nattend_and_engaged(x) ::: x attends and is very engaged with school events.\nis_inactive_member(x) ::: x is inactive and disinterested members of their community.\nchaperone_dances(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nwishes_further_education(x) ::: x wishes to further her academic careers and educational opportunities.\nPremises:\n∀x (perform_often(x) → attend_and_engaged(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n∀x ((perform_often(x) ∧ ¬is_inactive_member(x)) ∨ (¬perform_often(x) ∧ is_inactive_member(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n∀x (chaperone_dances(x) → ¬is_student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n∀x (is_inactive_member(x) →  chaperone_dances(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n∀x ((wishes_further_education(x) ∧ is_student(x)) ∨ ¬(wishes_further_education(x) ∨ is_student(x))) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(¬((attend_and_engaged(\"bonnie\") ∧ is_student(\"bonnie\")) ∧ (attend_and_engaged(\"bonnie\") ∨ is_student(\"bonnie\"))) ∧ ¬(¬(attend_and_engaged(\"bonnie\") ∧ is_student(\"bonnie\")) ∧ ¬(attend_and_engaged(\"bonnie\") ∨ is_student(\"bonnie\")))) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\n∀x ((chaperone_dances(x) ∨ perform_often(x)) → (wishes_further_education(x) ∧ is_inactive_member(x))) ::: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."
  },
  {
    "id": "FOLIO_dev_3",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James has lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njames ::: represents james\nPredicates:\nis_employee(x) ::: x is an employee.\nschedule_meetings_with_customers(x) ::: x schedules meetings with customers.\nappear_in_company_today(x) ::: x appears in the company today.\nhas_lunch_at_home(x) ::: x has lunch at home.\nwork_remotely_from_home(x) ::: x works remotely from home.\nis_manager(x) ::: x is a manager.\nin_other_countries(x) ::: x is in other countries.\nPremises:\n∀x (schedule_meetings_with_customers(x) → appear_in_company_today(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (has_lunch_at_home(x) → work_remotely_from_home(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n∀x (in_other_countries(x) → work_remotely_from_home(x)) ::: All employees who are in other countries work remotely from home.\n¬∃x (is_manager(x) ∧ work_remotely_from_home(x)) ::: No managers work remotely from home.\n(is_manager(\"james\") ∧ appear_in_company_today(\"james\")) ∨ (¬is_manager(\"james\") ∧ ¬appear_in_company_today(\"james\")) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\n∀x ((has_lunch_at_home(x) ∧ ¬has_lunch_in_company(x)) ∨ (has_lunch_in_company(x) ∧ ¬has_lunch_at_home(x))) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (has_lunch_in_company(x) → schedule_meetings_with_customers(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\nQuery:\nhas_lunch_in_company(\"james\") ::: James has lunch in the company."
  },
  {
    "id": "FOLIO_dev_4",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James does not have lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njames ::: represents james\nPredicates:\nis_employee(x) ::: x is an employee.\nschedule_meetings_with_customers(x) ::: x schedules meetings with customers.\nappear_in_company_today(x) ::: x appears in company today.\nhave_lunch_at_home(x) ::: x has lunch at home.\nwork_remotely_from_home(x) ::: x works remotely from home.\nis_manager(x) ::: x is a manager.\nin_other_countries(x) ::: x is in other countries.\n\nPremises:\n∀x (schedule_meetings_with_customers(x) → appear_in_company_today(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n∀x (have_lunch_at_home(x) → work_remotely_from_home(x)) ::: Everyone who has lunch at home works remotely from home. \n∀x ((have_lunch_in_company(x) ∧ ¬have_lunch_at_home(x)) ∨ (have_lunch_at_home(x) ∧ ¬have_lunch_in_company(x))) ::: Employees will either have lunch in the company or have lunch at home.\n∀x (in_other_countries(x) → work_remotely_from_home(x)) ::: All employees who are in other countries work remotely from home.\n∀x (is_manager(x) → ¬work_remotely_from_home(x)) ::: No managers work remotely from home.\n(is_manager(\"james\") ∧ appear_in_company_today(\"james\")) ∨ (¬(is_manager(\"james\") ∧ appear_in_company_today(\"james\"))) ∧ ¬(is_manager(\"james\") ∨ appear_in_company_today(\"james\"))) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\n\nQuery:\nhave_lunch_at_home(\"james\") ::: James does not have lunch in the company."
  },
  {
    "id": "FOLIO_dev_5",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "The text does not provide enough information to determine whether James has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."
  },
  {
    "id": "FOLIO_dev_6",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is an animal.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmonkeypox ::: represents monkeypox\nmonkeypox_virus ::: represents the monkeypox virus\nanimals ::: represents animals\nhumans ::: represents humans\nmammals ::: represents mammals\nfever ::: represents fever\nheadache ::: represents headache\nmuscle_pains ::: represents muscle pains\nglu ::: represents glu\n\nPredicates:\nis_disease(x) ::: x is a disease.\ncaused_by(x, y) ::: x is caused by y.\ncan_occur_in(x, y) ::: x can occur in y.\nare_animals(x) ::: x are animals.\nis_mammal(x) ::: x is a mammal.\ninclude_symptoms(x, y) ::: symptoms of x include y.\nget_sick_with(x, y) ::: people get sick with y when they get x.\n\nPremises:\nis_disease(\"monkeypox\") ∧ caused_by(\"monkeypox\", \"monkeypox_virus\") ::: Monkeypox is an infectious disease caused by the monkeypox virus.\ncan_occur_in(\"monkeypox_virus\", \"animals\") ∧ are_animals(\"humans\") ::: Monkeypox virus can occur in certain animals, including humans.\nare_animals(\"mammals\") ∧ are_animals(\"humans\") ∧ is_mammal(\"humans\") ::: Humans are mammals. Mammals are animals.\ninclude_symptoms(\"monkeypox\", \"fever\") ∧ include_symptoms(\"monkeypox\", \"headache\") ∧ include_symptoms(\"monkeypox\", \"muscle_pains\") ∧ include_symptoms(\"monkeypox\", \"tiredness\") ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nget_sick_with(\"glu\", \"tiredness\") ::: People feel tired when they get a glu.\n\nQuery:\n∃x (are_animals(x)) ::: There is an animal."
  },
  {
    "id": "FOLIO_dev_7",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No one gets flu.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given text, it can be deduced that:\n\n* Monkeypox is an infectious disease caused by the monkeypox virus.\n* The virus can occur in humans, and humans are mammals.\n* Mammals are animals, so humans are a type of animal.\n* Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, etc.\n* People feel tired when they get the flu.\n\nFrom these statements, it cannot be concluded that no one gets the flu. In fact, the last statement implies that people do get the flu and experience symptoms such as feeling tired.\n\nTherefore, the answer to the question is: **False**\n\nThe correct logical conclusion based on the given text is:\n\n* ∃x (is_human(x) ∧ gets_flu(x)) // There exists a human who gets the flu."
  },
  {
    "id": "FOLIO_dev_8",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Symptons of Monkeypox include coughing.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "I can assist with parsing the text into first-order logic formulas. However, I need to clarify that the provided text does not contain any specific question or query that requires logical deduction.\n\nAssuming you would like me to extract predicates and constants from the given text and translate every information in each sentence, here is my response:\n\nConstants:\n    monkeypox ::: represents Monkeypox\n    monkeypox_virus ::: represents the monkeypox virus\n    humans ::: represents humans\n    mammals ::: represents mammals\n    animals ::: represents animals\n\nPredicates:\n    is_infectious_disease(x) ::: x is an infectious disease.\n    caused_by(x, y) ::: x is caused by y.\n    can_occur(x, y) ::: x can occur in y.\n    are_mammals(x) ::: x are mammals.\n    is_animal(x) ::: x is an animal.\n    include_symptoms(x, y) ::: symptoms of x include y.\n    feel_tired(x) ::: x feel tired.\n\nPremises:\n∀x (is_infectious_disease(\"monkeypox\") ∧ caused_by(\"monkeypox\", \"monkeypox_virus\")) ::: Monkeypox is an infectious disease caused by the monkeypox virus.\n∃x ∀y ((can_occur(\"monkeypox_virus\", x) → are_mammals(x)) ∧ (are_mammals(humans) ∧ is_animal(animals))) ::: Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals.\n∀x (include_symptoms(\"Monkeypox\", \"fever\") ∨ include_symptoms(\"Monkeypox\", \"headache\") ∨ include_symptoms(\"Monkeypox\", \"muscle_pains\") ∨ include_symptoms(\"Monkeypox\", \"tired\")) ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n∀x (feel_tired(x) → get_glu(x)) ::: People feel tired when they get a glu.\n\nQuery: ∃x (include_symptoms(\"Monkeypox\", \"coughing\")) ::: Symptons of Monkeypox include coughing."
  },
  {
    "id": "FOLIO_dev_9",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Ocellated wild turkey.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ntom ::: represents tom\neastern_wild_turkey ::: represents eastern wild turkey\nosceola_wild_turkey ::: represents osceola wild turkey\ngould_s_wild_turkey ::: represents gould's wild turkey\nmerriam_s_wild_turkey ::: represents merriam's wild turkey\nrio_grande_wild_turkey ::: represents rio grande wild turkey\nocellated_wild_turkey ::: represents ocellated wild turkey\nPredicates:\nis_type_of(x,y) ::: x is a type of y.\nis_wild_turkey(x) ::: x is a wild turkey.\nPremises:\n∀x ((is_type_of(\"eastern_wild_turkey\", \"wild_turkey\") ∧ ¬is_type_of(\"osceola_wild_turkey\", \"wild_turkey\")) ∧ (¬is_type_of(\"rio_grande_wild_turkey\", \"wild_turkey\") ∧ is_type_of(\"ocellated_wild_turkey\", \"wild_turkey\"))) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n¬is_type_of(\"tom\",\"eastern_wild_turkey\") ::: Tom is not an Eastern wild turkey.\n¬is_type_of(\"tom\",\"osceola_wild_turkey\") ::: Tom is not an Osceola wild turkey.\n(¬is_type_of(\"tom\", \"gould_s_wild_turkey\") ∧ ¬is_type_of(\"tom\", \"merriam_s_wild_turkey\")) ∧ (¬is_type_of(\"tom\",\"rio_grande_wild_turkey\") ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\n∃x(is_type_of(x, \"wild_turkey\") ∧ ¬(x = \"eastern_wild_turkey\") ∧ ¬(x=\"osceola_wild_turkey\") ∧ ¬(x=\"gould_s_wild_turkey\") ∧ ¬(x=\"merriam_s_wild_turkey\") ∧ ¬(x=\"rio_grande_wild_turkey\")) ::: Tom is a wild turkey.\nQuery:\nis_type_of(\"tom\",\"ocellated_wild_turkey\") :::  Tom is an Ocellated wild turkey."
  },
  {
    "id": "FOLIO_dev_10",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Eastern wild turkey.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text and question, I will follow the specified format to translate every sentence into first-order logic formulas.\n\nConstants:\neastern_wild_turkey ::: represents Eastern wild turkey\nosceola_wild_turkey ::: represents Osceola wild turkey\ngould’s_wild_turkey ::: represents Gould's wild turkey\nmerriam’s_wild_turkey ::: represents Merriam's wild turkey\nrio_grande_wild_turkey ::: represents Rio Grande wild turkey\nocellated_wild_turkey ::: represents Ocellated wild turkey\ntom ::: represents Tom\n\nPredicates:\nis_type_of(x, y) ::: x is a type of y.\nis_eastern_wild_turkey(x) ::: x is an Eastern wild turkey.\nis_osceola_wild_turkey(x) ::: x is an Osceola wild turkey.\nis_gould’s_wild_turkey(x) ::: x is a Gould's wild turkey.\nis_merriam’s_wild_turkey(x) ::: x is a Merriam's wild turkey.\nis_rio_grande_wild_turkey(x) ::: x is a Rio Grande wild turkey.\nis_ocellated_wild_turkey(x) ::: x is an Ocellated wild turkey.\nis_wild_turkey(x) ::: x is a wild turkey.\n\nPremises:\n∃x (is_type_of(\"eastern_wild_turkey\", x) ∧ is_type_of(\"osceola_wild_turkey\", x) ∧ is_type_of(\"gould’s_wild_turkey\", x) ∧ is_type_of(\"merriam’s_wild_turkey\", x) ∧ is_type_of(\"rio_grande_wild_turkey\", x) ∧ is_type_of(\"ocellated_wild_turkey\", x)) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n¬is_eastern_wild_turkey(\"tom\") ::: Tom is not an Eastern wild turkey.\n¬is_osceola_wild_turkey(\"tom\") ::: Tom is not an Osceola wild turkey.\n¬(is_gould’s_wild_turkey(\"tom\") ∧ is_merriam’s_wild_turkey(\"tom\") ∧ is_rio_grande_wild_turkey(\"tom\")) ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nis_wild_turkey(\"tom\") ::: Tom is a wild turkey.\n\nQuery:\nis_eastern_wild_turkey(\"tom\") :::  Tom is an Eastern wild turkey."
  },
  {
    "id": "FOLIO_dev_11",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Joey is a wild turkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ntom ::: represents tom\njoey ::: represents joey\nPredicates:\nis_wild_turkey(x) ::: x is a wild turkey.\nis_eastern_wild_turkey(x) ::: x is an Eastern wild turkey.\nis_osceola_wild_turkey(x) ::: x is an Osceola wild turkey.\nis_goulds_wild_turkey(x) ::: x is a Gould's wild turkey.\nis_merriams_wild_turkey(x) ::: x is a Merriam's wild turkey.\nis_rio_grande_wild_turkey(x) ::: x is a Rio Grande wild turkey.\nis_ocellated_wild_turkey(x) ::: x is an Ocellated wild turkey.\nPremises:\n¬(is_eastern_wild_turkey(\"tom\") ∨ is_osceola_wild_turkey(\"tom\")) ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey.\n¬(is_goulds_wild_turkey(\"tom\") ∨ is_merriams_wild_turkey(\"tom\") ∨ is_rio_grande_wild_turkey(\"tom\")):::  Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nis_wild_turkey(\"tom\") ::: Tom is a wild turkey.\nQuery:\nis_wild_turkey(\"joey\") ::: Joey is a wild turkey.\n\nOutput: \nThe statement is uncertain."
  },
  {
    "id": "FOLIO_dev_12",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is in the Top 10 list.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njapanese_game_company ::: represents a japanese game company\nthe_legend_of_zelda ::: represents the legend of zelda\n\nPredicates:\nis_japanese(x) ::: x is japanese.\ncreates(x, y) ::: x creates y.\nmade_by(x, y) ::: x is made by y.\nselected_into_top10_list(x) ::: x will be selected into top 10 list.\nsells_more_than_one_million_copies(x) ::: x sells more than one million copies.\n\nPremises:\nis_japanese(\"japanese_game_company\") ∧ creates(\"japanese_game_company\", \"the_legend_of_zelda\") ::: A Japanese game company created the game the Legend of Zelda.\n∀x (made_by(x, \"japanese_game_company\") → selected_into_top10_list(x)) ::: All games in the Top 10 list are made by Japanese game companies.\n∀x ∀y(sells_more_than_one_million_copies(x) → selected_into_top10_list(y))::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsells_more_than_one_million_copies(\"the_legend_of_zelda\") ::: The Legend of Zelda sold more than one million copies.\n\nQuery:\nselected_into_top10_list(\"the_legend_of_zelda\") ::: The Legend of Zelda is in the Top 10 list."
  },
  {
    "id": "FOLIO_dev_13",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text and rules for parsing sentences into first-order logic formulas, I will analyze each sentence in the text and provide the used predicates and constants.\n\n**Text:**\nA Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.\n\n**Constants:**\njapan ::: represents Japan\nlegend_of_zelda ::: represents the Legend of Zelda\n\n**Predicates:**\nis_japanese_game_company(x) ::: x is a Japanese game company.\ncreated(x, y) ::: x created y.\nis_in_top_10_list(x) ::: x is in the Top 10 list.\nmade_by(x, y) ::: x was made by y.\nsells_more_than_one_million_copies(x) ::: x sells more than one million copies.\n\n**Premises:**\n∀x (created(japan, legend_of_zelda) → is_japanese_game_company(japan)) ::: A Japanese game company created the game the Legend of Zelda.\n∀x ∀y (is_in_top_10_list(y) → made_by(y, japan)) ::: All games in the Top 10 list are made by Japanese game companies.\n∀x (sells_more_than_one_million_copies(x) → is_in_top_10_list(x)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsells_more_than_one_million_copies(legend_of_zelda) ::: The Legend of Zelda sold more than one million copies.\n\n**Query:**\nmade_by(FIFA_22, japan) ::: FIFA 22 is made by a Japanese video game company.\n\nNote that there is no information about FIFA 22 in the provided text, so we cannot determine if it is true or false. Therefore, the answer is:\n\nUncertain"
  },
  {
    "id": "FOLIO_dev_14",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is not in the Top 10 list.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njapan ::: represents japan\ntop_10_list ::: represents top 10 list\nlegend_of_zelda ::: represents legend of zelda\nPredicates:\nis_japanese(x) ::: x is japanese.\ncreates(x, y) ::: x creates y.\nis_game_company(x) ::: x is a game company.\nis_in_top_10_list(x) ::: x is in the top 10 list.\nsells_more_than_one_million_copies(x) ::: x sells more than one million copies.\nselected_into_top_10_list(x) ::: x will be selected into the Top 10 list.\nPremises:\ncreates(\"japan\", \"legend_of_zelda\") ∧ is_japanese(\"japan\") ∧ is_game_company(\"japan\") ::: A Japanese game company created the game the Legend of Zelda.\n∀x (is_in_top_10_list(x) → creates(\"japan\", x)) ::: All games in the Top 10 list are made by Japanese game companies.\nsells_more_than_one_million_copies(x) → selected_into_top_10_list(x) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsells_more_than_one_million_copies(\"legend_of_zelda\") ::: The Legend of Zelda sold more than one million copies.\nQuery:\n¬is_in_top_10_list(\"legend_of_zelda\") ::: The Legend of Zelda is not in the Top 10 list."
  },
  {
    "id": "FOLIO_dev_15",
    "context": "All squares have four sides. All four-sided things are shapes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All squares are shapes.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nsquares ::: represents squares\nPredicates:\nhas_four_sides(x) ::: x has four sides.\nis_shape(x) ::: x is a shape.\nPremises:\n∀x (is_square(x) → has_four_sides(x)) ::: All squares have four sides.\n∀x (has_four_sides(x) → is_shape(x)) ::: All four-sided things are shapes.\nQuery:\n∀x (is_square(x) →  is_shape(x)) ::: All squares are shapes."
  },
  {
    "id": "FOLIO_dev_16",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nare_cute(x) ::: x are cute.\nis_turtle(x) ::: x is a turtle.\nexist(x) ::: x exist.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n∀x (is_rabbit(x) → are_cute(x)) ::: All rabbits are cute.\n∃x (is_turtle(x) ∧ exist(x)) ::: Some turtles exist.\n∀x (is_animal(x) → (is_rabbit(x) ∨ is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (is_skittish(x) → ¬is_still(x)) ::: If something is skittish, then it is not still.\n∀x (is_squirrel(x) → is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\nis_turtle(\"rock\") ::: Rock is a turtle.\n\nThe final answer is: False"
  },
  {
    "id": "FOLIO_dev_17",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is not a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrabbit ::: represents rabbit\nsquirrel ::: represents squirrel\nturtle ::: represents turtle\nrock ::: represents rock\n\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_squirrel(x) ::: x is a squirrel.\nis_cute(x) ::: x is cute.\nexists(x) ::: x exists.\nis_turtle(x) ::: x is a turtle.\nis_animal(x) ::: x is an animal.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\n\nPremises:\n∀x (is_rabbit(x) → is_cute(x)) ::: All rabbits are cute.\n∃x (is_turtle(x)) ::: Some turtles exist.\n∀x ((is_animal(x) ∧ is_rabbit(x)) ∨ (is_animal(x) ∧ is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (is_skittish(x) → ¬is_still(x)) ::: If something is skittish, then it is not still.\n∀x (is_squirrel(x) → is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\n\nQuery:\n¬is_turtle(\"rock\") ::: Rock is not a turtle."
  },
  {
    "id": "FOLIO_dev_18",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle or cute.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrabbit ::: represents a rabbit\nturtle ::: represents a turtle\nsquirrel ::: represents a squirrel\nrock ::: represents rock\n\nPredicates:\nis_rabbit(x) ::: x is a rabbit\nis_turtle(x) ::: x is a turtle\nis_squirrel(x) ::: x is a squirrel\nis_cute(x) ::: x is cute.\nis_still(x) ::: x is still.\nis_skittish(x) ::: x is skittish.\n\nPremises:\n∀x (is_rabbit(x) →  is_cute(x)) ::: All rabbits are cute.\n∃x (is_turtle(x)) ::: Some turtles exist.\n∀x ((¬is_rabbit(x) ∧ is_squirrel(x)) ∨ (is_rabbit(x) ∧ ¬is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (is_skittish(x) →  ¬is_still(x)) ::: If something is skittish, then it is not still.\n∀x (is_squirrel(x) →  is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\n\nQuery:\n(is_turtle(\"rock\") ∨ is_cute(\"rock\")) ::: Rock is a turtle or cute."
  },
  {
    "id": "FOLIO_dev_19",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nare_cute(x) ::: x is cute.\nexist(x) ::: x exist.\nis_turtle(x) ::: x is a turtle.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n∀x (is_rabbit(x) → are_cute(x)) ::: All rabbits are cute.\n∃x (is_turtle(x)) ::: Some turtles exist.\n∀x ((is_rabbit(x) ∧ ¬is_squirrel(x)) ∨ (¬is_rabbit(x) ∧ is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (is_skittish(x) → ¬is_still(x)) ::: If something is skittish, then it is not still.\n∀x (is_squirrel(x) →  is_skittish(x)) ::: All squirrels are skittish.\n¬is_still(\"rock\") ∧ is_still(\"rock\") ::: Rock is still.\nQuery:\n(¬(is_turtle(\"rock\") ∧ is_squirrel(\"rock\")) → (are_cute(\"rock\") ∨ is_skittish(\"rock\"))) ::: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish."
  },
  {
    "id": "FOLIO_dev_20",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is cute and still, then Rock is a turtle and skittish.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrabbit ::: represents a rabbit\nturtle ::: represents a turtle\nsquirrel ::: represents a squirrel\nrock ::: represents rock\n\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nis_turtle(x) ::: x is a turtle.\nexist(x) ::: x exists.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\n\nPremises:\n∀x (is_rabbit(x) → is_cute(x)) ::: All rabbits are cute.\n∃x (exist(x) ∧ is_turtle(x)) ::: Some turtles exist.\n∀x ((is_animal(x) ∧ ¬is_squirrel(x)) ∨ (¬is_animal(x) ∧ is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n∀x (is_skittish(x) → ¬is_still(x)) ::: If something is skittish, then it is not still.\n∀x (is_squirrel(x) → is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\n\nQuery:\n(is_cute(\"rock\") ∧ is_still(\"rock\")) → (exist(\"turtle\") ∧ is_turtle(\"turtle\") ∧ is_skittish(\"turtle\")) ::: If Rock is cute and still, then Rock is a turtle and skittish."
  },
  {
    "id": "FOLIO_dev_21",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Stranger Things\" to Lisa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nstranger_things ::: represents the Netflix show \"Stranger Things\"\nkaren ::: represents karen\nnetflix ::: represents netflix\nblack_mirror ::: represents the Netflix show \"Black Mirror\"\nlisa ::: represents lisa\n\nPredicates:\nis_popular(x) ::: x is a popular Netflix show.\nbinge_watch(x, y) ::: x binge-watches y.\ndownload(x, y) ::: x downloads y.\nshare_to(x,y,z) ::: x shares y to z.\n\nPremises:\n∀x (is_netflix_show(x) ∧ is_popular(x) → binge_watch(\"karen\", x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n∀x (binge_watch(\"karen\", x) ↔ download(\"karen\", x)) :::  If and only if Karen binge-watches a Netflix show, she will download it.\n¬download(\"karen\", \"black_mirror\") :::  Karen does not download \"Black Mirror\".\nis_netflix_show(\"stranger_things\") ∧ is_popular(\"stranger_things\") ::: \"Stranger Things\" is a popular Netflix show.\n∀x ∀y (binge_watch(\"karen\", y) → share_to(\"karen\", y, \"lisa\")) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\n\nQuery:\nshare_to(\"karen\", \"stranger_things\", \"lisa\") :::  Karen will share \"Stranger Things\" to Lisa."
  },
  {
    "id": "FOLIO_dev_22",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? \"Black Mirror\" is popular.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, we can deduce the following:\n\n1. \"Stranger Things\" is a popular Netflix show.\n2. If a Netflix show is popular, Karen will binge-watch it.\n3. If and only if Karen binge-watches a Netflix show, she will download it.\n4. Karen does not download \"Black Mirror\".\n5. \"Black Mirror\" is a Netflix show.\n\nFrom points 2 and 3, we can conclude that if Karen binge-watches a Netflix show, she will both download it (point 3) and share it with Lisa (point 6). However, point 4 states that Karen does not download \"Black Mirror\", which implies that she also does not share \"Black Mirror\" with Lisa.\n\nNow, let's consider the query: Is \"Black Mirror\" popular?\n\nFrom point 2, we know that if a Netflix show is popular, Karen will binge-watch it. However, we do not have any information about whether Karen actually binge-watches \"Black Mirror\". We only know that she does not download it (point 4), which could be due to various reasons.\n\nSince there is no direct information linking the popularity of \"Black Mirror\" to Karen's actions, and we cannot infer anything conclusive from the given statements, the answer to the query is:\n\nUncertain."
  },
  {
    "id": "FOLIO_dev_23",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Black Mirror\" to Lisa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nnetflix_show ::: represents netflix show\nkaren ::: represents karen\nlisa ::: represents lisa\nstranger_things ::: represents stranger things\nblack_mirror ::: represents black mirror\n\nPredicates:\nis_netflix(x) ::: x is a Netflix.\nis_popular(x) ::: x is popular.\nbinge_watch(x, y) ::: x will binge-watch y.\ndownload(x, y) ::: x downloads y.\nshare_to(x,y,z) ::: x shares to z.\n\nPremises:\nis_netflix(\"netflix_show\") ∧ is_popular(\"stranger_things\") ::: \"Stranger Things\" is a popular Netflix show.\n∀x ∀y (is_netflix(y) ∧ is_popular(y) → binge_watch(\"karen\", y)) ::: If a Netflix show is popular, Karen will binge-watch it.\n∀x ∀y (binge_watch(\"karen\", y) ↔ download(\"karen\", y)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n¬download(\"karen\", \"black_mirror\") ::: Karen does not download \"Black Mirror\".\nis_netflix(\"black_mirror\") ::: \"Black Mirror\" is a Netflix show.\n∀x ∀y (binge_watch(\"karen\", y) → share_to(\"karen\", y, \"lisa\"))::: If Karen binge-watches a Netflix show, she will share it to Lisa.\n\nQuery:\nshare_to(\"karen\", \"black_mirror\", \"lisa\") ::: Karen will share \"Black Mirror\" to Lisa.\n\nReasoning: According to the premises, if Karen downloads \"Black Mirror\", then she would have binge-watched it, which means she would share it with Lisa. However, the first premise states that Karen does not download \"Black Mirror\". This implies that she did not binge-watch it and therefore will not share it with Lisa. Hence, the query statement is false based on the given information.\n\nAnswer: FALSE"
  },
  {
    "id": "FOLIO_dev_24",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbeijing ::: represents beijing\nchina ::: represents china\nnorthern_china ::: represents northern china\nyear_2008 ::: represents the year of 2008\nPredicates:\nis_capital(x, y) ::: x is a capital city of y.\nis_populous_city(x) ::: x is a populous city.\nis_hosted_by(x,y) ::: x is hosted by y.\nlocated_in(x, y) ::: x is located in y.\nhosted_olympics(x) ::: x hosted olympics.\nhas_ranked_university(x) ::: x has university that ranked among the best in asia-pacific and worldwide.\n\nPremises:\nis_capital(\"beijing\", \"china\") ::: Beijing is the capital of the People's Republic of China.\n∀x ((is_capital(x, y) ∧ is_populous_city(x)) → ¬(¬is_capital(x, z) ∧ ¬is_populous_city(z))) ::: Beijing is the world's most populous national capital city. \nlocated_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\n((hosted_olympics(\"beijing\") ∧ is_hosted_by(year_2008, \"summer\")) ∧ (hosted_olympics(\"beijing\") ∧ is_hosted_by(year_2008, \"paralympics\"))) ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n(hosted_olympics(\"beijing\") → ((is_hosted_by(\"summer\", x) ∨ is_hosted_by(\"winter\", x)) ∧ (is_hosted_by(\"summer_paralympics\", x) ∨ is_hosted_by(\"winter_paralympics\", y)))) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\n∃x (has_ranked_university(\"beijing\") ∧ ¬(¬has_ranked_university(\"universities\") → ¬is_best_ranked(x))) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n\nQuery:\n(hosted_olympics(\"beijing\") ∧ is_hosted_by(year_2008, \"summer\")) ∧ hosted_olympics(\"beijing\") ::: Beijing has hosted both the 2008 Summer Olympics and a winter olympics."
  },
  {
    "id": "FOLIO_dev_25",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is located in southern China.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbeijing ::: represents beijing\npeoples_republic_of_china ::: represents people's republic of china\nnorthern_china ::: represents northern china\nsummer_olympics ::: represents summer olympics\nwinter_olympics ::: represents winter olympics\nsummer_paralympics ::: represents summer paralympics\nwinter_paralympics ::: represents winter paralympics\nyear_2008 ::: represents the year 2008\n\nPredicates:\nis_capital(x, y) ::: x is capital of y.\nis_populous_city(x) ::: x is populous city.\nlocated_in(x, y) ::: x is located in y.\nhosted_event(x, y) ::: x hosted event y.\nhas_university(x) ::: x has university.\nrank_among_the_best(x) ::: x ranks among the best.\n\nPremises:\nis_capital(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\nis_populous_city(\"beijing\") ::: Beijing is the world's most populous national capital city.\nlocated_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosted_event(\"beijing\", \"summer_olympics\") ∧ hosted_event(\"beijing\", \"summer_paralympics\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n∃x (hosted_event(x, \"winter_olympics\") ∧ hosted_event(x, \"winter_paralympics\")) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nhas_university(\"beijing\") ∧ rank_among_the_best(\"university_of_beijing\") ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n\nQuery:\nlocated_in(\"beijing\", \"southern_china\") ::: Beijing is located in southern China."
  },
  {
    "id": "FOLIO_dev_26",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is the second largest Chinese city by urban population.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbeijing ::: represents beijing\npeoples_republic_of_china ::: represents people's republic of china\nnorthern_china ::: represents northern china\nsummer_olympics ::: represents summer olympics\nparalympics_games ::: represents paralympics games\nwinter_olympics ::: represents winter olympics\nasia_pacific ::: represents asia pacific\nPredicates:\nis_capital(x, y) ::: x is the capital of y.\nis_populous(x) ::: x is populous.\nis_northern(x, y) ::: x is located in y.\nhosts(x, y) ::: x hosts y.\nis_university(x) ::: x is a university.\nranks_among_best(x, y) ::: x ranks among the best in y.\n\nPremises:\nis_capital(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\n¬∃x (is_populous(x) ∧ ¬(x = \"beijing\")) ::: Beijing is the world's most populous national capital city.\nis_northern(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosts(\"beijing\", \"summer_olympics\") ∧ hosts(\"beijing\", \"paralympics_games\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n∃x (hosts(x, \"winter_olympics\")) ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\n¬∃x ¬(is_university(x) ∧ ranks_among_best(x, \"asia_pacific\") ∧ x ∈ beijing's universities )::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific.\n\nQuery:\n∀x ((x = \"shanghai\" ∨ x = \"guangzhou\") → (is_populous(\"beijing\") ∧ is_northern(\"beijing\", \"northern_china\"))) ::: Beijing is the second largest Chinese city by urban population.\n------\nNote: The query can't be determined as True or False. It's uncertain because there isn't enough information provided in the text to make a conclusion about whether Beijing is the second largest Chinese city by urban population or not."
  },
  {
    "id": "FOLIO_dev_27",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is an alien.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmarvin ::: represents marvin\nPredicates:\nis_alien(x) ::: x is an alien.\nis_extraterrestrial(x) ::: x is an extraterrestrial.\nis_human(x) ::: x is human.\nfrom_earth(x) ::: x is from earth.\nfrom_mars(x) ::: x is from mars.\n\nPremises:\n∀x (is_alien(x) →  is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (from_mars(x) →  is_alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (is_extraterrestrial(x) → ¬is_human(x)) ::: No extraterrestrial is human.\n∀x (from_earth(x) →  is_human(x)) ::: Everyone from Earth is a human.\n¬(from_earth(\"marvin\") ∧ from_mars(\"marvin\")) ::: Marvin cannot be from Earth and from Mars.\n¬from_earth(\"marvin\") →  is_extraterrestrial(\"marvin\")::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\nis_alien(\"marvin\") ::: Marvin is an alien.\n\nAccording to the premises, we can conclude that if Marvin is not from Earth, then he must be an extraterrestrial (Premise 5). Since all aliens are extraterrestrials (Premise 1), and being from Mars makes someone an alien (Premise 2), it's possible for Marvin to be an alien. However, we cannot definitively conclude that Marvin is an alien because there is no direct information about his origin or status as an alien.\n\nTherefore, the answer is uncertain."
  },
  {
    "id": "FOLIO_dev_28",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is neither a human nor from Mars.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmarvin ::: represents marvin\nPredicates:\nis_alien(x) ::: x is alien.\nis_extraterrestrial(x) ::: x is extraterrestrial.\nis_human(x) ::: x is human.\nfrom_mars(x) ::: x is from mars.\nfrom_earth(x) ::: x is from earth.\nPremises:\n∀x (is_alien(x) → is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (from_mars(x) → is_alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (is_extraterrestrial(x) → ¬is_human(x)) ::: No extraterrestrial is human.\n∀x (from_earth(x) → is_human(x)) ::: Everyone from Earth is a human.\n¬(from_earth(\"marvin\") ∧ from_mars(\"marvin\")) ::: Marvin cannot be from Earth and from Mars.\n¬from_earth(\"marvin\") → is_extraterrestrial(\"marvin\") ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\n¬is_human(\"marvin\") ∧ ¬from_mars(\"marvin\") ::: Marvin is neither a human nor from Mars."
  },
  {
    "id": "FOLIO_dev_29",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Marvin is not from Mars, then Marvin is a human.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmarvin ::: represents marvin\n\nPredicates:\nis_alien(x) ::: x is alien.\nis_extraterrestrial(x) ::: x is extraterrestrial.\nis_from_mars(x) ::: x is from mars.\nis_human(x) ::: x is human.\nis_from_earth(x) ::: x is from earth.\n\nPremises:\n∀x (is_alien(x) → is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n∀x (is_from_mars(x) → is_alien(x)) ::: If someone is from Mars, then they are aliens.\n∀x (is_extraterrestrial(x) → ¬is_human(x)) ::: No extraterrestrial is human.\n∀x (is_from_earth(x) → is_human(x)) ::: Everyone from Earth is a human.\n¬(is_from_earth(\"marvin\") ∧ is_from_mars(\"marvin\")) ::: Marvin cannot be from Earth and from Mars.\n(is_human(\"marvin\") ∨ is_extraterrestrial(\"marvin\")) ∧ ¬is_from_earth(\"marvin\") → is_extraterrestrial(\"marvin\") ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n\nQuery:\n¬is_from_mars(\"marvin\") → is_human(\"marvin\") ::: If Marvin is not from Mars, then Marvin is a human."
  },
  {
    "id": "FOLIO_dev_30",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic is a Grand Slam champion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndjokovic ::: represents djokovic\n\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlives_in_tax_havens(x) ::: x lives in tax havens.\n\nPremises:\n∀x ((¬is_grand_slam_champion(x) ∧ is_oscar_nominated_actor(x)) ∨ (is_grand_slam_champion(x) ∧ ¬is_oscar_nominated_actor(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (is_grand_slam_champion(x) → is_professional_tennis_player(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (is_oscar_nominated_actor(x) → is_celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (is_professional_tennis_player(x) → is_athlete(x)) ::: All professional tennis players are athletes.\n∀x (is_celebrity(x) → is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (is_athlete(x) → is_famous(x)) ::: If a person is an athlete then they are famous.\n∀x (is_well_paid(x) → lives_in_tax_havens(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") ∧ is_athlete(\"djokovic\")) → is_well_paid(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\n\nQuery:\nis_grand_slam_champion(\"djokovic\") ::: Djokovic is a Grand Slam champion."
  },
  {
    "id": "FOLIO_dev_31",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic lives in a tax haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndjokovic ::: represents djokovic\n\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlives_in_tax_haven(x) ::: x lives in tax haven.\n\nPremises:\n∀x ((¬is_grand_slam_champion(x) ∧ is_oscar_nominated_actor(x)) ∨ (is_grand_slam_champion(x) ∧ ¬is_oscar_nominated_actor(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (is_grand_slam_champion(x) → is_professional_tennis_player(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (is_oscar_nominated_actor(x) → is_celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (is_professional_tennis_player(x) → is_athlete(x)) ::: All professional tennis players are athletes.\n∀x (is_celebrity(x) → is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (is_athlete(x) → is_famous(x)) ::: If a person is an athlete then they are famous.\n∀x (is_well_paid(x) → lives_in_tax_haven(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") ∧ is_athlete(\"djokovic\")) → lives_in_tax_haven(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\n\nQuery:\nlives_in_tax_haven(\"djokovic\") ::: Djokovic lives in a tax haven."
  },
  {
    "id": "FOLIO_dev_32",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic does not live in a tax haven.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndjokovic ::: represents djokovic\n\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlives_in_tax_haven(x) ::: x lives in a tax haven.\nPremises:\n∀x ((¬is_grand_slam_champion(x) ∧ is_oscar_nominated_actor(x)) ∨ (is_grand_slam_champion(x) ∧ ¬is_oscar_nominated_actor(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n∀x (is_grand_slam_champion(x) →  is_professional_tennis_player(x)) ::: All people who are Grand Slam champions are professional tennis players.\n∀x (is_oscar_nominated_actor(x) → is_celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n∀x (is_professional_tennis_player(x) → is_athlete(x)) ::: All professional tennis players are athletes.\n∀x (is_celebrity(x) →  is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n∀x (is_athlete(x) → is_famous(x)) ::: If a person is an athlete then they are famous.\n∀x (is_well_paid(x) → lives_in_tax_haven(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") ∧ is_athlete(\"djokovic\")) →  is_well_paid(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\n\nQuery:\n¬lives_in_tax_haven(\"djokovic\") ::: Djokovic does not live in a tax haven."
  },
  {
    "id": "FOLIO_dev_33",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads a professional wrestling stable.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndiamond_mine ::: represents the diamond mine\nwwe ::: represents wwe\nroderick_strong ::: represents roderick strong\ncreed_brothers ::: represents creed brothers\nivy_nile ::: represents ivy nile\nimperium ::: represents imperium\n\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nformed_in(x, y) ::: x was formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has feud with y.\n\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") ∧ formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") ∧ includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\n\nQuery:\n∃x (is_professional_wrestling_stable(x) ∧ leads(\"roderick_strong\", x)) ::: Roderick strong leads a professional wrestling stable."
  },
  {
    "id": "FOLIO_dev_34",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads the Creed Brothers.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nroderick_strong ::: represents roderick strong\ndiamond_mine ::: represents diamond mine\ncreed_brothers ::: represents creed brothers\nivy_nile ::: represents ivy nile\nimperium ::: represents imperium\n\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nformed_in(x, y) ::: x was formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has feud with y.\n\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") ∧ formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") ∧ includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\n\nQuery:\nleads(\"roderick_strong\", \"creed_brothers\") ::: Roderick strong leads the Creed Brothers."
  },
  {
    "id": "FOLIO_dev_35",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nroderick_strong ::: represents roderick strong\ndiamond_mine ::: represents diamond mine\nwwe ::: represents wwe\ncreed_brothers ::: represents creed brothers\nivy_nile ::: represents ivy nile\nimperium ::: represents imperium\n\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nformed_in(x, y) ::: x formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has feud with y.\n\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") ∧ formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") ∧ includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\n\nQuery:\n¬(has_feud_with(\"imperium\", x) ∧ is_professional_wrestling_stable(x) ∧ includes(x, \"ivy_nile\")) ::: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."
  },
  {
    "id": "FOLIO_dev_36",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is a composer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbeethoven ::: represents beethoven\nsymphony_no_9 ::: represents symphony no. 9\nvienna_music_society ::: represents vienna music society\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite(x, y) ::: x writes y.\npremiere(x, y) ::: x premieres y.\nis_orchestra(x) ::: x is an orchestra.\nlead(x, y) ::: x leads y.\nis_conductor(x) ::: x is a conductor.\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n∀x (write(x,y) → is_composer(x)) ::: Composers write music pieces.\nwrite(beethoven, \"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") ::: Vienna Music Society premiered Symphony No. 9.\nis_orchestra(\"vienna_music_society\") ::: Vienna Music Society is an orchestra.\nlead(beethoven, \"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n∀x ∀y (lead(x,y) ∧ is_orchestra(y) → is_conductor(x)) ::: Orchestras are led by conductors.\nQuery:\nis_composer(\"beethoven\") ::: Beethoven is a composer."
  },
  {
    "id": "FOLIO_dev_37",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some orchestras premiered music pieces.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbeethoven ::: represents beethoven\nsymphony_no_9 ::: represents symphony no 9\nvienna_music_society ::: represents vienna music society\n\nPredicates:\nis_composer(x) ::: x is a composer.\nwrite(x, y) ::: x writes y.\npremiere(x, y) ::: x premieres y.\nis_orchestra(x) ::: x is an orchestra.\nleads(x, y) ::: x leads y.\nis_music_piece(x) ::: x is music piece.\nis_conductor(x) ::: x is a conductor.\n\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n∀x (is_composer(x) → ∃y (write(x, y) ∧ is_music_piece(y))) ::: Composers write music pieces.\nwrite(\"beethoven\", \"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") ::: Vienna Music Society premiered Symphony No. 9.\nis_orchestra(\"vienna_music_society\") ::: Vienna Music Society is an orchestra.\nleads(\"beethoven\", \"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n∀x (is_orchestra(x) → ∃y (leads(y, x) ∧ is_conductor(y))) ::: Orchestras are led by conductors.\n\nQuery:\n∃x (premiere(x, \"symphony_no_9\") ∧ is_orchestra(x)) ::: Some orchestras premiered music pieces."
  },
  {
    "id": "FOLIO_dev_38",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is not a conductor.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbeethoven ::: represents beethoven\nsymphony_no_9 ::: represents symphony no 9\nvienna_music_society ::: represents vienna music society\n\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite(x, y) ::: x writes y.\npremiere(x,y) ::: x premiered y.\nis_orchestra(x) ::: x is an orchestra.\nlead(x, y) ::: x leads y.\nis_composer(x) ::: x is a composer.\nis_conductor(x) ::: x is a conductor.\n\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n∀x (is_composer(x) → write(x, \"music_piece\")) ::: Composers write music pieces.\nwrite(\"beethoven\", \"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") ::: Vienna Music Society premiered Symphony No. 9.\nis_orchestra(\"vienna_music_society\") ::: Vienna Music Society is an orchestra.\nlead(\"beethoven\", \"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n∀x (is_orchestra(x) → ∃y lead(y, x) ∧ is_conductor(y)) ::: Orchestras are led by conductors.\n\nQuery:\n¬is_conductor(\"beethoven\") ::: Beethoven is not a conductor."
  },
  {
    "id": "FOLIO_dev_39",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is a mass product design.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nzaha_hadid ::: represents zaha hadid\nkelly_wearstler ::: represents kelly wearstler\nmax ::: represents max\nPredicates:\nis_timeless(x) ::: x is timeless.\nis_mass_product_design(x) ::: x is a mass product design.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\nPremises:\n∀x (design_by(\"zaha_hadid\", x) → is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n∀x (is_mass_product_design(x) → ¬is_timeless(x)) ::: No mass product design is timeless.\n∃x ((design_by(\"zaha_hadid\", x) ∨ design_by(\"kelly_wearstler\", x))) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (design_by(\"kelly_wearstler\", x) → is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (design_by(\"kelly_wearstler\", x) → is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∀x (design_by(\"max\", x) ∧ is_timeless(x) → (is_mass_product_design(x) ∧ is_evocative(x))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nQuery:\n∃x (design_by(\"max\", x) ∧ is_mass_product_design(x)) ::: A design by Max is a mass product design."
  },
  {
    "id": "FOLIO_dev_40",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is evocative and dreamy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nzaha_hadid ::: represents zaha hadid\nkelly_wearstler ::: represents kelly wearstler\nmax ::: represents max\n\nPredicates:\nis_designer(x) ::: x is a designer.\nhas_style(x, y) ::: x has style y.\nis_timeless(x) ::: x is timeless.\nis_mass_product(x) ::: x is mass product.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\n\nPremises:\n∀x (has_style(\"zaha_hadid\", x) → is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n¬∃x (is_mass_product(x) ∧ is_timeless(x)) ::: No mass product design is timeless.\n∀x ∀y ((has_style(\"zaha_hadid\", x) ∧ ¬has_style(\"kelly_wearstler\", y)) ∨ (¬has_style(\"zaha_hadid\", x) ∧ has_style(\"kelly_wearstler\", y))) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (has_style(\"kelly_wearstler\", x) → is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (has_style(\"kelly_wearstler\", x) → is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∃x ((is_timeless(x) ∧ has_style(\"max\", x)) → (is_mass_product(x) ∧ is_evocative(x))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n\nQuery:\n∃x (has_style(\"max\", x) ∧ is_evocative(x) ∧ is_dreamy(x)) ::: A design by Max is evocative and dreamy."
  },
  {
    "id": "FOLIO_dev_41",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is either evocative or dreamy.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given text, the task is to parse every sentence into first-order logic formulas. The rules for predicates naming and constants/variables naming have been provided.\n\nTo solve this problem, we need to analyze each sentence in the text and apply the given rules to translate them into first-order logic formulas.\n\n\nText:\nAll of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n\n###\n\n\nConstants:\nzaha_hadid ::: represents zaha hadid\nkelly_wearstler ::: represents kelly wearstler\nmax ::: represents max\n\nPredicates:\nis_timeless(x) ::: x is a timeless design style.\nis_mass_product_design(x) ::: x is a mass product design.\nis_evocative(x) ::: x is an evocative design style.\nis_dreamy(x) ::: x is a dreamy design style.\n\n\nPremises:\n∀x (design_by(\"zaha_hadid\", x) → is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n¬∃x (is_mass_product_design(x) ∧ is_timeless(x)) ::: No mass product design is timeless.\n∃x ((design_by(\"zaha_hadid\", x) ∨ design_by(\"kelly_wearstler\", x))) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n∀x (design_by(\"kelly_wearstler\", x) → is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n∀x (design_by(\"kelly_wearstler\", x) → is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n∀x ((design_by(\"max\", x) ∧ is_timeless(x)) → (is_mass_product_design(x) ∧ is_evocative(x))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n\n\nQuery:\n∃x (design_by(\"max\", x) ∧ (is_evocative(x) ∨ is_dreamy(x))) ::: A design by Max is either evocative or dreamy.\n\nThe final answer to this problem cannot be determined with certainty based on the information provided. The query \"A design by Max is either evocative or dreamy\" depends on whether a design by Max exists that meets these conditions, but there's no explicit statement confirming this in the text."
  },
  {
    "id": "FOLIO_dev_42",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is among the most active players in major tennis.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ncoco_gauff ::: represents coco gauff\niga_swiatek ::: represents iga swiatek\nrafael_nadal ::: represents rafael nadal\nroland_garros_20_22 ::: represents roland garros 20_22\n\nPredicates:\nis_highly_ranked(x) ::: x is ranked highly by the Women's Tennis Association.\nis_active_player(x) ::: x is among the most active players in major tennis.\nis_female_tennis_player_at_roland_garros_2022(x) ::: x is a female tennis player at Roland Garros 20_22.\nis_male_tennis_player_at_roland_garros_2022(x) ::: x is a male tennis player at Roland Garros 20_22.\nlost_to_iga_swiatek(x) ::: x lost to Iga Świątek.\nlost_to_rafael_nadal(x) ::: x lost to Rafael Nadal.\n\nPremises:\n∀x (is_highly_ranked(x) → is_active_player(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x (lost_to_iga_swiatek(x) → is_highly_ranked(x)) ::: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\n∀x (is_female_tennis_player_at_roland_garros_2022(x) → lost_to_iga_swiatek(x)) ::: All female tennis players at Roland Garros 20_22 lost to Iga Świątek.\n∀x ((is_female_tennis_player_at_roland_garros_2022(x) ∧ is_male_tennis_player_at_roland_garros_2022(x)) → (is_female_tennis_player_at_roland_garros_2022(x) ∨ is_male_tennis_player_at_roland_garros_2022(x))) ::: Either female tennis players at Roland Garros 20_22 or male tennis players at Roland Garros 20_22.\n∀x (is_male_tennis_player_at_roland_garros_2022(x) → lost_to_rafael_nadal(x)) ::: All male tennis players at Roland Garros 20_22 lost to Rafael Nadal.\n(is_highly_ranked(\"coco_gauff\") ∨ lost_to_rafael_nadal(\"coco_gauff\")) → ¬is_male_tennis_player_at_roland_garros_2022(\"coco_gauff\") ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 20_22.\n\nQuery:\nis_active_player(\"coco_gauff\") ::: Coco Gauff is among the most active players in major tennis."
  },
  {
    "id": "FOLIO_dev_43",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\niga_swiatek ::: represents iga swiatek\ncoco_gauff ::: represents coco gauff\nrafael_nadal ::: represents rafael nadal\nroland_garros_2022 ::: represents roland garros 20.22\nPredicates:\nis_female_player(x) ::: x is a female player.\nis_male_player(x) ::: x is a male player.\nlost_to(x, y) ::: x lost to y.\nis_highly_ranked_by_wta(x) ::: x is highly ranked by wta.\nis_active(x) ::: x is an active player.\nplay_at_roland_garros_20.22(x) ::: x plays at roland garros 20.22.\nPremises:\n∀x (is_highly_ranked_by_wta(x) → is_active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x ∀y (lost_to(x, \"iga_swiatek\") → is_highly_ranked_by_wta(x)) ::: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\n∀x ((is_female_player(x) ∧ play_at_roland_garros_20.22(x)) → (lost_to(x, \"iga_swiatek\"))) ::: All female tennis players at Roland Garros 20.22 lost to Iga Świątek.\n((is_male_player(x) ∧ play_at_roland_garros_20.22(x)) ∨ (¬is_male_player(x) ∧ play_at_roland_garros_20.22(x))) ::: Either female tennis players at Roland Garros 20.22 or male tennis players at Roland Garros 20.22.\n∀x ((play_at_roland_garros_20.22(x) ∧ is_male_player(x)) → (lost_to(x, \"rafael_nadal\"))) ::: All male tennis players at Roland Garros 20.22 lost to Rafael Nadal.\n¬(is_highly_ranked_by_wta(\"coco_gauff\") ∨ (lost_to(\"coco_gauff\", \"rafael_nadal\")) → is_male_player(\"coco_gauff\")) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 20.22.\nQuery:\nlost_to(\"coco_gauff\", \"rafael_nadal\") ::: Coco Gauff has lost to Rafael Nadal.\nAnswer: Uncertain"
  },
  {
    "id": "FOLIO_dev_44",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\niga_swiatek ::: represents iga swiatek\ncoco_gauff ::: represents coco gauff\nrafael_nadal ::: represents rafael nadal\nroland_garros_20_22 ::: represents roland garros in the year of 2022\n\nPredicates:\nis_ranked_highly(x, y) ::: x is ranked highly by y.\nis_active_player(x) ::: x is an active player.\nis_female_tennis_player_at_roland_garros_20_22(x) ::: x is a female tennis player at roland garros 2022.\nlost_to(x, y) ::: x lost to y.\nis_male_tennis_player_at_roland_garros_20_22(x) ::: x is a male tennis player at roland garros in the year of 2022.\n\nPremises:\n∀x ∀y (is_ranked_highly(x,y) → is_active_player(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n∀x ∀y (lost_to(x, \"iga_swiatek\") → is_ranked_highly(x, y)) ::: Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\n∀x (is_female_tennis_player_at_roland_garros_20_22(x) → lost_to(x,\"iga_swiatek\"))::: All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n(is_female_tennis_player_at_roland_garros_20_22(\"coco_gauff\") ∨ is_male_tennis_player_at_roland_garros_20_22(\"coco_gauff\")) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n∀x (is_male_tennis_player_at_roland_garros_20_22(x) → lost_to(x, \"rafael_nadal\")) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n((¬is_ranked_highly(\"coco_gauff\", y) ∧ lost_to(\"coco_gauff\",\"rafael_nadal\")) ∨ (is_ranked_highly(\"coca_gauff\",y) ∧ ¬lost_to(\"coco_gauff\",\"rafael_nadal\"))) →  ¬is_male_tennis_player_at_roland_garros_20_22(\"coco_gauff\") ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n\nQuery:\n(is_ranked_highly(\"coco_gauff\",y) ∧ ¬lost_to(\"coco_gauff\",\"iga_swiatek\"))::: Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis."
  },
  {
    "id": "FOLIO_dev_45",
    "context": "All cats are mammals. Some pets are not mammals.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No pets are cats.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the text, we can infer that all cats are mammals. However, it is also stated that some pets are not mammals. This implies that there may be pets that are not cats (since they are not mammals), but it does not necessarily mean that no pets are cats.\n\nTherefore, the statement \"No pets are cats\" is uncertain based on the given information."
  },
  {
    "id": "FOLIO_dev_46",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is summer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nspring ::: represents the spring season\nsummer ::: represents the summer season\nfall ::: represents the fall season\nwinter ::: represents the winter season\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\n\nPredicates:\nis_season(x) ::: x is a season.\nwant_long_vacation(x) ::: x wants to have a long vacation.\nlove_most(x, y) ::: x loves y the most.\nfavorite_season(x, y) ::: y is x's favorite season.\n\nPremises:\n∀x ((is_season(\"spring\") ∨ is_season(\"summer\") ∨ is_season(\"fall\") ∨ is_season(\"winter\")) ∧ (is_season(\"spring\") → ¬is_season(\"summer\") ∧ ¬is_season(\"fall\") ∧ ¬is_season(\"winter\")) ∧ (is_season(\"summer\") → ¬is_season(\"spring\") ∧ ¬is_season(\"fall\") ∧ ¬is_season(\"winter\")) ∧ (is_season(\"fall\") → ¬is_season(\"spring\") ∧ ¬is_season(\"summer\") ∧ ¬is_season(\"winter\")) ∧ (is_season(\"winter\") → ¬is_season(\"spring\") ∧ ¬is_season(\"summer\") ∧ ¬is_season(\"fall\"))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x ∀y (want_long_vacation(x) → love_most(x, \"summer\")) ::: All students who want to have a long vacation love summer the most.\nfavorite_season(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n¬favorite_season(\"mia\", \"summer\") ::: Mia's favorite season is not the same as Emma's.\nwant_long_vacation(\"james\") ::: James wants to have a long vacation.\n\nQuery:\nfavorite_season(\"james\", \"summer\") ::: James's favorite season is summer."
  },
  {
    "id": "FOLIO_dev_47",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is fall.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\n\nPredicates:\nis_student(x) ::: x is student.\nwants_long_vacation(x) ::: x wants a long vacation.\nfavorite_season_is_summer(x) ::: the favorite season of x is summer.\nloves_most(x, y) ::: x loves y the most.\nis_season(x) ::: x is a season.\n\nPremises:\n∀x (is_student(x) ∧ wants_long_vacation(x) → favorite_season_is_summer(x)) ::: All students who want to have a long vacation love summer the most.\nfavorite_season_is_summer(\"emma\") ::: Emma's favorite season is summer.\n¬favorite_season_is_summer(\"mia\") ::: Mia's favorite season is not the same as Emma's. \nwants_long_vacation(\"james\") ::: James wants to have a long vacation.\n\nQuery:\n∀x (is_student(\"james\") ∧ is_season(x) ∧ x = \"fall\" → loves_most(\"james\", x)) ::: James's favorite season is fall."
  },
  {
    "id": "FOLIO_dev_48",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mia's favorite season is spring.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\nspring ::: represents spring\nsummer ::: represents summer\nfall ::: represents fall\nwinter ::: represents winter\nPredicates:\nis_season(x) ::: x is a season.\nhas_long_vacation(x) ::: x has long vacation.\nlove_most(x, y) ::: x loves y the most.\nis_favorite(x, y) ::: x's favorite season is y.\nPremises:\n∀x ((¬is_season(\"spring\") ∧ ¬is_season(\"summer\")) ∨ (is_season(\"spring\") ∧ is_season(\"summer\"))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n∀x ∀y (has_long_vacation(x) → love_most(x, \"summer\")) ::: All students who want to have a long vacation love summer the most.\nis_favorite(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n¬is_favorite(\"mia\", \"summer\") ::: Mia's favorite season is not the same as Emma's.\nhas_long_vacation(\"james\") ::: James wants to have a long vacation.\nQuery:\nis_favorite(\"mia\", \"spring\") ::: Mia's favorite season is spring."
  },
  {
    "id": "FOLIO_dev_49",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is printed text.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\n1984 ::: represents the object of 1984\nPredicates:\nis_digital(x) ::: x is digital media.\nis_analog(x) ::: x is analog media.\nis_printed_text(x) ::: x is printed text.\nis_streaming_service(x) ::: x is streaming service.\nis_hardcover_book(x) ::: x is hardcover book.\nPremises:\n∀x (is_digital(x) → ¬is_analog(x)) ::: No digital media are analog.\n∀x (is_printed_text(x) → is_analog(x)) ::: Every printed text is analog.\n∀x (is_streaming_service(x) → is_digital(x)) ::: All streaming services are digital.\n∀x (is_hardcover_book(x) → is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\n(is_streaming_service(\"1984\") → is_hardcover_book(\"1984\")) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\nis_printed_text(\"1984\") ::: 1984 is printed text.\n\nThe final answer is: uncertain"
  },
  {
    "id": "FOLIO_dev_50",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is a streaming service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\n1984 ::: represents the year 1984\nPredicates:\nis_object(x) ::: x is an object.\nis_analog(x) ::: x is analog.\nis_digital(x) ::: x is digital.\nis_printed_text(x) ::: x is a printed text.\nis_hardcover_book(x) ::: x is a hardcover book.\nis_streaming_service(x) ::: x is a streaming service.\n\nPremises:\n∀x (¬(is_analog(x) ∧ is_digital(x))) ::: No digital media are analog.\n∀x (is_printed_text(x) → is_analog(x)) ::: Every printed text is analog.\n∀x (is_streaming_service(x) → is_digital(x)) ::: All streaming services are digital.\n∀x ((is_hardcover_book(x) ∧ ¬is_printed_text(x)) ∨ (¬is_hardcover_book(x) ∧ is_printed_text(x))) ::: If an object is a hardcover book then it is printed text.\n¬(is_streaming_service(\"1984\") → is_hardcover_book(\"1984\")) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\n\nQuery:\n∃x (is_streaming_service(x) ∧ x = \"1984\") ::: 1984 is a streaming service."
  },
  {
    "id": "FOLIO_dev_51",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is not a streaming service.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndigital_media ::: represents digital media\nanalog ::: represents analog\nprinted_text ::: represents printed text\nstreaming_services ::: represents streaming services\nhardcover_book ::: represents a hardcover book\nPredicates:\nis_analog(x) ::: x is analog.\nis_digital(x) ::: x is digital.\nis_printed_text(x) ::: x is printed text.\nis_streaming_service(x) ::: x is a streaming service.\nis_hardcover_book(x) ::: x is a hardcover book.\nPremises:\n∀x (is_digital(x) → ¬is_analog(x)) ::: No digital media are analog.\n∀x (is_printed_text(x) → is_analog(x)) ::: Every printed text is analog.\n∀x (is_streaming_service(x) → is_digital(x)) ::: All streaming services are digital.\n∀x (is_hardcover_book(x) → is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\n(is_streaming_service(\"1984\") → is_hardcover_book(\"1984\")) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\n¬is_streaming_service(\"1984\") ::: 1984 is not a streaming service."
  },
  {
    "id": "FOLIO_dev_52",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Basque is a Romance language.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbasque ::: represents the Basque language\nfrench ::: represents the French language\nspanish ::: represents the Spanish language\ngerman ::: represents the German language\nromance_languages ::: represents the Romance languages\nindo_european_languages ::: represents the Indo-European languages\n\nPredicates:\nis_language(x) ::: x is a language.\nis_romance_language(x) ::: x is a Romance language.\nis_indo_european_language(x) ::: x is an Indo-European language.\nis_related_to(x, y) ::: x is related to y.\n\nPremises:\n∀x (is_romance_language(x) → is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\n∃x (is_language_family(x) ∧ is_romance_language(x)) ::: The Romance languages are a language family.\n∀x ∀y ((is_language_family(x) ∧ is_language(y) ∧ is_member_of(y, x)) → is_related_to(y, x)) ::: All languages within a language family are related to each other.\n(is_romance_language(\"french\") ∧ is_romance_language(\"spanish\")) ::: French and Spanish are both Romance languages.\nis_related_to(\"german\", \"spanish\") ::: German is related to Spanish.\n¬∃x (is_language(x) ∧ is_related_to(\"basque\", x)) ::: Basque is not related to any other language.\n\nQuery:\nis_romance_language(\"basque\") ::: Basque is a Romance language."
  },
  {
    "id": "FOLIO_dev_53",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? German is a Romance language.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nfrench ::: represents french\nspanish ::: represents spanish\ngerman ::: represents german\nbasque ::: represents basque\n\nPredicates:\nis_romance_language(x) ::: x is a romance language.\nis_indo_european_language(x) ::: x is an indo european language.\nis_related_to(x, y) ::: x is related to y.\n\nPremises:\n∀x (is_romance_language(x) →  is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\n∀x ∀y ((is_language_family(x) ∧ in_language_family(y,x)) ∨ in_language_family(y,x))) ::: The Romance languages are a language family. \n∀x ∀y (in_language_family(x,y) → is_related_to(x,y))::: All languages within a language family are related to each other.\n∃x ∃y ((is_romance_language(\"french\") ∧ is_romance_language(\"spanish\")) ∧ (¬(is_romance_language(\"german\")) ∧ ¬(is_romance_language(\"basque\")))) ::: French and Spanish are both Romance languages. \nis_related_to(\"german\", \"spanish\")::: German is related to Spanish.\n∀x ¬is_related_to(x, \"basque\") ::: Basque is not related to any other language.\n\nQuery:\nis_romance_language(\"german\") ::: German is a Romance language."
  },
  {
    "id": "FOLIO_dev_54",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? French is an Indo-European language.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nfrench ::: represents french\nspanish ::: represents spanish\ngerman ::: represents german\nbasque ::: represents basque\n\nPredicates:\nis_language(x) ::: x is a language.\nis_romance_languages(x) ::: x are Romance languages.\nis_indo_european_languages(x) ::: x are Indo-European languages.\nare_related_to_each_other(x,y) ::: x and y are related to each other.\n\nPremises:\n∀x (is_romance_languages(x) →  is_indo_european_languages(x)) ::: All Romance languages are Indo-European languages.\n∃x ∀y (is_language(y) ∧ is_romance_languages(x) → are_related_to_each_other(x,y))::: The Romance languages are a language family. \n∀x ∀y (are_related_to_each_other(x,y) → is_language(x) ∧ is_language(y)) ::: All languages within a language family are related to each other.\n∃x (is_romance_languages(\"french\") ∧ is_romance_languages(\"spanish\")) ::: French and Spanish are both Romance languages.\n∀x ∀y ((are_related_to_each_other(\"german\", \"spanish\") →  is_language(\"german\") ∧ is_language(\"spanish\")))::: German is related to Spanish.\n¬∃x (is_language(x) ∧ are_related_to_each_other(\"basque\", x)) ::: Basque is not related to any other language.\n\nQuery:\n∀x (is_romance_languages(\"french\") →  is_indo_european_languages(\"french\")) ::: French is an Indo-European language."
  },
  {
    "id": "FOLIO_dev_55",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a soccer player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrobert_lewandowski ::: represents robert lewandowski\nbayern_munchen ::: represents bayern munchen\n\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left y.\nplay_for(x, y) ::: x plays for team y.\n\nPremises:\n∀x (is_striker(x) → is_soccer_player(x)) ::: Strikers are soccer players.\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y (left(x, y) → ¬play_for(x, y)) ::: If a player left a team they no longer play for that team.\n\nQuery:\nis_soccer_player(\"robert_lewandowski\") ::: Robert Lewandowski is a soccer player."
  },
  {
    "id": "FOLIO_dev_56",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrobert_lewandowski ::: represents robert lewandowski\nbayern_munchen ::: represents bayern munchen\n\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left team y.\nplays_for(x, y) ::: x plays for team y.\n\nPremises:\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\n∀x (is_striker(x) → is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y (left(x, y) → ¬plays_for(x, y)) ::: If a player left a team they no longer play for that team.\n\nQuery:\n¬plays_for(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski plays for Bayern Munchen."
  },
  {
    "id": "FOLIO_dev_57",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a star.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "I will follow the format you specified to solve this problem.\n\n\n## Step 1: Identify the Text and the Question\nThe text is about Robert Lewandowski's profession and his relationship with Bayern Munchen. The question asks whether Robert Lewandowski is a star.\n\n\n## Step 2: Define the Predicates and Constants\nPredicates:\n- is_striker(x) ::: x is a striker.\n- is_soccer_player(x) ::: x is a soccer player.\n- left(x, y) ::: x left y.\n- play_for(x, y) ::: x plays for y.\n\nConstants:\n- robert_lewandowski ::: represents Robert Lewandowski\n- bayern_munchen ::: represents Bayern Munchen\n\n\n## Step 3: Parse the Text into First-Order Logic Formulas\n∀x (is_striker(x) → is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\n∀x ∀y (left(x, y) → ¬play_for(x, y)) ::: If a player left a team they no longer play for that team.\n\n\n## Step 4: Parse the Query into First-Order Logic Formulas\nThere is no direct information about Robert Lewandowski being a star. However, since the question asks whether he is a star and there is no definition of what a star is in the text or any relation to it, we can't provide an answer based on the given information.\n\n\nThe final answer is: $\\boxed{uncertain}$"
  },
  {
    "id": "FOLIO_dev_58",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Butte and Pierre are in the same state.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbillings ::: represents billings\nmontana ::: represents montana\nbutte ::: represents butte\nhelena ::: represents helena\nmissoula ::: represents missoula\nwhite_sulphur_springs ::: represents the white sulphur springs\npierre ::: represents pierre\n\nPredicates:\nis_city(x) ::: x is a city.\nincludes(x, y) ::: x includes y.\nare_same_state(x,y) ::: x and y are in the same state.\nis_in(x, y) ::: x is in y.\n\nPremises:\nis_city(\"billings\") ∧ is_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\n∀x (includes(\"montana\", \"butte\") ∧ includes(\"montana\", \"helena\") ∧ includes(\"montana\", \"missoula\")) ::: Montana includes the cities of Butte, Helena, and Missoula.\nare_same_state(\"white_sulphur_springs\", \"butte\") ::: White Sulphur Springs and Butte are cities in the same state.\n¬is_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n∀x ∀y (is_city(x) ∧ is_in(x, \"butte\") → ¬is_in(x, \"pierre\")) ::: Any city in Butte is not in Pierre.\n\nQuery:\nare_same_state(\"butte\", \"pierre\") ::: Butte and Pierre are in the same state."
  },
  {
    "id": "FOLIO_dev_59",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Pierre and Bismarck are in the same state.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbillings ::: represents billings\nmontana ::: represents montana\nbutte ::: represents butte\nhelena ::: represents helena\nmissoula ::: represents missoula\nwhite_sulphur_springs ::: represents white sulphur springs\npierre ::: represents pierre\n\nPredicates:\nis_city(x) ::: x is a city.\nincludes(x, y) ::: x includes y.\nlocated_in(x, y) ::: x is located in y.\n\nPremises:\nis_city(\"billings\") ∧ located_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\n∀x ∀y (is_city(x) ∧ includes(y, x)) ::: Montana includes the cities of Butte, Helena, and Missoula.\nlocated_in(\"butte\", \"montana\") ∧ located_in(\"white_sulphur_springs\", \"montana\") ::: White Sulphur Springs and Butte are cities in the same state.\n¬located_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n∀x ∀y (is_city(x) ∧ located_in(x, \"butte\") → ¬located_in(y, \"pierre\")) ::: Any city in Butte is not in Pierre.\n\nQuery:\n∃x ∃y (located_in(\"pierre\", x) ∧ located_in(\"bismarck\", y)) :::  Pierre and Bismarck are in the same state."
  },
  {
    "id": "FOLIO_dev_60",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Montana is home to the city of Missoula.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmontana ::: represents montana\nbillings ::: represents billings\nbutte ::: represents butte\nhelena ::: represents helena\nmissoula ::: represents missoula\nwhite_sulphur_springs ::: represents white sulphur springs\npierre ::: represents pierre\n\nPredicates:\nis_city(x) ::: x is a city.\nincludes_state(x, y) ::: state x includes the cities of y.\nis_in(x, y) ::: city x is in state y.\nis_same_state(x, y) ::: cities x and y are in the same state.\n\nPremises:\nis_in(\"billings\", \"montana\") ∧ is_city(\"billings\") ::: Billings is a city in Montana.\nincludes_state(\"montana\", \"butte\") ∧ includes_state(\"montana\", \"helena\") ∧ includes_state(\"montana\", \"missoula\") ::: Montana includes the cities of Butte, Helena, and Missoula.\nis_same_state(\"white_sulphur_springs\", \"butte\") ::: White Sulphur Springs and Butte are cities in the same state.\n¬is_in(\"pierre\", \"montana\") ∧ is_city(\"pierre\") ::: The city of Pierre is not in Montana.\n∀x (is_in(x, \"butte\") → ¬is_in(x, \"pierre\")) ::: Any city in Butte is not in Pierre.\n\nQuery:\nincludes_state(\"montana\", \"missoula\") ::: Montana is home to the city of Missoula."
  },
  {
    "id": "FOLIO_dev_61",
    "context": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mike has an F1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmike ::: represents mike\nus ::: represents us\n\nPredicates:\nis_international_student(x) ::: x is an international student.\nhas_f1_visa(x) ::: x has an F1 visa.\nhas_j1_visa(x) ::: x has a J1 visa.\nneeds_to_apply_for_cpt(x) ::: x needs to apply for CPT.\nwants_to_work_in_us(x) ::: x wants to work in the US.\n\nPremises:\n∀x ((is_international_student(x) ∧ is_in(\"us\")) → (has_f1_visa(x) ∨ has_j1_visa(x))) ::: International students in US have either an F1 visa or a J1 visa.\n∀x ((is_international_student(x) ∧ is_in(\"us\") ∧ has_f1_visa(x) ∧ wants_to_work_in_us(x)) → needs_to_apply_for_cpt(x)) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nis_international_student(\"mike\") ::: Mike is an international student.\nneeds_to_apply_for_cpt(\"mike\") ∧ wants_to_work_in_us(\"mike\") ::: Mike needs to apply for CPT if he wants to work in the US.\n\nQuery:\nhas_f1_visa(\"mike\") ::: Mike has an F1 visa."
  },
  {
    "id": "FOLIO_dev_62",
    "context": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mike has a J1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmike ::: represents mike\nus ::: represents us\nf1_visa ::: represents f1 visa\nj1_visa ::: represents j1 visa\ncpt ::: represents cpt\nopt ::: represents opt\n\nPredicates:\nis_international_student(x) ::: x is an international student.\nhas_f1_visa(x) ::: x has a F1 visa.\nhas_j1_visa(x) ::: x has a J1 visa.\nneeds_to_apply_for_cpt(x) ::: x needs to apply for CPT.\nneeds_to_apply_for_opt(x) ::: x needs to apply for OPT.\n\nPremises:\n∀x (is_international_student_in_us(x) → has_f1_visa(x) ∨ has_j1_visa(x)) ::: International students in US have either an F1 visa or a J1 visa.\n∀x ((has_f1_visa(x) ∧ is_international_student_in_us(x)) → needs_to_apply_for_cpt(x) ∨ needs_to_apply_for_opt(x)) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nis_international_student(\"mike\") ::: Mike is an international student.\nneeds_to_apply_for_cpt(\"mike\") ::: Mike needs to apply for CPT if he wants to work in the US.\n\nQuery:\nhas_j1_visa(\"mike\") ::: Mike has a J1 visa."
  },
  {
    "id": "FOLIO_dev_63",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ted is a pet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\n\nPremises:\n∀x (is_cow(x) →  is_bovine(x)) ::: All cows are bovines.\n∃x (is_pet(x) ∧ is_cow(x)) ::: Some pets are cows.\n∀x (is_bovine(x) → is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (is_domesticated(x) → ¬is_alligator(x)) ::: No domesticated animals are alligators.\n¬is_domesticated(\"ted\") ∧ is_alligator(\"ted\") ::: Ted is an aligator.\n\nQuery:\nis_pet(\"ted\") :::  Ted is a pet."
  },
  {
    "id": "FOLIO_dev_64",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ted is a pet and a cow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\nPremises:\n∀x (is_cow(x) →  is_bovine(x)) ::: All cows are bovines.\n∃x (is_pet(x) ∧ is_cow(x)) ::: Some pets are cows.\n∀x (is_bovine(x) → is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∀x (is_domesticated(x) → ¬is_alligator(x)) ::: No domesticated animals are alligators.\nis_alligator(\"ted\") ::: Ted is an aligator.\nQuery:\n(is_pet(\"ted\") ∧ is_cow(\"ted\")) :::  Ted is a pet and a cow.\n\nThe final answer is FALSE."
  },
  {
    "id": "FOLIO_dev_65",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Ted is a cow, then Ted is not a pet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is bovine.\nis_pet(x) ::: x is pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\n\nPremises:\n∀x (is_cow(x) → is_bovine(x)) ::: All cows are bovines.\n∃x (is_pet(x) ∧ is_cow(x)) ::: Some pets are cows.\n∀x (is_bovine(x) → is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n∄x (is_domesticated(x) ∧ is_alligator(x)) ::: No domesticated animals are alligators.\nis_alligator(\"ted\") ::: Ted is an aligator.\n\nQuery:\n(is_cow(\"ted\") → ¬is_pet(\"ted\")) ::: If Ted is a cow, then Ted is not a pet."
  },
  {
    "id": "FOLIO_dev_66",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyale_university ::: represents yale university\nnew_haven ::: represents new haven\nyear_17_16 ::: represents the year 17_16\nbillion_42.3 ::: represents $42.3 billion\ntwenty_seven ::: represents twenty seven\nPredicates:\nis_private(x) ::: x is private.\nis_ivy_league(x) ::: x is ivy league.\nis_research_university(x) ::: x is a research university.\nmoved_to(x, y) ::: x moved to y.\nis_valued_at(x, y) ::: x is valued at y.\norganized_into(x, y) ::: x has been organized into y.\nis_residential_college(x) ::: x is residential college.\nis_yale_graduate_school_of_arts_and_sciences(x) ::: x is the Yale Graduate School of Arts and Sciences.\nis_professional_school(x) ::: x is a professional school.\nis_constituent_colleges_and_schools(x, y) ::: x are constituent colleges and schools at y\nPremises:\nis_private(\"yale_university\") ∧ is_ivy_league(\"yale_university\") ∧ is_research_university(\"yale_university\") ::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") ∧ publishes(\"yale_university\", \"year_17_16\") ::: Yale University moved to New Haven in 17_16.\nis_valued_at(\"yale_university\", \"billion_42.3\") ::: Yale university's endowment was valued at $42.3 billion.\norganized_into(\"yale_university\", \"twenty_seven\") ::: Yale University has been organized into twenty seven colleges and schools.\nis_residential_college(\"Benjamin Franklin College\") ::: A list of residential colleges at Yale: Benjamin Franklin College\nis_residential_college(\"Berkeley College\") :::  Berkeley College \nis_residential_college(\"Branford College\") ::: Branford College, \nis_residential_college(\"Davenport College\") ::: Davenport College, \nis_residential_college(\"Ezra Stiles College\") ::: Ezra Stiles College,\nis_residential_college(\"Grace Hopper College\") ::: Grace Hopper College\nis_residential_college(\"Jonathan Edwards College\") ::: Jonathan Edwards College, \nis_residential_college(\"Morse College\") ::: Morse College,  \nis_residential_college(\"Pauli Murray College\") ::: Pauli Murray College,\nis_residential_college(\"Pierson College\") ::: Pierson College, \nis_residential_college(\"Saybrook College\") ::: Saybrook College, \nis_residential_college(\"Silliman College\") ::: Silliman College,\nis_residential_college(\"Timothy Dwight College\") ::: Timothy Dwight College, \nis_residential_college(\"Trumbull College\") ::: and Trumbull College.\nQuery:\n∃x (is_private(x) ∧ is_ivy_league(x) ∧ is_research_university(x) ∧ moved_to(x, \"new_haven\")) ::: A private Ivy League research university moved to New Haven."
  },
  {
    "id": "FOLIO_dev_67",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "The problem doesn't provide enough information to determine whether Yale University has the largest university endowment of any educational institution. It only provides information about Yale University's endowment value ($42.3 billion) but does not compare it with other universities' endowments.\n\nTo answer this question accurately, we would need additional information about the endowments of other universities. Therefore, based on the provided text, the statement \"Yale University has the largest university endowment of any educational institution\" is uncertain."
  },
  {
    "id": "FOLIO_dev_68",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Pierson College is a residential college at Yale.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyale_university ::: represents yale university\nnew_haven ::: represents new haven\nyear_17_16 ::: represents the year 17_16\n Predicates:\nis_private(x) ::: x is private.\nis_ivy_league_research_university(x) ::: x is ivy league research university.\nmoved_to(x, y) ::: x moved to y.\nhas_endowment(x, y) ::: x has endowment y.\norganized_into(x,y,z) ::: x organized into y colleges and z schools.\nis_residential_college(x) ::: x is a residential college at yale.\nPremises:\nis_private(\"yale_university\") ∧ is_ivy_league_research_university(\"yale_university\")::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") ∧ publishes(\"year_17_16\") ::: Yale University moved to New Haven in 17_16.\nhas_endowment(\"yale_university\", $42.3 billion) ::: Yale university's endowment was valued at $42.3 billion.\norganized_into(\"yale_university\",27,z) ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nis_residential_college(\"benjamin_franklin_college\") ::: A list of residential colleges at Yale: Benjamin Franklin College\nis_residential_college(\"berkeley_college\")::: A list of residential colleges at Yale: Berkeley College\nis_residential_college(\"branford_college\")::: A list of residential colleges at Yale: Branford College\nis_residential_college(\"davenport_college\") :::A list of residential colleges at Yale: Davenport College\nis_residential_college(\"ezra_stiles_college\")::: A list of residential colleges at Yale: Ezra Stiles College\nis_residential_college(\"grace_hopper_college\") :::A list of residential colleges at Yale: Grace Hopper College\nis_residential_college(\"jonathan_edwards_college\")::: A list of residential colleges at Yale: Jonathan Edwards College\nis_residential_college(\"morse_college\") :::A list of residential colleges at Yale: Morse College\nis_residential_college(\"pauli_murray_college\")::: A list of residential colleges at Yale: Pauli Murray College\nis_residential_college(\"pierson_college\") :::A list of residential colleges at Yale: Pierson College\nis_residential_college(\"saybrook_college\") :::A list of residential colleges at Yale: Saybrook College\nis_residential_college(\"silliman_college\")::: A list of residential colleges at Yale: Silliman College\nis_residential_college(\"timothy_dwight_college\")::: A list of residential colleges at Yale: Timothy Dwight College \nis_residential_college(\"trumbull_college\") :::A list of residential colleges at Yale: Trumbull College.\nQuery:\nis_residential_college(\"pierson_college\") ::: Pierson College is a residential college at Yale."
  },
  {
    "id": "FOLIO_dev_69",
    "context": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\npappy's ::: represents pappy's\nbadults ::: represents badults\njuly_2013 ::: represents july 2013\nbbc_three ::: represents bbc three\nthe_secret_dude_society ::: represents the secret dude society\nandrew_collins ::: represents andrew collins\nPredicates:\nis_british(x) ::: x is a British sitcom series.\nstars(x, y) ::: x stars members of y.\npiloted(x, y) ::: x piloted in y.\nhas_working_title(x,y) ::: x has the working title \"y\".\nwas_script_editor_for(x, y) ::: x was the script editor for y.\nPremises:\nis_british(\"badults\") ∧ stars(\"badults\", \"pappy's\") ::: Badults is a British Sitcom series, starring members of Pappy's.\npiloted(\"badults\", \"july_2013\") ∧ on(\"badults\", \"bbc_three\") ::: Badults piloted in July 2013 on BBC Three.\nhas_working_title(\"badults\", \"the_secret_dude_society\") ::: The Working title \"The Secret Dude Society\" was used for Badults\nwas_script_editor_for(\"andrew_collins\", \"badults\") ::: Andrew Collins was the script editor for Badults\nQuery:\nwas_script_editor_for(\"andrew_collins\", x) ∧ has_working_title(x, \"the_secret_dude_society\") ::: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."
  },
  {
    "id": "FOLIO_dev_70",
    "context": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "To answer this question accurately, let's break down the given information into a logical structure and then analyze it step by step.\n\n\nConstants:\n- badults ::: represents the show \"Badults\"\n- pappy's ::: represents the group \"Pappy's\"\n- bbc_three ::: represents the channel \"BBC Three\"\n- andrew_collins ::: represents the person \"Andrew Collins\"\n- july_2013 ::: represents the time \"July 2013\"\n\n\nPredicates:\n- is_british_sitcom(x) ::: x is a British Sitcom series\n- stars(x, y) ::: x stars members of y\n- piloted(x, y) ::: x piloted on y\n- has_working_title(x, y) ::: x has working title y\n- was_script_editor(x, y) ::: x was the script editor for y\n\n\nPremises:\n1. is_british_sitcom(\"badults\") ∧ stars(\"badults\", \"pappy's\") ::: Badults is a British Sitcom series, starring members of Pappy's.\n2. piloted(\"badults\", \"bbc_three\") ∧ piloted_in(\"july_2013\") ::: Badults piloted in July 2013 on BBC Three.\n3. has_working_title(\"badults\", \"The Secret Dude Society\") ::: The Working title \"The Secret Dude Society\" was used for Badults\n4. was_script_editor(\"andrew_collins\", \"badults\") ::: Andrew Collins was the script editor for Badults\n\n\nQuery:\n¬∃x (stars(x, \"pappy's\") ∧ (piloted(x, \"BBC Two\") ∨ piloted(x, \"bbc_three\"))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n\n\nAnalysis:\nFrom the premises given, we know that Badults stars members of Pappy's and it piloted on BBC Three. This directly satisfies part of the query condition (stars(x, \"pappy's\") ∧ piloted(x, \"bbc_three\")). However, to fully answer the query, we need to consider if there are any other shows starring members of Pappy's that pilot on either BBC Two or BBC Three.\n\n\nGiven Information:\nThere is no additional information about other shows starring members of Pappy's piloting on BBC Two. The only show mentioned is Badults which pilots on BBC Three, not BBC Two.\n\n\nConclusion:\nBased on the provided premises and analysis, we can conclude that there are indeed members of Pappy's who have starred for a show (Badults) piloting on BBC Three, but there is no information about any shows starring members of Pappy's piloting on BBC Two. The query statement seems to be aiming towards proving a universal negation (\"No members...\"), which cannot be definitively proven true or false with the given premises since we do not have exhaustive knowledge of all possible shows and their pilots.\n\n\nTherefore, considering the logic structure provided and focusing strictly on the information available, we can say that the query statement is uncertain. It leans towards being false because there's at least one instance (Badults) contradicting part of it (piloting on BBC Three), but without exhaustive knowledge of all shows and their pilots, we cannot assert this with absolute certainty.\n\n\nHence, based on the given premises and analysis:\n- The answer is uncertain."
  },
  {
    "id": "FOLIO_dev_71",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KO is a company stock.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nko ::: represents ko\nPredicates:\nis_stock(x) ::: x is stock.\nis_growth_company(x) ::: x is growth company.\nis_volatile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for retirement fund.\nis_mature_company(x) ::: x is mature company.\n\nPremises:\n∀x (is_growth_company(x) → is_volatile(x)) ::: All growth companies’ stocks are volatile.\n∀x ∀y (is_stock(y) ∧ is_volatile(y) → ¬is_suitable_for_retirement_fund(y)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x (is_stock(x) ∧ is_growth_company(x)) ::: Some companies’ stocks are growth companies’ stocks.\n∀x ∀y (is_stock(y) ∧ is_mature_company(y) → is_suitable_for_retirement_fund(y)) ::: All mature companies’ stocks are suitable for a retirement fund.\nis_stock(\"ko\") ∧ is_mature_company(\"ko\") ::: KO is a mature company’s stock.\n\nQuery:\n∃x (is_stock(x) ∧ x = \"ko\") ::: KO is a company stock."
  },
  {
    "id": "FOLIO_dev_72",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KO is a company stock and a growth company’s stock.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nko ::: represents ko\nPredicates:\nis_growth_company_stock(x) ::: x is growth company's stock.\nis_mature_company_stock(x) ::: x is mature company's stock.\nis_volitile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for retirement fund.\nPremises:\n∀x (is_growth_company_stock(x) → is_volitile(x)) ::: All growth companies’ stocks are volatile.\n∀x (is_volitile(x) → ¬is_suitable_for_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n∃x (is_growth_company_stock(x)) ::: Some companies’ stocks are growth companies’ stocks.\n∀x (is_mature_company_stock(x) → is_suitable_for_retirement_fund(x)) ::: All mature companies’ stocks are suitable for a retirement fund.\nis_mature_company_stock(\"ko\") ::: KO is a mature company’s stock.\nQuery:\n(is_growth_company_stock(\"ko\") ∧ is_mature_company_stock(\"ko\")) ::: KO is a company stock and a growth company’s stock.\n\nThe answer is FALSE."
  },
  {
    "id": "FOLIO_dev_73",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text and question, we will parse every sentence into first-order logic formulas and list all used predicates and constants.\n\nConstants:\n\n* ko ::: represents KO\n\nPredicates:\n* growth_company_stock(x) ::: x is a growth company's stock\n* volatile_price(x) ::: x has a volatile price\n* suitable_retirement_fund(x) ::: x is suitable for a retirement fund\n* mature_company_stock(x) ::: x is a mature company's stock\n\nPremises:\n\n1. ∀x (growth_company_stock(x) → volatile_price(x)) ::: All growth companies' stocks are volatile.\n2. ∀x (volatile_price(x) → ¬suitable_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n3. ∃x (company_stock(x) ∧ growth_company_stock(x)) ::: Some companies' stocks are growth companies' stocks.\n4. ∀x (mature_company_stock(x) → suitable_retirement_fund(x)) ::: All mature companies' stocks are suitable for a retirement fund.\n5. mature_company_stock(\"ko\") ::: KO is a mature company's stock.\n\nQuery:\n¬(growth_company_stock(\"ko\") ∨ volatile_price(\"ko\")) → ¬company_stock(\"ko\") ∧ ¬volatile_price(\"ko\") ::: If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile."
  },
  {
    "id": "FOLIO_dev_74",
    "context": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Joe's license plate begins with the number 34.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njoe ::: represents joe\ntom ::: represents tom\nistanbul ::: represents istanbul\nPredicates:\nis_from(x, y) ::: x is from y.\nbegin_with(x,y) ::: x begins with y.\nPremises:\n∀x (is_from(x, \"istanbul\") → begin_with(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n∀x (¬begin_with(x, 34) → ¬is_from(x, \"istanbul\")) ::: Plates that do not begin with the number 34 are not from Istanbul.\nis_from(\"joe's_plate\", \"istanbul\") ::: Joe's vehicle registration plate is from Istanbul.\nbegin_with(\"tom's_license_plate\", 35) ::: Tom's license plate begins with the number 35.\n∀x (begin_with(x, 35) → ¬begin_with(x, 34)) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\nQuery:\nbegin_with(\"joe's_plate\", 34) ::: Joe's license plate begins with the number 34."
  },
  {
    "id": "FOLIO_dev_75",
    "context": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom's license plate is from Istanbul.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nistanbul ::: represents istanbul\njoe ::: represents joe\ntom ::: represents tom\nPredicates:\nbegin_with(x,y) ::: x begins with y.\nis_from(x, y) ::: x is from y.\nPremises:\n∀x (is_from(x, \"istanbul\") → begin_with(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n∀x ((¬begin_with(x, 34) ∧ ¬is_from(x,\"istanbul\")) ∨ (begin_with(x, 34) ∧ is_from(x,\"istanbul\"))) ::: Plates that do not begin with the number 34 are not from Istanbul.\nis_from(\"joe's vehicle registration plate\", \"istanbul\")::: Joe's vehicle registration plate is from Istanbul.\nbegin_with(\"tom's license plate\",35) ::: Tom's license plate begins with the number 35.\n∀x (begin_with(x, 35) → ¬begin_with(x,34)) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\nQuery:\nis_from(\"tom's license plate\", \"istanbul\") ::: Tom's license plate is from Istanbul."
  },
  {
    "id": "FOLIO_dev_76",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmary ::: represents mary\nPredicates:\nwork_on_campus(x) ::: x works on campus.\nneed_money_to_pay_tuition(x) ::: x needs money to pay tuition.\norder_takeout_frequently(x) ::: x orders takeout frequently.\nenjoy_dining_hall_meals_and_recipes(x) ::: x enjoys dining hall meals and recipes.\nis_picky_eater(x) ::: x is a picky eater.\nspend_time_eating_and_catching_up_with_friends_in_dining_halls(x) ::: x spends time eating and catching up with friends in dining halls.\n\nPremises:\n∀x (work_on_campus(x) → need_money_to_pay_tuition(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (order_takeout_frequently(x) → work_on_campus(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x ((¬order_takeout_frequently(x) ∧ enjoy_dining_hall_meals_and_recipes(x)) ∨ (order_takeout_frequently(x) ∧ ¬enjoy_dining_hall_meals_and_recipes(x))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (enjoy_dining_hall_meals_and_recipes(x) → ¬is_picky_eater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (enjoy_dining_hall_meals_and_recipes(x) → spend_time_eating_and_catching_up_with_friends_in_dining_halls(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n¬(work_on_campus(\"mary\") ∧ need_money_to_pay_tuition(\"mary\")) → (is_picky_eater(\"mary\") ∨ need_money_to_pay_tuition(\"mary\")) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n\nQuery:\nneed_money_to_pay_tuition(\"mary\") ::: Mary needs to earn money to help pay for her college tuition."
  },
  {
    "id": "FOLIO_dev_77",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmary ::: represents mary\n\nPredicates:\nworks_on_campus(x) ::: x works in student jobs on campus.\nneeds_to_earn_money(x) ::: x needs to earn money to help pay for college tuition.\norders_takeout_frequently(x) ::: x orders takeout frequently in college.\nenjoys_dining_hall_meals_and_recipes(x) ::: x enjoys the dining hall meals and recipes.\nis_picky_eater(x) ::: x is a picky eater.\nspends_time_eating_with_friends_in_campus_dining_halls(x) ::: x spends a lot of their time eating and catching up with friends in the campus dining halls.\n\nPremises:\n∀x (works_on_campus(x) → needs_to_earn_money(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n∀x (orders_takeout_frequently(x) → works_on_campus(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n∀x ((orders_takeout_frequently(x) ∧ ¬enjoys_dining_hall_meals_and_recipes(x)) ∨ (¬orders_takeout_frequently(x) ∧ enjoys_dining_hall_meals_and_recipes(x))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n∀x (enjoys_dining_hall_meals_and_recipes(x) → ¬is_picky_eater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n∀x (enjoys_dining_hall_meals_and_recipes(x) → spends_time_eating_with_friends_in_campus_dining_halls(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n¬(works_on_campus(\"mary\") ∧ needs_to_earn_money(\"mary\")) → ((is_picky_eater(\"mary\") ∧ needs_to_earn_money(\"mary\")) ∨ (is_picky_eater(\"mary\") ∨ needs_to_earn_money(\"mary\"))) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n\nQuery:\n¬is_picky_eater(\"mary\") ∧ spends_time_eating_with_friends_in_campus_dining_halls(\"mary\") ::: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."
  },
  {
    "id": "FOLIO_dev_78",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "To answer this question accurately, we need to break down the given statements and apply logical deductions step by step.\n\nLet's define some predicates to make it easier:\n\n- \\(W(x)\\): x works in student jobs on campus.\n- \\(E(x)\\): x needs to earn money to help pay for their college tuition.\n- \\(O(x)\\): x orders takeout frequently in college.\n- \\(D(x)\\): x enjoys the dining hall meals and recipes.\n- \\(P(x)\\): x is a picky eater.\n- \\(S(x)\\): x spends a lot of time eating and catching up with friends in the campus dining halls.\n\nGiven statements:\n\n1. \\(\\forall x (W(x) \\rightarrow E(x))\\)\n2. \\(\\forall x (O(x) \\rightarrow W(x))\\)\n3. \\(\\forall x ((O(x) \\lor D(x)) \\land \\neg(O(x) \\land D(x)))\\)\n4. \\(\\forall x (D(x) \\rightarrow \\neg P(x))\\)\n5. \\(\\forall x (D(x) \\rightarrow S(x))\\)\n6. \\(W(Mary) \\land E(Mary) \\rightarrow \\neg(W(Mary) \\land E(Mary))\\)\n\nWe need to determine the truth value of: \n\\[Mary \\text{ is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.}\\]\n\nThis statement translates to:\n\\[\\neg P(Mary) \\lor (P(Mary) \\rightarrow S(Mary))\\]\n\nGiven Mary works in student jobs on campus and needs to earn money (\\(W(Mary) \\land E(Mary)\\)), from statement 1, we know that \\(E(Mary)\\) is true because of \\(W(Mary)\\). However, statement 6 seems contradictory at first glance. It implies a condition under which being in a certain state (working and needing to earn money) leads to the negation of that same state, which doesn't directly contribute to our goal but indicates an error in interpreting Mary's situation due to the phrasing of statement 6.\n\nFocusing on our main query: Since we don't have direct information about Mary enjoying dining hall meals or being a picky eater from the premises provided, and given the logical structure of the statements, we can deduce as follows:\n\n- If Mary enjoys dining hall meals (\\(D(Mary)\\)), then she is not a picky eater (\\(\\neg P(Mary)\\)) (from statement 4).\n- Also, if \\(D(Mary)\\), then she spends a lot of time eating and catching up with friends (\\(S(Mary)\\)) (from statement 5).\n\nHowever, we lack direct evidence to assert \\(D(Mary)\\) or its negation. Thus, based on the given premises, we cannot definitively conclude that Mary either is not a picky eater or spends a lot of her time eating and catching up with friends in the campus dining halls.\n\nThe statement's truth value remains **uncertain** given the provided information."
  },
  {
    "id": "FOLIO_dev_79",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are a product of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndried_thai_chilies ::: represents dried thai chilies\nbaked_by_melissa ::: represents baked by melissa\n\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\n\nPremises:\n∀x (is_bakery(x) → ¬is_spicy(x)) ::: No bakery is spicy.\n∀x (is_cupcake(x) → is_bakery(x)) ::: All cupcakes are bakeries.\n∀x (is_hotpot(x) → is_spicy(x)) ::: All hotpots are spicy.\n∀x (product_of(\"baked_by_melissa\", x) → is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((is_spicy(\"dried_thai_chilies\") ∨ is_bakery(\"dried_thai_chilies\")) → (is_hotpot(\"dried_thai_chilies\") ∨ is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n\nQuery:\nproduct_of(\"baked_by_melissa\", \"dried_thai_chilies\") ::: Dried Thai chilies are a product of Baked by Melissa."
  },
  {
    "id": "FOLIO_dev_80",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are not a product of Baked by Melissa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbaked_by_melissa ::: represents baked by melissa\ndried_thai_chilies ::: represents dried thai chilies\n\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product_of(x, y) ::: x is the product of y.\n\nPremises:\n∀x (is_bakery(x) → ¬is_spicy(x)) ::: No bakery is spicy.\n∀x (is_cupcake(x) → is_bakery(x)) ::: All cupcakes are bakeries.\n∀x (is_hotpot(x) → is_spicy(x)) ::: All hotpots are spicy.\n∀x (is_product_of(x, \"baked_by_melissa\") → is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((¬is_spicy(\"dried_thai_chilies\") ∧ ¬is_bakery(\"dried_thai_chilies\")) ∨ (is_hotpot(\"dried_thai_chilies\") ∧ is_spicy(\"dried_thai_chilies\"))) → ((is_hotpot(\"dried_thai_chilies\") ∧ is_spicy(\"dried_thai_chilies\")) ∧ (is_hotpot(\"dried_thai_chilies\") ∨ is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n\nQuery:\n¬is_product_of(\"dried_thai_chilies\", \"baked_by_melissa\") ::: Dried Thai chilies are not a product of Baked by Melissa."
  },
  {
    "id": "FOLIO_dev_81",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are a hotpot.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_bakery(x) ::: x is bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is cupcake.\nis_hotpot(x) ::: x is hotpot.\nproduces(x, y) ::: x produces y.\n Premises:\n¬∃x (is_bakery(x) ∧ is_spicy(x)) ::: No bakery is spicy.\n ∀x (is_cupcake(x) → is_bakery(x)) ::: All cupcakes are bakeries.\n ∀x (is_hotpot(x) → is_spicy(x)) ::: All hotpots are spicy.\n ∀x (produces(\"baked_by_melissa\", x) → is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n (∃x (¬is_spicy(\"dried_thai_chilies\") ∧ is_bakery(\"dried_thai_chilies\")) ∨ ∃x (is_spicy(\"dried_thai_chilies\") ∧ ¬is_bakery(\"dried_thai_chilies\"))) → (∃x (is_hotpot(\"dried_thai_chilies\") ∧ is_spicy(\"dried_thai_chilies\")) ∨ ∃x (is_hotpot(\"dried_thai_chilies\") ∧ ¬is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\n∃x (is_hotpot(\"dried_thai_chilies\")) ::: Dried Thai chilies are a hotpot."
  },
  {
    "id": "FOLIO_dev_82",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndried_thai_chilies ::: represents dried thai chilies\nbaked_by_melissa ::: represents baked by melissa\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcakes(x) ::: x is cupcakes.\nis_hotpot(x) ::: x is hotpots.\nis_product_of(x, y) ::: x is a product of y.\n\nPremises:\n∀x (¬is_bakery(x) ∨ ¬is_spicy(x)) ::: No bakery is spicy.\n∀x (is_cupcakes(x) → is_bakery(x)) ::: All cupcakes are bakeries.\n∀x (is_hotpot(x) → is_spicy(x)) ::: All hotpots are spicy.\n∀x (is_product_of(x, \"baked_by_melissa\") → is_cupcakes(x)) ::: All products of Baked by Melissa are cupcakes.\n(¬is_spicy(\"dried_thai_chilies\") ∧ is_bakery(\"dried_thai_chilies\")) ∨ ((is_hotpot(\"dried_thai_chilies\") ∧ ¬is_spicy(\"dried_thai_chilies\")) ∨ (is_hotpot(\"dried_thai_chilies\") ∧ is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n\nQuery:\n¬(is_product_of(\"dried_thai_chilies\", \"baked_by_melissa\") ∨ is_bakery(\"dried_thai_chilies\")) ::: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery."
  },
  {
    "id": "FOLIO_dev_83",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbaked_by_melissa ::: represents Baked by Melissa\ndried_thai_chilies ::: represents dried Thai chilies\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_cupcakes(x) ::: x is cupcakes.\nis_hotpot(x) ::: x is hotpots.\nis_product_of_baked_by_melissa(x) ::: x is a product of Baked by Melissa.\nis_spicy(x) ::: x is spicy.\n\nPremises:\n∀x (is_bakery(x) → ¬is_spicy(x)) ::: No bakery is spicy.\n∀x (is_cupcakes(x) → is_bakery(x)) ::: All cupcakes are bakeries.\n∀x (is_hotpot(x) → is_spicy(x)) ::: All hotpots are spicy.\n∀x (is_product_of_baked_by_melissa(x) → is_cupcakes(x)) ::: All products of Baked by Melissa are cupcakes.\n((is_spicy(\"dried_thai_chilies\") ∨ is_bakery(\"dried_thai_chilies\")) → (is_hotpot(\"dried_thai_chilies\") ∨ is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n\nQuery:\n(is_cupcakes(\"dried_thai_chilies\") ∧ is_product_of_baked_by_melissa(\"dried_thai_chilies\")) ::: Dried Thai chilies are cupcakes and a product of Baked by Melissa."
  },
  {
    "id": "FOLIO_dev_84",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "The text and the question are not provided, so I will assume that you want me to explain how to parse the given examples.\n\n## Step 1: Define the Predicates and Constants\nFirst, we need to define the predicates and constants based on the given text. In this case, the predicates and constants have already been defined in the problem statement.\n\n\n## Step 2: Parse Each Sentence into First-Order Logic Formulas\nNext, we need to parse each sentence in the text into first-order logic formulas using the defined predicates and constants.\n\nFor example, for the first sentence \"All eels are fish.\", we can parse it as ∀x (is_eel(x) → is_fish(x)).\n\n\n## Step 3: List All Used Predicates and Constants\nFinally, we need to list all used predicates and constants in the parsed formulas.\n\n\nThe final answer is: $\\boxed{No specific question was provided, so no answer can be determined.}$"
  },
  {
    "id": "FOLIO_dev_85",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Subway provides take-out service and does not receive many negative reviews.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nsubway ::: represents subway\nyelp ::: represents yelp\n\nPredicates:\nis_listed(x,y) ::: x is listed in y’s recommendations.\nreceive_many_negative_reviews(x) ::: x receives many negative reviews.\nhave_rating_greater_than_9(x) ::: x has a rating greater than 9.\nprovide_take_out_service(x) ::: x provides take-out service.\nis_popular_among_local_residents(x) ::: x is popular among local residents.\n\nPremises:\n∀x (is_listed(x, \"yelp\") → ¬receive_many_negative_reviews(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (have_rating_greater_than_9(x) → is_listed(x, \"yelp\")) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∃x (¬provide_take_out_service(x) ∧ receive_many_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (is_popular_among_local_residents(x) → have_rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(have_rating_greater_than_9(\"subway\") ∨ is_popular_among_local_residents(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\n\nQuery:\nprovide_take_out_service(\"subway\") ∧ ¬receive_many_negative_reviews(\"subway\") ::: Subway provides take-out service and does not receive many negative reviews."
  },
  {
    "id": "FOLIO_dev_86",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Subway does not provide take-out service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyelp ::: represents Yelp\nsubway ::: represents subway\n\nPredicates:\nis_listed(x,y) ::: x is listed in y's recommendations.\nhas_rating_greater_than_9(x) ::: x has a rating greater than 9.\nreceives_many_negative_reviews(x) ::: x receives many negative reviews.\nprovide_take_out_service(x) ::: x provides take-out service.\nis_popular_among_local_residents(x) ::: x is popular among local residents.\n\nPremises:\n∀x (is_listed(x, \"yelp\") → ¬receives_many_negative_reviews(x)) ::: If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n∀x (has_rating_greater_than_9(x) → is_listed(x, \"yelp\")) ::: All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n∃x ((¬provide_take_out_service(x)) ∧ receives_many_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n∀x (is_popular_among_local_residents(x) → has_rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(has_rating_greater_than_9(\"subway\") ∨ is_popular_among_local_residents(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\n\nQuery:\n¬provide_take_out_service(\"subway\") ::: Subway does not provide take-out service."
  },
  {
    "id": "FOLIO_dev_87",
    "context": "In superhero movies, the good guys always win. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie. Good guys fight bad guys and vice versa. Sir Digby fights his nemesis. If a superhero movie is named after a character, that character is a good guy. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby. If somebody wins a fight, the person they are fighting loses. If a superhero movie is named after a character, that character appears in the movie.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Sir Digby’s nemesis loses.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nsir_digby_chicken_caesar ::: represents sir digby chicken caesar\nthe_surprising_adventures_of_sir_digby_chicken_caesar ::: represents the surprising adventures of sir digby chicken caesar\n\nPredicates:\nis_superhero_movie(x) ::: x is a superhero movie.\nare_good_guys(x, y) ::: x and y are good guys.\nfight(x, y) ::: x fights against y.\nwins(x, y) ::: x wins against y.\nloses(x, y) ::: x loses to y.\nis_named_after(x, y) ::: x is named after y.\nappears_in(x, y) ::: x appears in y.\n\nPremises:\n∀x (is_superhero_movie(x) → are_good_guys(x, \"good_guys\")) ::: In superhero movies, the good guys always win.\nis_superhero_movie(\"the_surprising_adventures_of_sir_digby_chicken_caesar\") ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n∀x ∀y (fight(x, y) → fight(y, x)) ::: Good guys fight bad guys and vice versa.\nfight(\"sir_digby\", \"nemesis_of_sir_digby\") ::: Sir Digby fights his nemesis.\n∀x ∀y ((is_superhero_movie(x) ∧ is_named_after(x, y)) → are_good_guys(y, \"good_guys\")) ::: If a superhero movie is named after a character, that character is a good guy.\nis_named_after(\"the_surprising_adventures_of_sir_digby_chicken_caesar\", \"sir_digby\") ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n∀x ∀y (wins(x, y) → loses(y, x)) ::: If somebody wins a fight, the person they are fighting loses.\n∀x ∀y ((is_superhero_movie(x) ∧ is_named_after(x, y)) → appears_in(y, x)) ::: If a superhero movie is named after a character, that character appears in the movie.\n\nQuery:\nloses(\"nemesis_of_sir_digby\", \"sir_digby\") ::: Sir Digby’s nemesis loses."
  },
  {
    "id": "FOLIO_dev_88",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Walden contains knowledge.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nwalden ::: represents the book Walden\nharry ::: represents harry\nhenry_thoreau ::: represents henry thoreau\n\nPredicates:\ncontains(x, y) ::: x contains y.\nreads(x, y) ::: x reads y.\ngains_knowledge(x) ::: x gains knowledge.\nbecomes_smarter(x) ::: x becomes smarter.\n\nPremises:\n∀x (is_book(x) → contains(x, \"knowledge\")) ::: Books contain tons of knowledge.\n∀x ∀y (reads(x, y) ∧ is_book(y) → gains_knowledge(x)) ::: When a person reads a book, that person gains knowledge.\n∀x (gains_knowledge(x) → becomes_smarter(x)) ::: If a person gains knowledge, they become smarter.\nreads(\"harry\", \"walden\") ∧ was_written_by(\"walden\", \"henry_thoreau\") ::: Harry read the book “Walden” by Henry Thoreau.\n\nQuery:\ncontains(\"walden\", \"knowledge\") ::: Walden contains knowledge."
  },
  {
    "id": "FOLIO_dev_89",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is smarter than before.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text and question, I will follow the specified format to analyze and answer the query.\n\n### Constants\nharry ::: represents harry\nwalden ::: represents walden\nhenry_thoreau ::: represents henry thoreau\n\n### Predicates\ncontain(x,y) ::: x contains y.\nread(x, y) ::: x read y.\ngains(x, y) ::: x gains y.\nbecomes(x, y) ::: x becomes y.\n\n### Premises\n∀x ∀y (is_book(x) ∧ contain(x, \"knowledge\")) ::: Books contain tons of knowledge.\n∀x ∀y (read(x,y) → gains(x, \"knowledge\")) ::: When a person reads a book, that person gains knowledge.\n∀x ∀y (gains(x, \"knowledge\") → becomes(x, \"smarter\")) ::: If a person gains knowledge, they become smarter.\nread(\"harry\", \"walden\") ::: Harry read the book “Walden” by Henry Thoreau.\n\n### Query\nbecomes(\"harry\", \"smarter\") :::  Harry is smarter than before.\n\n\nThe final answer to the question \"Based on the above information, is the following statement true, false, or uncertain? Harry is smarter than before.\" is: TRUE"
  },
  {
    "id": "FOLIO_dev_90",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A person who is smarter has gained knowledge.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nharry ::: represents harry\nwalden ::: represents walden\nhenry_thoreau ::: represents henry thoreau\n\nPredicates:\ncontain(x,y) ::: x contains y.\nreads(x,y) ::: x reads y.\ngains(x,y) ::: x gains y.\nis_smarter(x) ::: x is smarter.\nis_book(x) ::: x is a book.\n\nPremises:\n∀x ∀y (is_book(x) → contain(x, \"knowledge\")) ::: [BG] Books contain tons of knowledge.\n∀x ∀y (reads(x,y) → gains(x,\"knowledge\")) ::: [BG] When a person reads a book, that person gains knowledge.\n∀x (gains(x,\"knowledge\") → is_smarter(x)) ::: [BG] If a person gains knowledge, they become smarter.\nreads(\"harry\",\"walden\") ∧ is_book(\"walden\") ∧ is_author(\"henry_thoreau\", \"walden\") ::: Harry read the book “Walden” by Henry Thoreau.\n\nQuery:\n∃x (is_smarter(x) → ∃y(gains(y,\"knowledge\"))) ::: A person who is smarter has gained knowledge."
  },
  {
    "id": "FOLIO_dev_91",
    "context": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Machine translation is a language generation task.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "To solve this problem, we need to translate the given text into first-order logic formulas and list all used predicates and constants.\n\nConstants:\n- natural_language_processing_task ::: represents a natural language processing task\n- machine_translation ::: represents machine translation\n- output ::: represents output\n\nPredicates:\n- is_language_generation_task(x) ::: x is a language generation task.\n- is_language_understanding_task(x) ::: x is a language understanding task.\n- has_output(x, y) ::: x has output y.\n- is_text_sequence(x) ::: x is a text sequence.\n\nPremises:\n\n∀x (is_natural_language_processing_task(x) → (is_language_generation_task(x) ∨ is_language_understanding_task(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n∀x ∀y (has_output(x, y) ∧ is_text_sequence(y) → is_language_generation_task(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nis_natural_language_processing_task(\"machine_translation\") ::: Machine translation is a natural language processing task.\n∃x (has_output(\"machine_translation\", x) ∧ is_text_sequence(x)) ::: The output of machine translation is a text sequence.\n\nQuery:\nis_language_generation_task(\"machine_translation\") ::: Machine translation is a language generation task."
  },
  {
    "id": "FOLIO_dev_92",
    "context": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Machine translation is a language understanding task.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "## Step 1: Analyzing the Text and Question\nThe given problem involves analyzing a text about natural language processing tasks and determining whether a specific statement is true, false, or uncertain based on the provided information.\n\n## Step 2: Identifying Key Information in the Text\nFrom the text, we can identify the following key points:\n- Natural language processing tasks are categorized into either language generation task or language understanding task.\n- If the output of a natural language processing task is a text sequence, then it is considered a language generation task.\n- Machine translation is classified as a natural language processing task.\n- The output of machine translation is a text sequence.\n\n## Step 3: Applying the Information to the Question\nBased on the identified key points, we can conclude that machine translation has an output that is a text sequence. According to the provided information, any natural language processing task with a text sequence as its output falls under the category of a language generation task.\n\nThe final answer is: $\\boxed{False}$"
  },
  {
    "id": "FOLIO_dev_93",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nfluffy ::: represents fluffy\ntom ::: represents tom\nolive_garden ::: represents the olive garden\n\nPredicates:\nis_pet(x) ::: x is a pet.\nis_allowed_in(x, y) ::: x is allowed in y.\nis_managed_building(x) ::: x is a managed building.\nrequires_deposit(x) ::: x requires a deposit.\nis_deposit_equal_to_monthly_rent(x) ::: the security deposit of x is equal to one month's rent.\nis_deposit_more_than_monthly_rent(x) ::: the security deposit of x is more than one month's rent.\nis_cat(x) ::: x is a cat.\nis_apartment(x) ::: x is an apartment.\nhas_monthly_rent(x, y) ::: The monthly rent at x is y dollars.\ncan_move_in_with_pet(x, y, z) ::: x can move in with pet y to building z.\nwill_rent_apartment(x, y) ::: x will rent an apartment in building y.\n\nPremises:\n∃x (is_managed_building(x) ∧ ∃y (is_pet(y) ∧ is_allowed_in(y, x))) ::: Pets are allowed in some managed buildings. \n∀x (is_managed_building(x) → requires_deposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x ((is_managed_building(x) → is_deposit_equal_to_monthly_rent(x)) ∨ (is_managed_building(x) → is_deposit_more_than_monthly_rent(x))) ::: The security deposit can be either equal to one month's rent or more.\nis_cat(\"fluffy\") ∧ \"fluffy\" = tom ::: Fluffy is Tom's cat.\n∀x (is_cat(x) → is_pet(x)) ::: Cats are pets.\nis_managed_building(\"olive_garden\") ::: The Olive Garden is a managed building.\nhas_monthly_rent(\"olive_garden\", 2000) ::: The monthly rent at the Olive Garden is $2,000.\n(tom can_move_in_with_pet \"tom\" \"fluffy\" x ∧ ¬(is_deposit_more_than_monthly_rent(x))) → will_rent_apartment(\"tom\", x) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1,500.\n¬(2000 ≤ 1500) ::: 2,000$ is more than $1,500.\n\nQuery:\nwill_rent_apartment(\"tom\", \"olive_garden\") ::: Tom will rent an apartment in The Olive Garden."
  },
  {
    "id": "FOLIO_dev_94",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nthe_olive_garden ::: represents The Olive Garden\ntom ::: represents Tom\nfluffy ::: represents Fluffy\n\nPredicates:\nis_managed_building(x) ::: x is a managed building\nare_allowed(x,y) ::: x are allowed in y\nhas_deposit(x) ::: x has a deposit to rent an apartment.\nis_pet(x) ::: x is pet.\nis_cat(x) ::: x is cat.\nis_owner_of(x, y) ::: x is the owner of y.\ncan_move_in_with(x, y, z) ::: x can move in with y in z.\n\nPremises:\n∃x (are_allowed(\"pets\", \"managed buildings\")) ::: Pets are allowed in some managed buildings.\n∀x ∀y (is_managed_building(x) → has_deposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x ((is_deposit(x, \"one_month_rent\") ∨ is_deposit(x, \"more_than_one_month_rent\"))) ::: The security deposit can be either equal to one month's rent or more.\nis_cat(\"fluffy\") ∧ is_owner_of(\"tom\", \"fluffy\") ::: Fluffy is Tom's cat.\n∀x (is_cat(x) → is_pet(x)) ::: Cats are pets.\nis_managed_building(\"the_olive_garden\") ::: The Olive Garden is a managed building.\nhas_rent(\"the_olive_garden\", \"$2000\") ::: The monthly rent at the Olive Garden is $2,000.\n∀x ∀y ((can_move_in_with(\"tom\", \"fluffy\", x) ∧ is_managed_building(x)) → (are_allowed(\"pets\", y) ∧ has_deposit(\"$1500\"))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $15,000.\nis_more_than(\"$2000\", \"$1500\") ::: 2,000$ is more than $1,500.\n\nQuery:\ncan_move_in_with(\"tom\", \"fluffy\", \"the_olive_garden\") ::: Tom is allowed to move in an apartment in The Olive Garden with Fluffy."
  },
  {
    "id": "FOLIO_dev_95",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nolive_garden ::: represents the olive garden\nfluffy ::: represents fluffy\ntom ::: represents tom\nPredicates:\nis_managed_building(x) ::: x is a managed building.\nare_allowed_in(x,y) ::: pets are allowed in y.\nrequires_deposit(x) ::: a deposit is required to rent an apartment in x.\nis_pet(x) ::: x is pet.\nis_cat(x) ::: x is cat.\nowns_pet(x, y) ::: x owns pet y.\nwill_rent_apartment(x,y) ::: x will rent an apartment in y.\nis_security_deposit(x,y) ::: the security deposit at x is $y.\nPremises:\n∃x (is_managed_building(x) ∧ are_allowed_in(\"pets\", x)) ::: Pets are allowed in some managed buildings.\n∀x (is_managed_building(x) → requires_deposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n∀x (requires_deposit(x) → (is_security_deposit(x, \"2000\") ∨ is_security_deposit(x,y) ∧ y > 2000)) ::: The security deposit can be either equal to one month's rent or more.\nowns_pet(\"tom\", \"fluffy\") ∧ is_cat(\"fluffy\") ∧ is_pet(\"cat\")::: Fluffy is Tom's cat. Cats are pets.\nis_managed_building(\"olive_garden\") ::: The Olive Garden is a managed building.\n∀x (is_managed_building(x) → ∀y(is_security_deposit(x, y) → 2000 ≤ y)) ::: 2000$ is more than $1500.\n(are_allowed_in(\"fluffy\", x) ∧ ¬is_security_deposit(x, \"15000\")) ∨ (¬are_allowed_in(\"fluffy\",x) ∧ is_security_deposit(x,\"15000\"))→ will_rent_apartment(\"tom\", x) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $15,000.\nQuery:\n(is_security_deposit(\"olive_garden\", \"2000\") ∨ ∃x (is_managed_building(x) ∧ x > 2000)) ::: The security deposit at the Olive Garden is either $2,000 or more."
  },
  {
    "id": "FOLIO_dev_96",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Koalas love to sleep.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmax ::: represents max\nPredicates:\nis_animal(x) ::: x is an animal.\nare_loved_by_tourists(x) ::: x are loved by tourists.\nis_favorite_of_max(x) ::: x is Max's favorite animals.\nare_very_fluffy(x) ::: x are very fluffy.\nlove_to_sleep(x) ::: x love to sleep.\nis_from_australia(x) ::: x is from Australia.\nis_quokka(x) ::: x is a quokka.\nis_koala(x) ::: x is a koala.\nPremises:\n∀x (are_loved_by_tourists(x) → is_favorite_of_max(x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (is_from_australia(x) → are_loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n∀x (is_quokka(x) → is_animal(x)) ::: All quokka are animals from Australia.\n∀x (is_favorite_of_max(x) → are_very_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x (is_favorite_of_max(x) → love_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n∃x (is_koala(x) ∧ ¬(are_very_fluffy(x) → is_quokka(x))) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\n∀x (is_koala(x) → love_to_sleep(x)) ::: Koalas love to sleep."
  },
  {
    "id": "FOLIO_dev_97",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Koalas love to sleep and are quokka.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmax ::: represents max\naustralia ::: represents australia\nPredicates:\nis_animal(x) ::: x is an animal.\nloved_by_tourists(x) ::: x is loved by tourists.\nfrom_australia(x) ::: x is from Australia.\nis_quokka(x) ::: x is a quokka.\nis_favorite_animal_of_max(x) ::: x is max's favorite animal.\nis_fluffy(x) ::: x is fluffy.\nloves_to_sleep(x) ::: x loves to sleep.\nis_koala(x) ::: x is a koala.\nPremises:\n∀x (loved_by_tourists(x) →  is_favorite_animal_of_max(x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x (from_australia(x) → loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n∀x (is_quokka(x) →  is_animal(x) ∧ from_australia(x)) ::: All quokka are animals from Australia.\n∀x (is_favorite_animal_of_max(x) → is_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x (is_favorite_animal_of_max(x) → loves_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n∃x (is_koala(x) ∧  ¬(is_quokka(x) ∧ is_fluffy(x))) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\n∀x (loves_to_sleep(x) → is_quokka(x)) ∧ is_koala(\"koalas\") ::: Koalas love to sleep and are quokka."
  },
  {
    "id": "FOLIO_dev_98",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\naustralia ::: represents australia\nquokka ::: represents quokka\nmax ::: represents max\nkoala ::: represents koala\nPredicates:\nis_animal(x) ::: x is an animal.\nare_loved_by_tourists(x) ::: x are loved by tourists.\nfrom_australia(x) ::: x are from australia.\nis_favorite_of_max(x) ::: x is a favorite of max.\nis_fluffy(x) ::: x is fluffy.\nlove_to_sleep(x) ::: x love to sleep.\nis_quokka(x) ::: x is quokka.\nis_koala(x) ::: x is koala.\nPremises:\n∀x (are_loved_by_tourists(x) → is_favorite_of_max(x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n∀x ((from_australia(x) ∧ is_animal(x)) → are_loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n∀x (is_quokka(x) → (from_australia(x) ∧ is_animal(x))) ::: All quokka are animals from Australia.\n∀x ((is_favorite_of_max(x) ∧ is_animal(x)) → is_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n∀x ((is_favorite_of_max(x) ∧ is_animal(x)) → love_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n∀x (is_koala(x) ∧ is_fluffy(x) → ¬is_quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\n((is_koala(x) ∧ is_quokka(x)) → love_to_sleep(x)) ∨ ((is_koala(x) ∧ is_quokka(x)) → is_fluffy(x)) ::: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n###"
  },
  {
    "id": "FOLIO_dev_99",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is a CEO.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nharry ::: represents harry\n\nPredicates:\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is a ceo.\n\nPremises:\n∀x ((is_kind(x) ∧ ¬is_evil(x)) ∨ (is_evil(x) ∧ ¬is_kind(x))) ::: A man is either kind or evil.\n∀x (is_ugly(x) → ¬is_handsome(x)) ::: No ugly person is handsome.\n∀x (is_evil(x) →  is_ugly(x)) ::: All evil people are ugly.\n∀x (is_gentleman(x) →  is_handsome(x)) ::: All gentlemen are handsome.\n∀x (is_ceo(x) →  is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\n\nQuery:\nis_ceo(\"harry\") ::: Harry is a CEO."
  },
  {
    "id": "FOLIO_dev_100",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is kind or a CEO.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nharry ::: represents harry\n\nPredicates:\nis_man(x) ::: x is a man.\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is ceo.\n\nPremises:\n∀x ((¬is_kind(x) ∧ is_evil(x)) ∨ (is_kind(x) ∧ ¬is_evil(x))) ::: A man is either kind or evil.\n∀x (is_ugly(x) → ¬is_handsome(x)) ::: No ugly person is handsome.\n∀x (is_evil(x) → is_ugly(x)) ::: All evil people are ugly.\n∀x (is_gentleman(x) →  is_handsome(x)) ::: All gentlemen are handsome.\n∀x (is_ceo(x) → is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\n\nQuery:\n(is_kind(\"harry\") ∨ is_ceo(\"harry\")) ::: Harry is kind or a CEO."
  },
  {
    "id": "FOLIO_dev_101",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nman ::: represents a man\nPredicates:\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is gentleman.\nis_ceo(x) ::: x is ceo.\nPremises:\n∀x ((¬is_kind(x) ∧ is_evil(x)) ∨ (is_kind(x) ∧ ¬is_evil(x))) ::: A man is either kind or evil.\n∀x (is_ugly(x) → ¬is_handsome(x)) ::: No ugly person is handsome.\n∀x (is_evil(x) →  is_ugly(x)) ::: All evil people are ugly.\n∀x (is_gentleman(x) →  is_handsome(x)) ::: All gentlemen are handsome.\n∀x (is_ceo(x) →  is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\nQuery:\n((is_evil(\"harry\") ∧ is_ugly(\"harry\")) ∨ (¬is_evil(\"harry\") ∧ ¬is_ugly(\"harry\"))) → (¬is_kind(\"harry\") ∧ ¬is_ceo(\"harry\")) ::: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO."
  },
  {
    "id": "FOLIO_dev_102",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "## Step 1: Understand the problem\nWe are given a text and a question, and we need to parse every sentence in the text into first-order logic formulas and list all the used predicates and constants.\n\n## Step 2: Define predicates and constants\nPredicates:\n- is_twin_or_triplet(x) ::: x is a twin or triplet.\n- spends_lot_time_with_siblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\n- have_same_age_siblings(x) ::: x has siblings who are the same age.\n- complain_about_annoying_siblings(x) ::: x complains often about annoying siblings.\n- live_at_home_regularly(x) ::: x lives at home regularly.\n- develop_strong_bonds_with_family_members(x) ::: x develops strong bonds with their family members.\n\nConstants:\n- luke ::: represents Luke\n\n## Step 3: Translate sentences into first-order logic formulas\n1. If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (is_twin_or_triplet(x) → spends_lot_time_with_siblings(x))\n\n2. If people have siblings who are the same age, then they are twins or triplets.\n∀x (have_same_age_siblings(x) → is_twin_or_triplet(x))\n\n3. If people complain often about annoying siblings, then they have siblings who are the same age.\n∀x (complain_about_annoying_siblings(x) → have_same_age_siblings(x))\n\n4. If people do not live at home regularly, then they do not develop strong bonds with their family members.\n∀x (¬live_at_home_regularly(x) → ¬develop_strong_bonds_with_family_members(x))\n\n5. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n∀x (spends_lot_time_with_siblings(x) → ¬live_at_home_regularly(x))\n\n6. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n(is_twin_or_triplet(\"luke\") ∧ develop_strong_bonds_with_family_members(\"luke\")) ∨ (¬is_twin_or_triplet(\"luke\") ∧ ¬develop_strong_bonds_with_family_members(\"luke\"))\n\n## Step 4: Determine the truth value of the query\nQuery: spends_lot_time_with_siblings(\"luke\")\n\nUsing the given premises and logical rules, we can deduce that:\n- is_twin_or_triplet(\"luke\") → develop_strong_bonds_with_family_members(\"luke\")\n- ¬live_at_home_regularly(\"luke\") → ¬develop_strong_bonds_with_family_members(\"luke\")\n- spends_lot_time_with_siblings(\"luke\") → ¬live_at_home_regularly(\"luke\")\n\nFrom the 6th premise, we know that Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n\nIf Luke is a twin or triplet and develops strong bonds with his family members, then from the 1st premise, we can deduce that spends_lot_time_with_siblings(\"luke\").\n\nIf Luke neither is a twin or triplet nor develops strong bonds with his family members, then from the 5th premise, we can deduce that ¬spends_lot_time_with_siblings(\"luke\").\n\nHowever, since we don't have enough information to determine which one of these two cases is true, the query spends_lot_time_with_siblings(\"luke\") is uncertain.\n\nThe final answer is: $\\boxed{uncertain}$"
  },
  {
    "id": "FOLIO_dev_103",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke complains often about annoying siblings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nluke ::: represents luke\nPredicates:\nis_twin_or_triplet(x) ::: x is a twin or triplet.\nhas_same_age_sibling(x) ::: x has sibling(s) who are the same age.\ncomplain_often_about_annoying_sibling(x) ::: x complains often about annoying siblings.\nlive_at_home_regularly(x) ::: x lives at home regularly.\ndevelop_strong_bond_with_family_member(x) ::: x develops strong bond with family member.\nspend_lot_time_with_sibling(x) ::: x spends a lot of time hanging out with and playing with their siblings.\nPremises:\n∀x ((is_twin_or_triplet(x) → spend_lot_time_with_sibling(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (has_same_age_sibling(x) → is_twin_or_triplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.\n∀x (complain_often_about_annoying_sibling(x) → has_same_age_sibling(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n∀x (¬live_at_home_regularly(x) → ¬develop_strong_bond_with_family_member(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n∀x (spend_lot_time_with_sibling(x) → ¬live_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n((is_twin_or_triplet(\"luke\") ∧ develop_strong_bond_with_family_member(\"luke\")) ∧ (is_twin_or_triplet(\"luke\") ∨ develop_strong_bond_with_family_member(\"luke\"))) ∨ (¬(is_twin_or_triplet(\"luke\") ∧ develop_strong_bond_with_family_member(\"luke\")) ∧ ¬(is_twin_or_triplet(\"luke\") ∨ develop_strong_bond_with_family_member(\"luke\"))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\ncomplain_often_about_annoying_sibling(\"luke\") ::: Luke complains often about annoying siblings."
  },
  {
    "id": "FOLIO_dev_104",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke is neither a twin nor triplet nor complains often about annoying siblings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nluke ::: represents luke\nPredicates:\nis_twin(x) ::: x is a twin.\nis_triplet(x) ::: x is a triplet.\nhas_sibling_same_age(x) ::: x has siblings who are the same age.\ncomplain_often(x) ::: x complains often about annoying siblings.\ndevelop_strong_bond(x) ::: x develops strong bonds with his family members.\nlive_at_home_regularly(x) ::: x lives at home regularly.\nspend_time_with_siblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\nPremises:\n∀x ((is_twin(x) ∨ is_triplet(x)) → spend_time_with_siblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n∀x (has_sibling_same_age(x) → (is_twin(x) ∨ is_triplet(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\n∀x (complain_often(x) → has_sibling_same_age(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n∀x (¬live_at_home_regularly(x) → ¬develop_strong_bond(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n∀x (spend_time_with_siblings(x) → ¬live_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n(is_twin(\"luke\") ∨ is_triplet(\"luke\")) ∧ develop_strong_bond(\"luke\") ∧ (is_twin(\"luke\") ∨ is_triplet(\"luke\")) ∨ (¬(is_twin(\"luke\") ∨ is_triplet(\"luke\"))) ∧ ¬develop_strong_bond(\"luke\") ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\n¬(is_twin(\"luke\") ∨ is_triplet(\"luke\")) ∧ ¬complain_often(\"luke\") ::: Luke is neither a twin nor triplet nor complains often about annoying siblings."
  },
  {
    "id": "FOLIO_dev_105",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom can apply for financial aid from ETS to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ngre_test ::: represents the GRE test\nus_dollar_205 ::: represents US $205\nets ::: represents ETS\nfinancial_aid ::: represents financial aid\neconomic_hardship ::: represents economic hardship\ntom ::: represents Tom\n\nPredicates:\ncosts(x, y) ::: x costs y.\nprovides(x, y) ::: x provides y.\nrefers_to(x, y) ::: x refers to y.\nhas_difficulty(x, y) ::: x has difficulty caused by y.\nlives_in(x, y) ::: x lives in y.\nis_single_parent_family(x) ::: x is a single-parent family.\nhas_been_out_of_work(x, y) ::: x has been out of work for y.\n\nPremises:\ncosts(\"gre_test\", \"us_dollar_205\") ::: It costs US $205 to take the GRE test.\n∀x (provides(\"ets\", \"financial_aid\") → is_gre_applicant(x) ∧ prove_economic_hardship(x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nrefers_to(\"economic_hardship\", \"difficulty_caused_by_having_too_little_money_or_resources\") ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nlives_in(\"tom\", \"single_parent_family\") ∧ is_single_parent_family(\"family_of_tom\") ::: Tom lives in a single-parent family.\nhas_been_out_of_work(\"dad_of_tom\", \"more_than_a_year\") ::: His dad has been out of work for more than a year.\n\nQuery:\n∃x (is_gre_applicant(\"tom\") ∧ prove_economic_hardship(\"tom\")) :::  Tom can apply for financial aid from ETS to take the GRE test."
  },
  {
    "id": "FOLIO_dev_106",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? It cost below US $300 to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ngre ::: represents gre\nus_205 ::: represents us $205\nets ::: represents ets\ntom ::: represents tom\n\nPredicates:\ncost(x,y) ::: x cost y.\nprovide(x,y,z) ::: x provides y to z.\nprove(x,y,z) ::: x proves y about z.\nrefers_to(x, y) ::: x refers to y.\nis_difficulty(x) ::: x is a difficulty.\ncaused_by(x,y) ::: x is caused by y.\nlives_in(x,y) ::: x lives in y.\nhas_been_out_of_work(x,y,z) ::: x has been out of work for more than z years.\n\nPremises:\ncost(\"gre\", \"us_205\") ::: It costs US $205 to take the GRE test.\n∀x ∀y (provide(\"ets\",\"financial aid\",y) → prove(y,\"economic hardship\",z)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nrefers_to(\"economic hardship\", is_difficulty(x)) ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nlives_in(\"tom\", \"single-parent family\") ::: Tom lives in a single-parent family.\nhas_been_out_of_work(\"dad of tom\", more_than_one_year) ::: His dad has been out of work for more than a year.\n\nQuery:\n¬cost(\"gre\", y → us_300) ::: It cost below US $300 to take the GRE test."
  },
  {
    "id": "FOLIO_dev_107",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is no financial aid available for the GRE test.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\n gre ::: represents gre\n us_dollar_205 ::: represents $205\n ets ::: represents ets\n tom ::: represents tom\n\nPredicates:\n costs(x,y) ::: x costs y.\n provides_financial_aid(x,y) ::: x provides financial aid to y.\n prove_economic_hardship(x) ::: x proves economic hardship.\n refers_to(x,y) ::: x refers to y.\n is_difficulty_caused_by(x,y) ::: x is difficulty caused by y.\n lives_in(x,y) ::: x lives in y.\n has_been_out_of_work(x,y) ::: x has been out of work for y.\n\nPremises:\n costs(\"gre\", \"us_dollar_205\") ::: It costs US $205 to take the GRE test.\n provides_financial_aid(\"ets\", x) ∧ prove_economic_hardship(x) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\n refers_to(\"economic_hardship\", \"difficulty_caused_by_having_too_little_money_or_too_few_resources\") ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\n lives_in(\"tom\", \"single-parent_family\") ∧ has_been_out_of_work(\"dad\", \"more_than_a_year\") ::: Tom lives in a single-parent family. His dad has been out of work for more than a year.\n\nQuery:\n ¬∃x (provides_financial_aid(x, y)) ::: There is no financial aid available for the GRE test.\n\nThe answer to this question based on the information given in the text would be false because there are conditions under which financial aid is provided."
  },
  {
    "id": "FOLIO_dev_108",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter tidies his space consistently and enjoys the process of cleaning.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided information, I will translate every sentence into first-order logic formulas and list all used predicates and constants.\n\n\nConstants:\npeter ::: represents peter\nPredicates:\nspill_lot_food(x) ::: x spills a lot of food on his clothing.\ntidy_space_consistently(x) ::: x tidies his space consistently.\nenjoy_process_cleaning(x) ::: x enjoys the process of cleaning.\nis_foodie(x) ::: x is a foodie.\ngo_out_frequently(x) ::: x goes out frequently to find new food restaurants to try.\ngrow_up_as_only_child(x) ::: x grew up as an only child with no siblings.\nhave_parents_busy_with_regular_jobs(x) ::: x has parents who are very busy with their regular jobs.\nhave_high_net_income(x) ::: x has a high net income.\n\n\nPremises:\n∀x (spill_lot_food(x) → ¬tidy_space_consistently(x) ∧ enjoy_process_cleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x ((is_foodie(x) ∧ go_out_frequently(x)) → spill_lot_food(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (grow_up_as_only_child(x) → tidy_space_consistently(x) ∧ enjoy_process_cleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (have_parents_busy_with_regular_jobs(x) → grow_up_as_only_child(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (have_high_net_income(x) → have_parents_busy_with_regular_jobs(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(peter ∧ grow_up_as_only_child(\"peter\")) ∨ (¬spill_lot_food(\"peter\") ∧ ¬grow_up_as_only_child(\"peter\")) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n\n\nQuery:\ntidy_space_consistently(\"peter\") ∧ enjoy_process_cleaning(\"peter\") ::: Peter tidies his space consistently and enjoys the process of cleaning.\n\nNote that this query cannot be determined to be true or false based solely on the provided premises, so it is uncertain."
  },
  {
    "id": "FOLIO_dev_109",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "This text does not provide explicit statements that can be translated into first-order logic formulas. However, I can guide you through the process based on the given examples.\n\nTo translate this text into first-order logic formulas, we need to identify the predicates and constants involved.\n\n\nConstants:\npeter ::: represents peter\n\nPredicates:\nspill_lot_of_food_on_clothing(x) ::: x spills a lot of food on his clothing.\ntidy_spaces_consistently(x) ::: x tidies spaces consistently.\nenjoy_process_of_cleaning(x) ::: x enjoys the process of cleaning.\nis_foodie(x) ::: x is a foodie.\ngo_out_frequently_to_find_new_restaurants(x) ::: x goes out frequently to find new restaurants.\ngrew_up_as_only_child_with_no_siblings(x) ::: x grew up as an only child with no siblings.\nhas_parents_who_are_busy_with_their_regular_jobs(x) ::: x has parents who are busy with their regular jobs.\nbelongs_to_household_with_high_net_income(x) ::: x belongs to a household with a high net income.\n\nNow, let's try to translate the text into first-order logic formulas:\n\n\n∀x (spill_lot_of_food_on_clothing(x) → ¬tidy_spaces_consistently(x) ∧ ¬enjoy_process_of_cleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n∀x (is_foodie(x) ∧ go_out_frequently_to_find_new_restaurants(x) → spill_lot_of_food_on_clothing(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n∀x (grew_up_as_only_child_with_no_siblings(x) → tidy_spaces_consistently(x) ∧ enjoy_process_of_cleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n∀x (has_parents_who_are_busy_with_their_regular_jobs(x) → grew_up_as_only_child_with_no_siblings(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n∀x (belongs_to_household_with_high_net_income(x) → has_parents_who_are_busy_with_their_regular_jobs(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n(spill_lot_of_food_on_clothing(\"peter\") ∧ grew_up_as_only_child_with_no_siblings(\"peter\")) ∨ (¬spill_lot_of_food_on_clothing(\"peter\") ∧ ¬grew_up_as_only_child_with_no_siblings(\"peter\")) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n\n\nQuery:\n(is_foodie(\"peter\") ∧ go_out_frequently_to_find_new_restaurants(\"peter\")) ∨ belongs_to_household_with_high_net_income(\"peter\") ::: Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.\n\nPlease note that the final answer might be uncertain because we don't have enough information to determine whether Peter satisfies the conditions."
  },
  {
    "id": "FOLIO_dev_110",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "## Step 1: Determine the format for presenting the solution\nThe problem requires us to follow a specific format in presenting our solution. The answer should be presented in a boxed notation.\n\n## Step 2: Review the given text and identify relevant information\nThe given text contains several statements about people's behavior, their habits, and some implications of those behaviors. We need to review these statements carefully and identify any relevant information that can help us determine whether Peter is a foodie who goes out frequently to find new food restaurants to try and belongs to a household with a high net income.\n\n## Step 3: Analyze the implications of each statement\nWe will analyze the implications of each statement in the given text. For example, if people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. This statement implies that spilling food is related to tidiness and enjoyment of cleaning.\n\n## Step 4: Determine the relationship between being a foodie and other characteristics\nWe need to determine how being a foodie relates to other characteristics mentioned in the text, such as growing up as an only child with no siblings, having parents who are very busy with their regular jobs, and belonging to a household with a high net income.\n\n## Step 5: Use logical reasoning to deduce the answer\nBased on the information gathered from steps 2-4, we will use logical reasoning to deduce whether Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n\n## Step 6: Determine the answer based on logical reasoning\nAfter analyzing all the statements and implications, we will determine whether Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n\n## Step 7: Present the answer in the required format\nThe final answer will be presented in the boxed notation.\n\n\nThe final answer is: $\\boxed{True}$"
  },
  {
    "id": "FOLIO_dev_111",
    "context": "All fir trees are evergreens. Some objects of worship are fir trees.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some evergreens are not objects of worship.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given information, we can analyze the statements as follows:\n\n* All fir trees are evergreens. (Universal statement)\n* Some objects of worship are fir trees. (Existential statement)\n\nFrom the first statement, we know that all fir trees are evergreens.\n\nFrom the second statement, we know that some objects of worship are fir trees, but it does not imply that all fir trees are objects of worship.\n\nTherefore, it is possible that some fir trees are not objects of worship. Since all fir trees are evergreens, it means that some evergreens (specifically, those fir trees that are not objects of worship) are not objects of worship.\n\nHence, the statement \"Some evergreens are not objects of worship\" is TRUE.\n\nConstants:\nfir_trees ::: represents fir trees\nevergreens ::: represents evergreens\nobjects_of_worship ::: represents objects of worship\n\nPredicates:\nis_fir_tree(x) ::: x is a fir tree\nis_evergreen(x) ::: x is an evergreen\nis_object_of_worship(x) ::: x is an object of worship\n\nPremises:\n∀x (is_fir_tree(x) → is_evergreen(x)) ::: All fir trees are evergreens.\n∃x (is_object_of_worship(x) ∧ is_fir_tree(x)) ::: Some objects of worship are fir trees.\n\nQuery:\n∃x (is_evergreen(x) ∧ ¬is_object_of_worship(x)) ::: Some evergreens are not objects of worship."
  },
  {
    "id": "FOLIO_dev_112",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\npicuris_mountains ::: represents the picuris mountains\nnew_mexico ::: represents new mexico\ntexas ::: represents texas\njuan_de_onate ::: represents juan de onate\nharding_pegmatite_mine ::: represents harding pegmatite mine\n\nPredicates:\nlocated_in(x, y) ::: x is located in y.\nvisited(x, y) ::: x visited y.\nis_mountain_range(x) ::: x is a mountain range.\ndonated(x) ::: x was donated.\n\nPremises:\n∀x (located_in(\"harding_pegmatite_mine\", \"picuris_mountains\") → (¬(located_in(\"picuris_mountains\", \"texas\")) ∧ ¬donated(\"harding_pegmatite_mine\"))) ::: There are no mountain ranges in Texas that have mines which have been donated.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\n∀x (located_in(\"picuris_mountains\", x) → (x = new_mexico ∨ x = texas)) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\ndonated(\"harding_pegmatite_mine\") ∧ located_in(\"harding_pegmatite_mine\", \"picuris_mountains\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n\nQuery:\nvisited(\"juan_de_onate\", \"new_mexico\") ::: Juan de Onate visited a mountain range in New Mexico."
  },
  {
    "id": "FOLIO_dev_113",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\npicuris_mountains ::: represents picuris mountains\nnew_mexico ::: represents new mexico\ntexas ::: represents texas\njuan_de_onate ::: represents juan de onate\nharding_pegmatite_mine ::: represents the harding pegmatite mine\n\nPredicates:\nare(x, y) ::: x are y.\nvisited(x, y) ::: x visited y.\nlocated_in(x, y) ::: x is located in y.\nis_donated(x) ::: x is donated.\n\nPremises:\nare(\"picuris_mountains\", \"new_mexico\") ∨ are(\"picuris_mountains\", \"texas\") ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\nlocated_in(\"harding_pegmatite_mine\", \"picuris_mountains\") ∧ is_donated(\"harding_pegmatite_mine\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n¬∃x (are(x, \"texas\") ∧ has_mines(x) ∧ is_donated(x)) ::: There are no mountain ranges in texas that have mines which have been donated.\n\nQuery:\nvisited(\"juan_de_onate\", x) ∧ are(x, \"texas\") ::: Juan de Onate visited a mountain range in Texas."
  },
  {
    "id": "FOLIO_dev_114",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\npicuris_mountains ::: represents picuris mountains\nnew_mexico ::: represents new mexico\ntexas ::: represents texas\njuan_de_onate ::: represents juan de onate\nharding_pegmatite_mine ::: represents harding pegmatite mine\n\nPredicates:\nare_in(x, y) ::: x are in y.\nvisited(x,y) ::: x visited y.\ndonated(x) ::: x donated.\nhas_mine_donated(x) ::: x has a mine which is donated.\n\nPremises:\n((are_in(\"picuris_mountains\", \"new_mexico\") ∧ ¬are_in(\"picuris_mountains\", \"texas\")) ∨ (¬are_in(\"picuris_mountains\", \"new_mexico\") ∧ are_in(\"picuris_mountains\", \"texas\"))) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\ndonated(harding_pegmatite_mine) ∧ (are_in(\"harding_pegmatite_mine\", \"new_mexico\") ∨ are_in(\"harding_pegmatite_mine\", \"texas\"))::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n¬∃x(has_mine_donated(x) ∧ are_in(x, \"texas\")) ::: There are no mountain ranges in texas that have mines which have been donated.\n\nQuery:\n¬are_in(harding_pegmatite_mine, new_mexico) ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico."
  },
  {
    "id": "FOLIO_dev_115",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, we can derive the following information:\n\n1. If a man is taller than another man, the taller one can block the other's shooting.\n\n2. Michael is a man who is taller than everyone else in his class.\n\n3. Peter is a man who is taller than Michael.\n\nFrom points 2 and 3, it follows that Peter is taller than everyone in Michael's class.\n\nTherefore, we can conclude that Peter is not shorter than any man in Michael's class. In fact, he is the tallest among them.\n\nSo, the statement \"Peter is shorter than a man in Michael's class\" is False."
  },
  {
    "id": "FOLIO_dev_116",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Windy is a great shooter.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\n\nPredicates:\nis_man(x) ::: x is a man.\ntaller_than(x,y) ::: x is taller than y.\nblock_shooting(x, y) ::: x can block the shooting of y.\njump_when_shooting(x) ::: x jumps when shooting.\ngreat_shooter(x) ::: x is a great shooter.\n\nPremises:\n∀x ∀y (is_man(x) ∧ is_man(y) ∧ taller_than(x,y) →  block_shooting(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\n∀x (taller_than(\"michael\", x) → ¬(x = \"peter\")) ::: Michael is a man who is taller than everyone else in his class.\n∀x ∀y ∀z (is_man(x) ∧ is_man(y) ∧ is_man(z) ∧ taller_than(x,y) ∧ taller_than(y,z) → taller_than(x,z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z\n∃x ∀y ((taller_than(\"peter\", \"michael\") ∧ (is_man(\"michael\") ∧ is_man(\"peter\")) →  taller_than(\"peter\", \"michael\")) ::: Peter is a man who is taller than Michael.\n∀x ∀y (block_shooting(\"michael\", y) ∨ jump_when_shooting(y)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n¬(block_shooting(\"michael\", \"windy\")) ::: Michael cannot block Windy's shooting.\n∃x ∀y ((is_man(x) ∧ is_man(y) ∧ taller_than(x, y) ∧ great_shooter(x)) →  (jump_when_shooting(y))) ::: Every shooter who can jump when shooting is a great shooter.\n\nQuery:\ngreat_shooter(\"windy\") ::: Windy is a great shooter."
  },
  {
    "id": "FOLIO_dev_117",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter can block Windy's shooting.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\n\nPredicates:\nis_man(x) ::: x is man.\nis_taller_than(x,y) ::: x is taller than y.\ncan_block(x,y) ::: x can block the shooting from y.\nis_great_shooter(x) ::: x is a great shooter.\n\nPremises:\n∀x ∀y (is_man(x) ∧ is_man(y) ∧ is_taller_than(x, y) → can_block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\n∃z ∀x (is_man(z) ∧ is_man(x) ∧ (z ≠ x) → is_taller_than(\"michael\", z)) ::: Michael is a man who is taller than everyone else in his class.\n∀x ∀y ∀z ((is_taller_than(x, y) ∧ is_taller_than(y, z)) → is_taller_than(x,z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z\n∃z (is_man(z) ∧ is_taller_than(\"peter\", \"michael\") ∧ is_taller_than(z,\"michael\"))::: Peter is a man who is taller than Michael.\n∀x ∀y (can_block(\"michael\", y) → (¬jump(y))) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\nis_man(windy) ∧ ¬can_block(michael,windy) ::: Michael cannot block Windy's shooting.\n∃z ∀x (is_great_shooter(z) ∧ is_man(x) ∧ jump(x) →  can_block(\"peter\", x))::: Every shooter who can jump when shooting is a great shooter.\n\nQuery:\n∀x ∀y ∀z ∀u ((is_taller_than(u,x) ∧ is_taller_than(x,y) ∧ ¬can_block(y,z)) →  (¬(can_block(z,u)))) ::: Peter can block Windy's shooting."
  },
  {
    "id": "FOLIO_dev_118",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Barutin is named after all islands in Antarctica.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "I can assist with the parsing of the text and question into first-order logic formulas. Here's the solution:\n\n\nConstants:\nbarutin_cove ::: represents Barutin Cove\nbulgarian_settlement_of_barutin ::: represents the Bulgarian settlement of Barutin\nsnow_island ::: represents Snow Island\nsouth_shetland_islands ::: represents the South Shetland Islands\ngreenwich_island ::: represents Greenwich Island\ndeception_island ::: represents Deception Island\nantarctica ::: represents Antarctica\n\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nlocated_in(x, y) ::: x is located in y.\nincludes(x, y) ::: x includes y.\npart_of(x, y) ::: x is a part of y.\n\nPremises:\nis_named_after(\"barutin_cove\", \"bulgarian_settlement_of_barutin\") ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nlocated_in(\"barutin_cove\", \"snow_island\") ∧ located_in(\"snow_island\", \"south_shetland_islands\") ::: Barutin Cove is on the southwest coast of Snow Island and Snow Island is part of South Shetland Islands.\nincludes(\"south_shetland_islands\", \"greenwich_island\") ∧ includes(\"south_shetland_islands\", \"deception_island\") ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\npart_of(\"south_shetland_islands\", \"antarctica\") ::: The South Shetland Islands are considered part of Antarctica.\n∀x ∀y ∀z (located_in(x,y) ∧ located_in(y,z) →  located_in(x,z)) ::: If A is located in B and B is located in C, then A is located in C.\n\nQuery:\n∀x (part_of(\"south_shetland_islands\", \"antarctica\") → is_named_after(\"bulgarian_settlement_of_barutin\", x)) ::: Barutin is named after all islands in Antarctica.\n\nNote that the query is false based on the given premises. The conclusion does not logically follow from the premises."
  },
  {
    "id": "FOLIO_dev_119",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, we can deduce the following:\n\n* Barutin Cove is named after the Bulgarian settlement of Barutin. (NamedAfter(Barutin_Cove, Barutin))\n* Barutin Cove is located on the southwest coast of Snow Island. (LocatedOn(Barutin_Cove, Snow_Island))\n* The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. (∃x (Includes(South_Shetland_Islands, x) ∧ (x = Snow_Island ∨ x = Greenwich_Island ∨ x = Deception_Island)))\n* The South Shetland Islands are considered part of Antarctica. (LocatedIn(South_Shetland_Islands, Antarctica))\n* If A is located in B and B is located in C, then A is located in C. (∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z)))\n\nUsing these premises, we can infer that:\n\n* Barutin Cove is located on Snow Island, which is part of the South Shetland Islands. (LocatedOn(Barutin_Cove, Snow_Island) ∧ Includes(South_Shetland_Islands, Snow_Island))\n* The South Shetland Islands are located in Antarctica. (LocatedIn(South_Shetland_Islands, Antarctica))\n\nApplying the transitive property of location (∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))), we can conclude that:\n\n* Barutin Cove is located in Antarctica. (LocatedIn(Barutin_Cove, Antarctica))\n\nSince Barutin Cove is named after the Bulgarian settlement of Barutin and it is located in Antarctica, we can answer the question as follows:\n\n Query: ∃x (NamedAfter(x, y) ∧ LocatedIn(x, Antarctica) ∧ y ∈ Bulgaria)\n\nTrue.\n\nNote that this requires a slight extension to the original rules of inference to include transitive properties."
  },
  {
    "id": "FOLIO_dev_120",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Barutin is not located in Antarctica.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbarutin_cove ::: represents barutin cove\nbulgarian_settlement_of_barutin ::: represents bulgarian settlement of barutin\nsouthwest_coast_of_snow_island ::: represents southwest coast of snow island\nsnow_island ::: represents snow island\ngreenwich_island ::: represents greenwich island\ndeception_island ::: represents deception island\nsouth_shetland_islands ::: represents south shetland islands\nantarctica ::: represents antarctica\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nis_on(x, y) ::: x is on y.\ninclude(x, y) ::: x includes y.\nconsidered_part_of(x,y) ::: x is considered part of y.\nis_located_in(x, y) ::: x is located in y.\n\nPremises:\nis_named_after(\"barutin_cove\", \"bulgarian_settlement_of_barutin\") ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nis_on(\"barutin_cove\", \"southwest_coast_of_snow_island\") ::: Barutin Cove is on the southwest coast of Snow Island.\ninclude(\"south_shetland_islands\", \"snow_island\") ∧ include(\"south_shetland_islands\", \"greenwich_island\") ∧ include(\"south_shetland_islands\", \"deception_island\") ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nconsidered_part_of(\"south_shetland_islands\", \"antarctica\") ::: The South Shetland Islands are considered part of Antarctica.\n∀x ∀y ∀z ((is_located_in(x,y) ∧ is_located_in(y,z)) →  is_located_in(x,z)) ::: If A is located in B and B is located in C, then A is located in C.\n\nQuery:\n¬is_located_in(\"barutin\", \"antarctica\") ::: Barutin is not located in Antarctica."
  },
  {
    "id": "FOLIO_dev_121",
    "context": "Some affection is love. Some love is positive.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some affection is positive.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given text and rules, we can analyze the sentences as follows:\n\n1. Some affection is love.\n   Predicate: is_love(x) ::: x is love\n   Fact: ∃x (is_affection(x) ∧ is_love(x)) ::: Some affection is love.\n\n2. Some love is positive.\n   Predicate: is_positive(x) ::: x is positive\n   Fact: ∃x (is_love(x) ∧ is_positive(x)) ::: Some love is positive.\n\nTo determine the truth value of the query \"Some affection is positive\", we can use the following reasoning:\n\nFrom fact 1, we know that some affection is love (∃x (is_affection(x) ∧ is_love(x))).\nFrom fact 2, we know that some love is positive (∃x (is_love(x) ∧ is_positive(x))).\n\nUsing the rule of existential quantification, we can infer that there exists something x such that:\n\n(is_affection(x) ∧ is_love(x)) ∧ (is_love(x) ∧ is_positive(x))\n\nSimplifying this expression, we get:\n\n∃x (is_affection(x) ∧ is_positive(x))\n\nTherefore, the query \"Some affection is positive\" is true.\n\nConstants:\naffection ::: represents affection\nlove ::: represents love\npositive ::: represents positive\n\nPredicates:\nis_affection(x) ::: x is affection.\nis_love(x) ::: x is love.\nis_positive(x) ::: x is positive.\n\nPremises: \n∃x (is_affection(x) ∧ is_love(x)) ::: Some affection is love.\n∃x (is_love(x) ∧ is_positive(x)) ::: Some love is positive.\n\nQuery:\n∃x (is_affection(x) ∧ is_positive(x)) ::: Some affection is positive."
  },
  {
    "id": "FOLIO_dev_122",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Greyhound is an airline.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ngreyhound ::: represents greyhound\nPredicates:\ncan_transport(x) ::: x can transport multiple passengers.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nis_Boeing_707(x) ::: x is Boeing 707.\nPremises:\n∀x (can_transport(x) → ¬is_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (is_airline(x) → can_transport(x)) ::: All airlines can transport multiple passengers.\n∀x (is_plane(x) → is_empty(x)) ::: All planes are empty.\n∀x (is_Boeing_707(x) → is_plane(x)) ::: All Boeing 707s are planes.\n¬is_airline(\"greyhound\") → ¬∃x (is_plane(x) ∧ \"greyhound\" = x) ::: If Greyhound is not an airline, then there are no Greyhound planes.\nQuery:\nis_airline(\"greyhound\") ::: Greyhound is an airline."
  },
  {
    "id": "FOLIO_dev_123",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A Greyhound is a Boeing 707.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ngreyhound ::: represents greyhound\nPredicates:\ncan_transport(x) ::: x can transport multiple passengers.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nis_empty(x) ::: x is empty.\nis_boeing_707(x) ::: x is a Boeing 707.\n\nPremises:\n∀x (can_transport(x) → ¬is_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (is_airline(x) → can_transport(x)) ::: All airlines can transport multiple passengers.\n∀x (is_plane(x) → is_empty(x)) ::: All planes are empty.\n∀x (is_boeing_707(x) → is_plane(x)) ::: All Boeing 707s are planes.\n¬is_airline(\"greyhound\") → ¬∃x (is_plane(x) ∧ \"greyhound\" = x) ::: If Greyhound is not an airline, then there are no Greyhound planes.\n\nQuery:\n∃x (\"greyhound\" = x ∧ is_boeing_707(x)) ::: A Greyhound is a Boeing 707."
  },
  {
    "id": "FOLIO_dev_124",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A Greyhound is not a Boeing 707.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ngreyhound ::: represents greyhound\nboeing_707 ::: represents boeing 707\n\nPredicates:\ntransport_multiple_passengers(x) ::: x can transport multiple passengers.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nis_empty(x) ::: x is empty.\n\nPremises:\n∀x (¬transport_multiple_passengers(x) → is_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n∀x (is_airline(x) → transport_multiple_passengers(x)) ::: All airlines can transport multiple passengers.\n∀x (is_plane(x) → is_empty(x)) ::: All planes are empty.\n∀x (is_boeing_707(x) → is_plane(x)) ::: All Boeing 707s are planes.\n¬is_airline(\"greyhound\") → ¬∃x (is_greyhound(x) ∧ is_plane(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\n\nQuery:\n¬(is_greyhound(\"x\") ∧ is_boeing_707(\"x\")) ::: A Greyhound is not a Boeing 707."
  },
  {
    "id": "FOLIO_dev_125",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a monkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmammals ::: represents mammals\nanimals ::: represents animals\nmonkeys ::: represents monkeys\nbirds ::: represents birds\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x can fly.\nbreathe(x) ::: x breathes.\nhas_wings(x) ::: x has wings.\n\nPremises:\n∀x (is_mammal(x) → is_animal(x)) ::: All mammals are animals.\n∀x (is_monkey(x) → is_mammal(x)) ::: All monkeys are mammals.\n∀x ((is_monkey(x) ∧ ¬is_bird(x)) ∨ (¬is_monkey(x) ∧ is_bird(x))) ::: An animal is either a monkey or a bird.\n∀x (is_bird(x) → fly(x)) ::: All birds fly.\n∀x (is_animal(x) → breathe(x)) ::: All animals breathe.\n∀x (fly(x) → has_wings(x)) ::: If something can fly, then it has wings.\n¬(fly(\"rock\") ∨ is_bird(\"rock\")) → ¬(fly(\"rock\") ∨ breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n\nQuery:\nis_monkey(\"rock\") ::: Rock is a monkey.\n\nBased on the given premises and rules, it can be inferred that if Rock is not a bird, then Rock cannot fly. Additionally, since all birds breathe, if Rock does not breathe, it implies that Rock is not an animal. However, there is no information provided about Rock being an animal or a mammal; therefore, we cannot determine whether Rock is a monkey based on the given premises.\n\nThe final answer is: UNCERTAIN"
  },
  {
    "id": "FOLIO_dev_126",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock has wings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x can fly.\nbreathe(x) ::: x can breathe.\nhas_wings(x) ::: x has wings.\n\nPremises:\n∀x (is_mammal(x) → is_animal(x)) ::: All mammals are animals.\n∀x (is_monkey(x) → is_mammal(x)) ::: All monkeys are mammals.\n∀x ((¬is_bird(x) ∧ is_monkey(x)) ∨ (is_bird(x) ∧ ¬is_monkey(x))) ::: An animal is either a monkey or a bird.\n∀x (is_bird(x) → fly(x)) ::: All birds fly.\n∀x (is_animal(x) → breathe(x)) ::: All animals breathe.\n∀x (fly(x) → has_wings(x)) ::: If something can fly, then it has wings.\n¬(fly(\"rock\") ∧ is_bird(\"rock\")) → ¬(fly(\"rock\") ∨ breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n\nQuery:\nhas_wings(\"rock\") ::: Rock has wings."
  },
  {
    "id": "FOLIO_dev_127",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock does not have wings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmammals ::: represents mammals\nmonkeys ::: represents monkeys\nbirds ::: represents birds\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\ncan_fly(x) ::: x can fly.\nhas_wings(x) ::: x has wings.\nbreathe(x) ::: x breathes.\n\nPremises:\n∀x (is_mammal(x) → is_animal(x)) ::: All mammals are animals.\n∀x (is_monkey(x) → is_mammal(x)) ::: All monkeys are mammals.\n∀x ((is_monkey(x) ∧ ¬is_bird(x)) ∨ (¬is_monkey(x) ∧ is_bird(x))) ::: An animal is either a monkey or a bird.\n∀x (is_bird(x) → can_fly(x)) ::: All birds fly.\n∀x (is_animal(x) → breathe(x)) ::: All animals breathe.\n∀x (can_fly(x) → has_wings(x)) ::: If something can fly, then it has wings.\n¬(can_fly(\"rock\") ∧ is_bird(\"rock\")) → ¬(can_fly(\"rock\") ∧ breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n\nQuery:\n¬has_wings(\"rock\") ::: Rock does not have wings."
  },
  {
    "id": "FOLIO_dev_128",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has a wedding that is well-attended.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njohn ::: represents john\nPredicates:\nhas_wedding(x) ::: x has a wedding.\ntravel_to_paris(x) ::: x travels to Paris for his honeymoon.\nwell_attended(x) ::: x is well-attended.\nin_july(x) ::: x occurs in July.\nat_least_one_child(x) ::: x has at least one child.\nPremises:\n∀x (has_wedding(x) → at_least_one_child(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (travel_to_paris(x) → has_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (in_july(x) ∧ has_wedding(x) → travel_to_paris(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (has_wedding(x) ∧ well_attended(x) ∧ in_july(x)) ::: Some weddings in July are well-attended.\n(at_least_one_child(\"john\") → ¬travel_to_paris(\"john\") ∧ ¬has_wedding(\"john\")) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(has_wedding(\"john\") ∧ well_attended(\"john\")) → (in_july(\"john\") ∨ travel_to_paris(\"john\")) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\nhas_wedding(\"john\") ∧ well_attended(\"john\") ::: John has a wedding that is well-attended."
  },
  {
    "id": "FOLIO_dev_129",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John does not have a wedding that is well-attended.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njohn ::: represents john\nPredicates:\nhas_wedding(x) ::: x has a wedding.\ntravel_to_paris(x) ::: x travel to paris for his honeymoon.\nbelong_to(x,y) ::: x belong to y.\nhave_child(x) ::: x have at least one child.\noccur_in_july(x) ::: x occur in july.\nwell_attended(x) ::: x are well attended.\nPremises:\n∀x (has_wedding(x) → have_child(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (travel_to_paris(x) → has_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (occur_in_july(x) → travel_to_paris(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (has_wedding(\"john\") ∧ well_attended(\"john\")) ::: Some weddings in July are well-attended.\n∀x ((have_child(x) → ¬travel_to_paris(x)) ∧ (have_child(x) → ¬has_wedding(x))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n∀x ((well_attended(\"john\") → occur_in_july(\"john\")) ∨ (¬occur_in_july(\"john\") → travel_to_paris(\"john\"))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\n¬(has_wedding(\"john\") ∧ well_attended(\"john\")) ::: John does not have a wedding that is well-attended."
  },
  {
    "id": "FOLIO_dev_130",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has at least one child.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "To solve this problem, we need to carefully analyze each sentence and translate it into first-order logic formulas. We will use the rules of predicate naming and constants naming provided.\n\n## Step 1: Translate the sentences into first-order logic formulas\nLet's start by translating each sentence:\n\n- All people who have a wedding are people who have at least one child.\n∀x (has_wedding(x) → has_at_least_one_child(x))\n\n- All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x (travels_to_paris_for_honeymoon(x) → has_wedding(x))\n\n- All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∀x (has_wedding_in_july(x) → travels_to_paris_for_honeymoon(x))\n\n- Some weddings in July are well-attended.\n∃x (has_wedding_in_july(x) ∧ is_well_attended(x))\n\n- If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n∀x (has_at_least_one_child(\"john\") → ¬travels_to_paris_for_honeymoon(\"john\") ∧ ¬has_wedding(\"john\"))\n\n- If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n∀x (has_wedding(\"john\") ∧ is_well_attended(\"john\") → (has_wedding_in_july(\"john\") ∨ travels_to_paris_for_honeymoon(\"john\")))\n\n## Step 2: Determine the truth value of the query\nWe need to determine if John has at least one child.\n\nFrom the premises, we can deduce that:\n\n- If John has a wedding, then he has at least one child (by the first premise).\n- If John travels to Paris for his honeymoon, then he has a wedding (by the second premise), and thus he has at least one child.\n- If John has a wedding in July, then he travels to Paris for his honeymoon (by the third premise), and thus he has a wedding.\n\nHowever, we also know that if John has at least one child, then he does not travel to Paris for his honeymoon and does not have a wedding (by the fifth premise). This creates a contradiction.\n\n## Step 3: Resolve the contradiction\nSince there is a contradiction, we can conclude that the assumption \"John has at least one child\" must be false. Therefore, John does not have at least one child.\n\nThe final answer is: $\\boxed{False}$"
  },
  {
    "id": "FOLIO_dev_131",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njohn ::: represents john\nparis ::: represents paris\n\nPredicates:\nhas_wedding(x) ::: x has a wedding.\ntravels_to_pari_for_honeymoon(x) ::: x travels to Paris for honeymoon.\noccurs_in_july(x) ::: x occurs in July.\nwell_attended(x) ::: x is well attended\nhas_at_least_one_child(x) ::: x has at least one child.\n\nPremises:\n∀x (has_wedding(x) → has_at_least_one_child(x)) ::: All people who have a wedding are people who have at least one child.\n∀x (travels_to_pari_for_honeymoon(x) →  has_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n∀x ((occurs_in_july(x) ∧ has_wedding(x)) → travels_to_pari_for_honeymoon(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n∃x (has_wedding(x) ∧ occurs_in_july(x) ∧ well_attended(x)) ::: Some weddings in July are well-attended.\n(has_at_least_one_child(\"john\") → ¬travels_to_pari_for_honeymoon(\"john\") ∧  ¬has_wedding(\"john\")) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(has_wedding(\"john\") ∧ well_attended(\"john\")) → ((occurs_in_july(\"john\") ∧ has_wedding(\"john\")) ∨ (travels_to_pari_for_honeymoon(\"john\"))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n\nQuery:\n¬(has_wedding(\"john\") ∧  well_attended(\"john\")) ∧ ¬travels_to_pari_for_honeymoon(\"john\") ::: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon."
  },
  {
    "id": "FOLIO_dev_132",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Platypus are mammals with no teeth.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmammals ::: represents mammals\nplatypus ::: represents platypus\nhumans ::: represents humans\n\nPredicates:\nhave_teeth(x) ::: x have teeth.\n\nPremises:\n∃x (is_mammals(x) ∧ have_teeth(x)) ::: Some mammals have teeth.\n¬have_teeth(\"platypus\") ::: Platypus have no teeth.\nis_mammals(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\n\nQuery:\n(is_mammals(\"platypus\") ∧ ¬have_teeth(\"platypus\")) ::: Platypus are mammals with no teeth."
  },
  {
    "id": "FOLIO_dev_133",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Platypus are reptiles.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmammals ::: represents the group of mammals\nplatypus ::: represents platypus\nhumans ::: represents humans\nreptiles ::: represents the reptiles\n\nPredicates:\nhave_teeth(x) ::: x have teeth.\nis_mammal(x) ::: x is a mammal.\nis_reptile(x) ::: x is a reptile.\n\nPremises:\n∃x (is_mammal(x) ∧ have_teeth(x)) ::: Some mammals have teeth.\n¬have_teeth(\"platypus\") ::: Platypus have no teeth.\nis_mammal(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\n\nQuery:\nis_reptile(\"platypus\") ::: Platypus are reptiles."
  },
  {
    "id": "FOLIO_dev_134",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Humans are mammals.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmammals ::: represents mammals\nteeth ::: represents teeth\nplatypus ::: represents platypus\nhumans ::: represents humans\n\nPredicates:\nhave_teeth(x) ::: x has teeth.\nis_mammal(x) ::: x is a mammal.\n\nPremises:\n∃x (is_mammal(x) ∧ have_teeth(x)) ::: Some mammals have teeth.\n¬have_teeth(\"platypus\") ::: Platypus have no teeth.\nis_mammal(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\n\nQuery:\nis_mammal(\"humans\") ::: Humans are mammals."
  },
  {
    "id": "FOLIO_dev_135",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Space sucks.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nplungers ::: represents plungers\nvacuums ::: represents vacuums\nvampires ::: represents vampires\nspace ::: represents space\nduster ::: represents duster\n\nPredicates:\nsuck(x) ::: x sucks.\n\nPremises:\n∀x (is_plunger(x) → suck(x)) ::: Plungers suck.\n∀x (is_vacuum(x) → suck(x)) ::: Vacuums suck.\n∀x (is_vampire(x) → suck(x)) ::: Vampires suck.\n¬suck(\"duster\") ::: A duster is a household appliance that doesn't suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\n\nQuery:\nsuck(\"space\") ::: Space sucks.\n\nAnswer: TRUE"
  },
  {
    "id": "FOLIO_dev_136",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Space is a vampire.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nplungers ::: represents plungers\nvacuums ::: represents vacuums\nvampires ::: represents vampires\nspace ::: represents space\nduster ::: represents a duster\n\nPredicates:\nsuck(x) ::: x sucks.\nis_vacuum(x) ::: x is a vacuum.\nis_vampire(x) ::: x is a vampire.\nis_household_appliance(x) ::: x is a household appliance.\n\nPremises:\n∀x (is_plunger(x) → suck(x)) ::: Plungers suck.\n∀x (is_vacuum(x) → suck(x)) ::: Vacuums suck.\n∀x (is_vampire(x) → suck(x)) ::: Vampires suck.\n¬suck(\"duster\") ∧ is_household_appliance(\"duster\") ::: A duster is a household appliance that doesn't suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\n\nQuery:\nis_vampire(\"space\") ::: Space is a vampire."
  },
  {
    "id": "FOLIO_dev_137",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If something is a household appliance, it sucks.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nplunger ::: represents plunger\nvacuum ::: represents vacuum\nvampire ::: represents vampire\nspace ::: represents space\nduster ::: represents duster\n\nPredicates:\nis_plunger(x) ::: x is a plunger.\nis_vacuum(x) ::: x is a vacuum.\nis_vampire(x) ::: x is a vampire.\nsuck(x) ::: x sucks.\nis_appliance(x) ::: x is an appliance.\nis_household(x) ::: x is a household.\n\nPremises:\n∀x (is_plunger(x) → suck(x)) ::: Plungers suck.\n∀x (is_vacuum(x) → suck(x)) ::: Vacuums suck.\n∀x (is_vampire(x) → suck(x)) ::: Vampires suck.\nis_space(\"space\") ∧ is_vacuum(\"space\") ::: Space is a vacuum.\n∃x (¬suck(x) ∧ is_appliance(x) ∧ is_household(x) ∧ is_duster(x)) ::: A duster is a household appliance that doesn't suck.\n\nQuery:\n∀x ((is_appliance(x) ∧ is_household(x)) → suck(x)) ::: If something is a household appliance, it sucks."
  },
  {
    "id": "FOLIO_dev_138",
    "context": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmachine_learning_algorithms ::: represents machine learning algorithms\nsupervised_learning ::: represents supervised learning\nunsupervised_learning ::: represents unsupervised learning\nreinforcement_learning ::: represents reinforcement learning\nstate_of_the_art_text_summarization_model ::: represents the state of the art text summarization model\n\nPredicates:\nis_category(x, y) ::: x is a category of y.\nrequires_labelled_data(x) ::: x requires labelled data.\nis_state_of_the_art(x, y) ::: x is the state-of-the-art of y.\n\nPremises:\n∃x (is_category(\"supervised_learning\", \"machine_learning_algorithms\") ∧ is_category(\"unsupervised_learning\", \"machine_learning_algorithms\") ∧ is_category(\"reinforcement_learning\", \"machine_learning_algorithms\")) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n∀x (is_category(x, \"unsupervised_learning\") → ¬requires_labelled_data(x)) ::: Unsupervised learning doesn't require labelled data.\n∃x (is_state_of_the_art(\"state_of_the_art_text_summarization_model\", \"text_summarization\") ∧ is_trained_with(\"state_of_the_art_text_summarization_model\", \"machine_learning_algorithms\")) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n¬∃x (is_category(x, \"reinforcement_learning\") → requires_labelled_data(\"state_of_the_art_text_summarization_model\")) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\n∀x ∀y (requires_labelled_data(y) ∧ is_trained_with(y, x)) ::: The Machine Learning algorithm for training text summarization model requires labelled data.\n\nQuery:\n∃x (is_category(x, \"supervised_learning\") → requires_labelled_data(\"state_of_the_art_text_summarization_model\")) ::: Supervised learning is used to train the state-of-the-art text summarization model."
  },
  {
    "id": "FOLIO_dev_139",
    "context": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmachine_learning ::: represents machine learning\nsupervised_learning ::: represents supervised learning\nunsupervised_learning ::: represents unsupervised learning\nreinforcement_learning ::: represents reinforcement learning\n\nPredicates:\nis_category(x,y) ::: x is a category of y.\nrequires_labelled_data(x) ::: x requires labelled data.\nis_used_to_train(x, y) ::: x is used to train y.\nis_state_of_the_art(x) ::: x is state-of-the-art.\n\nPremises:\n∀x (is_category(\"supervised_learning\", \"machine_learning\") ∧ is_category(\"unsupervised_learning\", \"machine_learning\") ∧ is_category(\"reinforcement_learning\", \"machine_learning\")) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n¬requires_labelled_data(\"unsupervised_learning\") ::: Unsupervised learning doesn't require labelled data.\nis_state_of_the_art(\"text_summarization_model\") ∧ is_used_to_train(\"machine_learning\", \"text_summarization_model\") ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n¬is_used_to_train(\"reinforcement_learning\", \"text_summarization_model\") ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nrequires_labelled_data(\"machine_learning_algorithm_for_training_text_summarization_model\") ::: The Machine Learning algorithm for training text summarization model requires labelled data.\n\nQuery:\nis_used_to_train(\"unsupervised_learning\", \"text_summarization_model\") ::: Unsupervised learning is used to train the state-of-the-art text summarization model."
  },
  {
    "id": "FOLIO_dev_140",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is loved by children.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "To determine the truth value of the statement \"Ben is loved by children,\" we must follow the logical chain provided in the premises.\n\n1. If a cartoon character is funny, then it is popular.\n2. If a cartoon character is ugly, then it is not popular.\n3. If a cartoon character is loved by children, then it is funny.\n4. If a cartoon character is from The Simpsons, then it is loved by children.\n5. If a cartoon character is yellow, then it is from The Simpsons.\n6. Ben is either from The Simpsons or funny.\n\nGiven that the statement \"Ben is either from The Simpsons or funny\" is known to be true and using the premises provided:\n\n- If Ben is from The Simpsons (premise 4), then he is loved by children.\n- Alternatively, if Ben is funny (as per his other option in premise 6), then according to premise 3, being funny does not directly imply being loved by children, but it implies popularity. However, there's no direct link provided between being funny and being loved by children without the context of The Simpsons or another intermediary characteristic that would make him loved by children.\n\nThus, based on the information given:\n\n- If Ben is from The Simpsons, then he is loved by children (directly supported).\n- There is no direct evidence to support that if Ben is funny (and not from The Simpsons), he is loved by children. Being funny only guarantees popularity but does not directly imply being loved by children based on the premises given.\n\nTherefore, the statement \"Ben is loved by children\" cannot be conclusively determined as true or false without additional information about Ben's characteristics that would link him to being loved by children (e.g., being from The Simpsons, which has a direct premise supporting this conclusion). Hence, it remains uncertain based on the provided premises."
  },
  {
    "id": "FOLIO_dev_141",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is ugly or yellow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nben ::: represents ben\nPredicates:\nis_funny(x) ::: x is funny.\nis_popular(x) ::: x is popular.\nis_ugly(x) ::: x is ugly.\nloved_by_children(x) ::: x is loved by children.\nfrom_the_simpsons(x) ::: x is from the simpsons.\nis_yellow(x) ::: x is yellow.\nPremises:\n∀x (is_funny(x) → is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n∀x (is_ugly(x) → ¬is_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n∀x (loved_by_children(x) → is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n∀x (from_the_simpsons(x) → loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n∀x (is_yellow(x) → from_the_simpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(from_the_simpsons(\"ben\") ∨ is_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\n(is_ugly(\"ben\") ∨ is_yellow(\"ben\")) ::: Ben is ugly or yellow.\n\nTo answer the query, we need to analyze the premises and see if we can deduce that \"Ben is ugly or yellow\" is true, false, or uncertain.\n\nFrom premise 5, we know that if a cartoon character is from The Simpsons, then it is loved by children. And from premise 4, we know that if a cartoon character is loved by children, then it is funny.\n\nSo, if Ben is from The Simpsons (from_the_simpsons(\"ben\")), then he is loved by children (loved_by_children(\"ben\")) and therefore funny (is_funny(\"ben\")). \n\nHowever, being funny does not necessarily mean that Ben is yellow. Yellow is a characteristic of The Simpsons, but we do not have any information that directly links funniness to the color yellow.\n\nOn the other hand, if Ben is funny (is_funny(\"ben\")), then he is popular (is_popular(\"ben\") by premise 1). And being ugly would make him unpopular (¬is_popular(x) from premise 2), so we can infer that if Ben is funny, then he is not ugly.\n\nTherefore, the statement \"Ben is ugly or yellow\" cannot be definitively classified as true or false based on the given premises. The best answer is uncertain."
  },
  {
    "id": "FOLIO_dev_142",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is either yellow and ugly or neither yellow nor ugly.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nben ::: represents ben\nPredicates:\nis_cartoon_character(x) ::: x is a cartoon character.\nis_funny(x) ::: x is funny.\nis_popular(x) ::: x is popular.\nis_ugly(x) ::: x is ugly.\nloved_by_children(x) ::: x is loved by children.\nfrom_the_simpsons(x) ::: x is from The Simpsons.\nis_yellow(x) ::: x is yellow.\nPremises:\n∀x (is_cartoon_character(x) ∧ is_funny(x) →  is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n∀x (is_cartoon_character(x) ∧ is_ugly(x) → ¬is_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n∀x (is_cartoon_character(x) ∧ loved_by_children(x) →  is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n∀x (is_cartoon_character(x) ∧ from_the_simpsons(x) →  loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n∀x (is_cartoon_character(x) ∧ is_yellow(x) →  from_the_simpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(is_from_the_simpsons(\"ben\") ∧ ¬is_funny(\"ben\")) ∨ (¬(is_from_the_simpsons(\"ben\") ∧ ¬is_funny(\"ben\")) ∧ is_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\n¬((is_yellow(\"ben\") ∧ is_ugly(\"ben\")) ∧ ((is_yellow(\"ben\") ∧ is_ugly(\"ben\")) ∨ (is_yellow(\"ben\") ∧ is_ugly(\"ben\")))) ::: Ben is either yellow and ugly or neither yellow nor ugly."
  },
  {
    "id": "FOLIO_dev_143",
    "context": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Heck cattle are artificially selected.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\naurochs ::: represents the aurochs\nheck_cattle ::: represents heck cattle\ndomestic_animals ::: represents domestic animals\nPredicates:\nis_form(x,y) ::: x is a form of y.\nis_selective_breeding(x) ::: x is a selective breeding.\nresmble(x, y) ::: x resemble y.\nare_extinct(x) ::: x are extinct.\nartificially_selected(x) ::: x are artificially selected.\nPremises:\n∀x (is_form(\"breeding_back\", \"artificial_selection\") ∧ is_selective_breeding(\"breeding_back\")) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\n Heck_cattle(\"heck_cattle\" , \"aurochs\")::: Heck cattle were bred-back in the 19 20s to resemble the aurochs.\n∃x (is_animal(x) ∧ are_extinct(x)) ::: Some animals to be bred-back resemble animals that are extinct.\nQuery:\nartificially_selected(\"heck_cattle\") ::: Some Heck cattle are artificially selected."
  },
  {
    "id": "FOLIO_dev_144",
    "context": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Aurochs are extinct.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\n    heck_cattle ::: represents heck cattle\n    aurochs ::: represents aurochs\n    Predicates:\n    is_animal(x) ::: x is an animal.\n    resemble(x,y) ::: x resembles y.\n    are_extinct(x) ::: x are extinct.\n    bred_back(x) ::: x are bred-back.\n    Premises:\n    ∀x (bred_back(x) → resemble(x, \"aurochs\")) ::: Some animals to be bred-back resemble animals that are extinct.\n    ∃x (is_animal(x) ∧ bred_back(x)) ::: Heck cattle were bred-back in the 19**20s to resemble the aurochs. \n    is_animal(\"heck_cattle\") ::: Heck cattle are animals.\n     is_animal(\"aurochs\") ::: Aurochs are animals.\n    Query:\n    are_extinct(\"aurochs\") ::: Aurochs are extinct."
  },
  {
    "id": "FOLIO_dev_145",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jerry is young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\n\nPredicates:\nis_student(x) ::: x is a student\nis_human(x) ::: x is human\nstudies(x) ::: x studies\nteaches(x) ::: x teaches\nis_young(x) ::: x is young\nis_manager(x) ::: x is manager\n\nPremises:\n∀x (is_student(x) → is_human(x)) ::: All students are humans.\n∀x (studies(x) → is_student(x)) ::: If someone studies, then they are a student.\n∀x ((¬studies(x) ∧ teaches(x)) ∨ (studies(x) ∧ ¬teaches(x))) ::: A person either studys or teaches.\n∀x (is_young(x) → ¬teaches(x)) ::: No young person teaches.\n(¬teaches(\"jerry\") ∧ ¬is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") ∨ is_student(\"rose\")) ::: Rose is young or a student.\n\nQuery:\nis_young(\"jerry\") ::: Jerry is young."
  },
  {
    "id": "FOLIO_dev_146",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jerry is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\n\nPredicates:\nis_young(x) ::: x is young\nstudies(x) ::: x studies\nteaches(x) ::: x teaches\nis_human(x) ::: x is a human.\nis_student(x) ::: x is a student.\nis_manager(x) ::: x is a manager.\n\nPremises:\n∀x (is_student(x) →  is_human(x)) ::: All students are humans.\n∃x (studies(x) ∧ is_student(x)) ::: If someone studies, then they are a student.\n∀x ((studies(x) ∧ ¬teaches(x)) ∨ (¬studies(x) ∧ teaches(x))) ::: A person either studies or teaches.\n∀x (is_young(x) → ¬teaches(x)) ::: No young person teaches.\n(¬teaches(\"jerry\") ∧ ¬is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") ∨  is_student(\"rose\")) ::: Rose is young or a student.\n\nQuery:\n¬is_young(\"jerry\") ::: Jerry is not young."
  },
  {
    "id": "FOLIO_dev_147",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rose is a human or a manager.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nrose ::: represents rose\njerry ::: represents jerry\n\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_manager(x) ::: x is a manager.\nis_young(x) ::: x is young.\n\nPremises:\n∀x (is_student(x) → is_human(x)) ::: All students are humans.\n∀x (studies(x) → is_student(x)) ::: If someone studies, then they are a student.\n∀x ((¬studies(x) ∧ teaches(x)) ∨ (studies(x) ∧ ¬teaches(x))) ::: A person either studies or teaches.\n∀x (is_young(x) → ¬teaches(x)) ::: No young person teaches.\n(¬teaches(\"jerry\") ∧ ¬is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") ∨ is_student(\"rose\")) ::: Rose is young or a student.\n\nQuery:\n(is_human(\"rose\") ∨ is_manager(\"rose\")) ::: Rose is a human or a manager."
  },
  {
    "id": "FOLIO_dev_148",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rose is a human or Jerry is a manager.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\n\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is manager.\n\nPremises:\n∀x (is_student(x) → is_human(x)) ::: All students are humans.\n∀x (studies(x) →  is_student(x)) ::: If someone studies, then they are a student.\n∀x ((studies(x) ∧ ¬teaches(x)) ∨ (¬studies(x) ∧ teaches(x))) ::: A person either studys or teaches.\n∀x (is_young(x) → ¬teaches(x)) ::: No young person teaches.\n(¬teaches(\"jerry\") ∧ ¬is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") ∨  is_student(\"rose\")) ::: Rose is young or a student.\n\nQuery:\n∀x (is_human(\"rose\") ∨  is_manager(\"jerry\")) ::: Rose is a human or Jerry is a manager."
  },
  {
    "id": "FOLIO_dev_149",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? It is not true that Rose is a student and Jerry is a human.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text and rules for translating sentences into first-order logic formulas, I will go through each sentence and translate it accordingly.\n\nConstants:\n- jerry ::: represents Jerry\n- rose ::: represents Rose\n\nPredicates:\n- is_student(x) ::: x is a student\n- is_human(x) ::: x is human\n- studies(x) ::: x studies\n- teaches(x) ::: x teaches\n- is_young(x) ::: x is young\n- is_manager(x) ::: x is manager\n\nPremises:\n\n1. All students are humans.\n∀x (is_student(x) → is_human(x)) \n\n2. If someone studies, then they are a student.\n∀x (studies(x) → is_student(x))\n\n3. A person either studies or teaches.\n∀x ((studies(x) ∧ ¬teaches(x)) ∨ (¬studies(x) ∧ teaches(x)))\n\n4. No young person teaches.\n∀x (is_young(x) → ¬teaches(x))\n\n5. Jerry neither teaches nor is a manager.\n¬teaches(\"jerry\") ∧ ¬is_manager(\"jerry\")\n\n6. Rose is young or a student.\n(is_young(\"rose\") ∨ is_student(\"rose\"))\n\nQuery:\nIt is not true that Rose is a student and Jerry is a human.\n¬(is_student(\"rose\") ∧ is_human(\"jerry\"))\n\nAfter applying the premises to the query, we can deduce the following:\n\nFrom premise 1: If Rose is a student, then she is a human. (is_student(\"rose\") → is_human(\"rose\"))\nSince it's given that Rose is young or a student ((is_young(\"rose\") ∨ is_student(\"rose\"))), and from premise 4 we know no young person teaches (which doesn't directly relate to the query but gives us information about young people), we cannot directly determine if Rose is a student or not.\n\nHowever, looking at Jerry: From premise 5, we know Jerry neither teaches nor is a manager (¬teaches(\"jerry\") ∧ ¬is_manager(\"jerry\")), which does not provide direct information about Jerry being human. But since it's given that \"All students are humans\" (∀x (is_student(x) → is_human(x))), and there is no information suggesting Jerry is not human, we cannot directly deduce from the premises if Jerry is a human or not based on the provided information.\n\nTherefore, considering the direct implications of the premises on the query ¬(is_student(\"rose\") ∧ is_human(\"jerry\")), without additional assumptions, it's uncertain whether Rose is a student and Jerry is a human because we lack explicit statements directly linking these facts together in the given premises."
  },
  {
    "id": "FOLIO_dev_150",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Neapolitan Chronicles is an English book.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nnew_vessel_press ::: represents new vessel press\nneapolitan_chronicles ::: represents neapolitan chronicles\npalace_of_flies ::: represents palace of flies\nitalian ::: represents italian\nPredicates:\nis_publishing_house(x) ::: x is a publishing house.\nspecializes(x, y) ::: x specializes in y.\nis_book(x) ::: x is a book.\npublished_by(x, y) ::: x is published by y.\ntranslated_from(x, y) ::: x was translated from language y.\nis_english(x) ::: x is in english.\n\nPremises:\nis_publishing_house(\"new_vessel_press\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n∀x (published_by(x, \"new_vessel_press\") → is_book(x))::: All of New Vessel Press's published books are in English.\npublished_by(\"neapolitan_chronicles\", \"new_vessel_press\") ::: Neapolitan Chronicles is a book published by New Vessel Press.\ntranslated_from(\"neapolitan_chronicles\", \"italian\") ::: Neapolitan Chronicles was translated from Italian.\npublished_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\n\n∀x (is_english(x) → ∀y (published_by(y, x) ∧ ¬translated_from(y,x)) ) ::: If something is in English then all the books published by it are not translated from another language\n\nQuery:\nis_english(\"neapolitan_chronicles\") ::: Neapolitan Chronicles is an English book."
  },
  {
    "id": "FOLIO_dev_151",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, there is no mention of Harry Potter being published by New Vessel Press. The premises only discuss three books: Neapolitan Chronicles, Palace of Flies, and their translations/publishing status with New Vessel Press. Therefore, we cannot determine whether Harry Potter was published by New Vessel Press or not based on the given information.\n\nThe answer is uncertain."
  },
  {
    "id": "FOLIO_dev_152",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Palace of Flies was translated from Italian.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text and the rules for parsing sentences into first-order logic formulas, I will extract the relevant information and represent it in the required format.\n\n**Constants:**\n\n* new_vessel_press ::: represents New Vessel Press\n* neapolitan_chronicles ::: represents Neapolitan Chronicles\n* palace_of_flies ::: represents Palace of Flies\n* italian ::: represents Italian\n\n**Predicates:**\n\n* is_publishing_house(x) ::: x is a publishing house.\n* specializes_in(x, y) ::: x specializes in y.\n* is_book(x) ::: x is a book.\n* published_by(x, y) ::: x was published by y.\n* translated_from(x, y) ::: x was translated from y.\n\n**Premises:**\n\n1. is_publishing_house(\"new_vessel_press\") ∧ specializes_in(\"new_vessel_press\", \"foreign_literature_into_english\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n2. ∀x (published_by(x, \"new_vessel_press\") → is_book(x) ∧ language_of(x, \"english\")) ::: All of New Vessel Press's published books are in English.\n3. is_book(\"neapolitan_chronicles\") ∧ published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ::: Neapolitan Chronicles is a book published by New Vessel Press.\n4. translated_from(\"neapolitan_chronicles\", \"italian\") ::: Neapolitan Chronicles was translated from Italian.\n5. is_book(\"palace_of_flies\") ∧ published_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\n\n**Query:**\n\ntranslated_from(\"palace_of_flies\", \"italian\") ::: Palace of Flies was translated from Italian.\n\nBased on the premises, we can conclude that the query is uncertain because there is no information provided about the language from which Palace of Flies was translated."
  },
  {
    "id": "FOLIO_dev_153",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Remy visits the office supply store regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nremy ::: represents remy\nPredicates:\nown_monitor(x) ::: x owns a large desktop monitor at their home.\nwork_at_home(x) ::: x works regularly and often at home.\nhave_impressive_office(x) ::: x has a fully stocked and impressive home office.\nspend_time_tidying(x) ::: x spends their free time tidying and organizing the spaces in their homes.\nvisit_supply_store(x) ::: x visits the office supply store regularly.\ngo_to_bed_late(x) ::: x goes to bed late and wakes up every day after noon.\n\nPremises:\n∀x (own_monitor(x) → work_at_home(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (have_impressive_office(x) → own_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n∀x (work_at_home(x) → spend_time_tidying(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n∀x (work_at_home(x) → visit_supply_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n∀x (spend_time_tidying(x) → ¬go_to_bed_late(x)) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n((go_to_bed_late(\"remy\") ∧ spend_time_tidying(\"remy\")) ∨ (¬go_to_bed_late(\"remy\") ∧ ¬spend_time_tidying(\"remy\"))) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n\nQuery:\nvisit_supply_store(\"remy\") ::: Remy visits the office supply store regularly.\n\nAnswer: \nUNCERTAIN"
  },
  {
    "id": "FOLIO_dev_154",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nremy ::: represents remy\nPredicates:\nhas_large_monitor(x) ::: x has a large desktop monitor at their home.\nwork_regularly_at_home(x) ::: x works regularly and often at home.\nhas_home_office(x) ::: x has a fully stocked and impressive home office.\nspend_free_time_tidying(x) ::: x spends their free time tidying and organizing the spaces in their homes.\nvisit_office_supply_store(x) ::: x visits the office supply store regularly.\ngo_bed_late_and_wake_after_noon(x) ::: x goes to bed late and wake up every day after noon.\nPremises:\n∀x (has_large_monitor(x) → work_regularly_at_home(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n∀x (has_home_office(x) → has_large_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n∀x (work_regularly_at_home(x) → spend_free_time_tidying(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n∀x (work_regularly_at_home(x) → visit_office_supply_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n∀x (spend_free_time_tidying(x) → ¬go_bed_late_and_wake_after_noon(x)) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n(go_bed_late_and_wake_after_noon(\"remy\") ∧ spend_free_time_tidying(\"remy\")) ∨ (¬go_bed_late_and_wake_after_noon(\"remy\") ∧ ¬spend_free_time_tidying(\"remy\")) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nQuery:\nhas_home_office(\"remy\") ∧ visit_office_supply_store(\"remy\") ::: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\n\nThis query is uncertain because we do not have enough information to conclude that Remy has a fully stocked and impressive home office and visits the office supply store regularly. We know from the premises that if Remy spends their free time tidying and organizing the spaces in their home, then they work regularly and often at home, which would imply that they visit the office supply store regularly. However, we do not have enough information to conclude that Remy actually spends their free time tidying and organizing the spaces in their home."
  },
  {
    "id": "FOLIO_dev_155",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "I'll help you parse the text into first-order logic formulas. However, I need to clarify that the output format will be slightly different from what you provided.\n\nPlease note that I'll use a more standardized notation for first-order logic, where predicates are represented as capital letters (e.g., `OWN`, `WORK`, etc.) and constants are represented as lowercase letters (e.g., `remy`, etc.). Variables will be represented as lowercase letters from the set {x, y, z, u, v, w}.\n\nHere is the parsed text:\n\n**Constants:**\n\n* remy\n* home\n\n**Predicates:**\n\n* OWN(x, y) - x owns a large desktop monitor at their home\n* WORK(x) - x works regularly and often at home\n* STOCKED(x) - x has a fully stocked and impressive home office\n* TIDY(x) - x spends their free time tidying and organizing the spaces in their homes\n* VISIT(x) - x visits the office supply store regularly\n* LATE(x) - x goes to bed late and wakes up every day after noon\n\n**Premises:**\n\n1. ∀x (OWN(x, home) → WORK(x)) - If people own a large desktop monitor at their home, then they work regularly and often at home.\n2. ∀x (STOCKED(x) → OWN(x, home)) - All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n3. ∀x (WORK(x) → TIDY(x)) - All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n4. ∀x (WORK(x) → VISIT(x)) - All people who work regularly and often at home visit the office supply store regularly.\n5. ∀x (TIDY(x) → ¬LATE(x)) - If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n6. (LATE(remy) ∧ TIDY(remy)) ∨ (¬LATE(remy) ∧ ¬TIDY(remy)) - Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\n\n**Query:**\n\n¬(TIDY(remy) ∨ STOCKED(remy)) - If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\n\nPlease note that this is just one possible way to formalize the given text. Depending on the specific requirements and nuances of the problem, different formulations may be more or less suitable."
  },
  {
    "id": "FOLIO_dev_156",
    "context": "All humans are mortal. All Greeks are humans.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Greeks are mortal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Predicates:\nis_human(x) ::: x is human.\nis_greek(x) ::: x is greek.\nis_mortal ::: x is mortal.\n\nPremises:\n∀x (is_human(x) →  is_mortal(x)) ::: All humans are mortal.\n∀x (is_greek(x) → is_human(x)) ::: All Greeks are humans.\n\nQuery:\n∃x(is_greek(x) ∧ is_mortal(x)) ::: Some Greeks are mortal."
  },
  {
    "id": "FOLIO_dev_157",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James has a part-time job offered by the university.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njames ::: represents james\njack ::: represents jack\nprofessor_david ::: represents professor david\nPredicates:\nis_student(x) ::: x is a student.\nwork_in_library(x) ::: x works in library.\nhas_part_time_job_offered_by_university(x) ::: x has part-time job offered by university.\ntake_database_course(x) ::: x takes database course.\nfrom_computer_science_department(x) ::: x is from computer science department.\ninstructed_by_professor_david(x) ::: x is instructed by professor david\nwork_in_lab(x) ::: x works in lab.\nPremises:\n¬∃x (is_student(x) ∧ work_in_library(x) ∧ from_computer_science_department(x)) ::: No students who work in the library are from the computer science department.\n∀x (∃y (has_part_time_job_offered_by_university(y) → work_in_library(y))) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (∃y(take_database_course(x) → from_computer_science_department(y)))::: All students who take the database course are from the computer science department.\n∀x (∃y(instructed_by_professor_david(x) → take_database_course(y)) ::: All students instructed by professor David are taking the database course.\n∀x (∃y(work_in_lab(x) → instructed_by_professor_david(y))::: All students working in the lab are instructed by professor David.\nis_student(\"james\") ∧ work_in_lab(\"james\") ::: James is a student working in the lab.\n¬has_part_time_job_offered_by_university(\"jack\") ∧ ¬work_in_lab(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\n∃x (is_student(\"james\") → has_part_time_job_offered_by_university(\"james\")) ::: James has a part-time job offered by the university."
  },
  {
    "id": "FOLIO_dev_158",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James does not have a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njames ::: represents james\njack ::: represents jack\nprofessor_david ::: represents professor david\n\nPredicates:\nis_student(x) ::: x is a student.\nhas_part_time_job_offered_by_university(x) ::: x has a part-time job offered by the university.\nworks_in_library(x) ::: x works in the library.\nfrom_computer_science_department(x) ::: x is from computer science department.\ntakes_database_course(x) ::: x takes database course.\ninstructed_by_professor_david(x) ::: x is instructed by professor david.\nworks_in_lab(x) ::: x works in lab.\n\nPremises:\n∀x (is_student(x) ∧ works_in_library(x) → ¬from_computer_science_department(x)) ::: No students who work in the library are from the computer science department.\n∀x ((has_part_time_job_offered_by_university(x) → is_student(x)) ∧ (has_part_time_job_offered_by_university(x) → works_in_library(x))) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (is_student(x) ∧ takes_database_course(x) → from_computer_science_department(x)) ::: All students who take the database course are from the computer science department.\n∀x ((instructed_by_professor_david(x) → is_student(x)) ∧ (instructed_by_professor_david(x) → takes_database_course(x))) ::: All students instructed by professor David are taking the database course.\n∀x ((works_in_lab(x) → is_student(x)) ∧ (works_in_lab(x) → instructed_by_professor_david(x))) ::: All students working in the lab are instructed by professor David.\nis_student(\"james\") ∧ works_in_lab(\"james\") ::: James is a student working in the lab.\n¬(has_part_time_job_offered_by_university(\"jack\")) ∧ ¬works_in_lab(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\n\nQuery:\n¬has_part_time_job_offered_by_university(\"james\") ::: James does not have a part-time job offered by the university."
  },
  {
    "id": "FOLIO_dev_159",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text and question, I will follow the format to the letter.\n\n\nConstants:\njames ::: represents james\njack ::: represents jack\nlab ::: represents the lab\nuniversity ::: represents the university\ncomputer_science_department ::: represents the computer science department\ndatabase_course ::: represents the database course\n\nPredicates:\nis_student(x) ::: x is a student.\nwork_in_library(x) ::: x works in the library.\nhas_part_time_job_offered_by_university(x) ::: x has part-time job offered by university.\nfrom_computer_science_department(x) ::: x is from computer science department.\ntake_database_course(x) ::: x takes database course.\ninstructed_by_professor_david(x) ::: x is instructed by professor David.\nwork_in_lab(x) ::: x works in lab.\n\nPremises:\n¬∃x (is_student(x) ∧ work_in_library(x) ∧ from_computer_science_department(x)) ::: No students who work in the library are from the computer science department.\n∀x ((has_part_time_job_offered_by_university(x) → work_in_library(x))) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (take_database_course(x) → from_computer_science_department(x)) ::: All students who take the database course are from the computer science department.\n∀x (instructed_by_professor_david(x) → take_database_course(x)) ::: All students instructed by professor David are taking the database course.\n∀x (work_in_lab(x) → instructed_by_professor_david(x)) ::: All students working in the lab are instructed by professor David.\nis_student(\"james\") ∧ work_in_lab(\"james\") ::: James is a student working in the lab.\n¬(has_part_time_job_offered_by_university(\"jack\")) ∧ ¬work_in_lab(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\n\nQuery:\n(take_database_course(\"james\") ∨ has_part_time_job_offered_by_university(\"james\")) ::: James either takes the database course or has a part-time job offered by the university."
  },
  {
    "id": "FOLIO_dev_160",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jack takes the database course.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\njames ::: represents james\njack ::: represents jack\nprofessor_david ::: represents professor david\n\nPredicates:\nis_student(x) ::: x is a student.\nworks_in_library(x) ::: x works in library.\nfrom_computer_science_department(x) ::: x is from computer science department.\nhas_part_time_job_offered_by_university(x) ::: x has part-time job offered by university.\ntakes_database_course(x) ::: x takes database course.\ninstructed_by_professor_david(x) ::: x instructed by professor david.\nworks_in_lab(x) ::: x works in lab.\n\nPremises:\n∀x (is_student(x) ∧ works_in_library(x) → ¬from_computer_science_department(x)) ::: No students who work in the library are from the computer science department.\n∀x (has_part_time_job_offered_by_university(x) → is_student(x) ∧ works_in_library(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n∀x (takes_database_course(x) → from_computer_science_department(x)) ::: All students who take the database course are from the computer science department.\n∀x (instructed_by_professor_david(x) → takes_database_course(x)) ::: All students instructed by professor David are taking the database course.\n∀x (works_in_lab(x) → instructed_by_professor_david(x)) ::: All students working in the lab are instructed by professor David.\nis_student(\"james\") ∧ works_in_lab(\"james\") ::: James is a student working in the lab.\n¬has_part_time_job_offered_by_university(\"jack\") ∧ ¬works_in_lab(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\n\nQuery:\ntakes_database_course(\"jack\") ::: Jack takes the database course."
  },
  {
    "id": "FOLIO_dev_161",
    "context": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, we can represent it using first-order logic as follows:\n\nConstants: george\nPredicates:\nlikes(x,y) : x likes y\nwants_to_compose(x) : x wants to compose\nhas_access_to_program(x) : x has access to a program\ncan_compose(x) : x can compose\ncompose(x) : x will compose\n\nPremises:\n\n∀x (likes(x, \"music\") → wants_to_compose(x)) : If George likes music, he wants to compose.\n∀x (has_access_to_program(x) → can_compose(x)) : If George has access to a program, he can compose.\n∀x ((can_compose(x) ∧ wants_to_compose(x)) → compose(x)) : If George can compose and wants to compose, he will compose.\n\nQuery:\n(likes(\"george\", \"music\") ∧ has_access_to_program(\"george\")) → compose(\"george\") : If George likes music and has access to a program, he will compose.\n\nThis query can be evaluated by applying the rules of inference in first-order logic. Let's break it down:\n\n1. From the first premise, we know that if George likes music, he wants to compose: likes(\"george\", \"music\") → wants_to_compose(\"george\")\n2. From the second premise, we know that if George has access to a program, he can compose: has_access_to_program(\"george\") → can_compose(\"george\")\n3. Using conjunction introduction ( ∧I), we combine the antecedents of steps 1 and 2: (likes(\"george\", \"music\") ∧ has_access_to_program(\"george\")) → (wants_to_compose(\"george\") ∧ can_compose(\"george\"))\n4. Applying the third premise to the consequent of step 3, we get: (wants_to_compose(\"george\") ∧ can_compose(\"george\")) → compose(\"george\")\n5. Finally, using hypothetical syllogism (HS), we combine steps 3 and 4: (likes(\"george\", \"music\") ∧ has_access_to_program(\"george\")) → compose(\"george\")\n\nTherefore, the query is true. If George likes music and has access to a program, he will indeed compose.\n\nFinal Answer: The final answer is $\\boxed{TRUE}$."
  },
  {
    "id": "FOLIO_dev_162",
    "context": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If George will not compose, George can not compose.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "To answer this question accurately, we need to formalize the given statements into logical expressions and then determine the truth value of the query based on these expressions.\n\nLet's define the predicates as follows:\n\n* L: likes music\n* W: wants to compose\n* C: can compose\n* P: has access to a program\n\nThe premises in first-order logic are:\n\n1. ∀x (L(x) → W(x)) - If George likes music, he wants to compose.\n2. ∀x (P(x) → C(x)) - If George has access to a program, he can compose.\n3. ∀x ((C(x) ∧ W(x)) → ∃x Compose(x)) - If George can compose and wants to compose, he will compose.\n\nHowever, we must correct the last premise for clarity in logic representation. It should be more accurately represented as:\n\n3. ∀x ((C(x) ∧ W(x)) → Compose(x)) - If George can compose and wants to compose, he will compose.\n\nThe query is: \"If George will not compose, George cannot compose.\" In logical terms, this translates to:\n\n¬Compose(George) → ¬C(George)\n\nTo evaluate this query, let's analyze the premises in reverse order of dependency, starting with premise 3.\n\nFrom premise 3, we know that if George can compose and wants to compose, he will compose. The contrapositive of this statement (which is logically equivalent but more useful for our purpose) would be:\n\n¬Compose(George) → ¬(C(George) ∧ W(George))\n\nThis implies either George cannot compose or does not want to compose (or both), but it directly supports the idea that if George will not compose, there's a condition related to his ability and desire.\n\nFrom premise 2, we understand that having access to a program is sufficient for George to be able to compose. However, this does not directly help us with the query since it doesn't address the situation where George cannot compose directly. It's more about what enables him to compose rather than what prevents him from composing.\n\nPremise 1 connects liking music to wanting to compose but does not provide direct information about the ability or inability to compose.\n\nGiven these premises, we see that there is no direct logical path from \"George will not compose\" to \"George cannot compose\" without making some assumptions beyond what's provided. The premises guide us on conditions under which George can or wants to compose but do not explicitly cover all scenarios of why he might not compose (e.g., lack of access to a program, personal issues unrelated to music liking).\n\nTherefore, based on the given information and logical analysis, we conclude that the statement \"If George will not compose, George cannot compose\" is uncertain. It could be true under certain conditions (like if his inability to compose is directly related to his ability or desire), but there are scenarios where it might not hold (e.g., he wants to but lacks access, or other reasons for not composing that aren't covered by the premises)."
  },
  {
    "id": "FOLIO_dev_163",
    "context": "A hawk never lands. Some birds are hawks.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All birds land",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\n    hawk ::: represents hawk\nPredicates:\n    is_hawk(x) ::: x is a hawk.\n    is_bird(x) ::: x is a bird.\n    lands(x) ::: x lands.\n\nPremises:\n∀x (is_hawk(x) → ¬lands(x)) ::: A hawk never lands.\n∃x (is_bird(x) ∧ is_hawk(x)) ::: Some birds are hawks.\n\nQuery:\n∀x (is_bird(x) → lands(x)) ::: All birds land\n\nThe statement in the query is uncertain."
  },
  {
    "id": "FOLIO_dev_164",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmonday ::: represents monday\ntime_8_pm ::: represents time at 8 pm\ntv ::: represents tv\nbachelor ::: represents the bachelor\nbreaking_bad ::: represents breaking bad\n\nPredicates:\nis_on(x, y) ::: x is on y.\ngives_out(x, y) ::: x gives out y.\nportrays(x, y) ::: x portrays y.\nis_show(x) ::: x is a show.\nis_reality_tv_show(x) ::: x is reality tv show.\n\nPremises:\n∃x (is_on(\"monday\", x) ∧ time_8_pm(x) ∧ is_on(\"tv\", x) ∧ gives_out(\"roses\", \"tv\")) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x ((gives_out(\"roses\", \"x\") ∧ is_on(\"tv\", \"x\")) → is_on(\"bachelor\", \"x\")) ::: Every rose given out on TV is on the Bachelor.\n∀x (is_on(\"bachelor\", x) → portrays(x, \"real_people\")) ::: Everything on the Bachelor portrays the lives of real people.\n∀x ((portrays(\"real_people\", x) ∧ is_show(x)) → is_reality_tv_show(x)) ::: All shows portraying the lives of real people are reality TV shows.\n¬is_reality_tv_show(breaking_bad) ::: Breaking Bad is not a reality TV show.\n\nQuery:\n∃x (is_on(\"monday\", \"breaking_bad\") ∧ time_8_pm(x) ∧ ¬is_reality_tv_show(x)) ::: Breaking Bad is on Monday at 8 pm."
  },
  {
    "id": "FOLIO_dev_165",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nmonday ::: represents monday\ntv ::: represents tv\nbachelor ::: represents bachelor\nbreaking_bad ::: represents breaking bad\nPredicates:\nis_day(x) ::: x is a day.\nat_time(x, y) ::: x happens at time y.\ngiven_out_on_tv(x) ::: x are given out on TV.\nportrays_lives_of_real_people(x) ::: x portrays the lives of real people.\nis_reality_tv_show(x) ::: x is a reality tv show.\nis_tv_show(x) ::: x is a tv show.\nPremises:\n∃x (is_day(\"monday\") ∧ at_time(x, \"8 pm\") ∧ given_out_on_tv(x)) ::: On some Mondays at 8 pm, roses are given out on TV.\n∀x ∀y (given_out_on_tv(x) → is_bachelor(y)) ::: Every rose given out on TV is on the Bachelor.\n∀x (portrays_lives_of_real_people(x) → is_reality_tv_show(x)) ::: Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows.\n¬is_reality_tv_show(\"breaking_bad\") ::: Breaking Bad is not a reality TV show.\nQuery:\n∃x (given_out_on_tv(\"breaking_bad\") ∧ at_time(\"monday\", \"8 pm\")) ::: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm."
  },
  {
    "id": "FOLIO_dev_166",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "To answer this question accurately, let's analyze the given statements and construct a logical pathway to evaluate the query.\n\nGiven:\n\n1. Some Mondays at 8 pm, roses are given out on TV.\n2. Every rose given out on TV is on the Bachelor.\n3. Everything on the Bachelor portrays the lives of real people.\n4. All shows portraying the lives of real people are reality TV shows.\n5. Breaking Bad is not a reality TV show.\n\nThe query to evaluate is: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n\nFrom statement 2, we know that every rose given out on TV is on the Bachelor. This means if roses are being given out on a show, that show must be the Bachelor because there's no mention of any other show giving out roses. However, Breaking Bad is specified in the query.\n\nGiven statement 5 tells us that Breaking Bad is not a reality TV show, but this does not directly impact our analysis about roses or their timing since it pertains more to the nature of the shows. However, knowing Breaking Bad's genre (not being a reality TV show) doesn't inherently prevent it from having segments where roses could be given out (in theory), though there's no information provided that suggests this ever happens on Breaking Bad.\n\nThe crucial point here is the implication that if roses are given out during any TV show (as per statement 1 and 2), they would have to be part of a segment or episode of \"the Bachelor\" because only then can we associate it with being given out on some Mondays at 8 pm. However, since Breaking Bad is specifically mentioned in the query and there's no direct or indirect information that links roses given during Breaking Bad to Monday at 8 pm (as our logical premise is based on roses being given out on \"the Bachelor\" at that time), we cannot logically conclude that if roses are given out during Breaking Bad, it would be on a Monday at 8 pm.\n\nGiven the statements provided and the specific query about roses given during Breaking Bad, without direct or implied connections between Breaking Bad and the conditions under which roses are given (Mondays at 8 pm), we cannot logically affirm that if roses are given out during Breaking Bad, it is on a Monday at 8 pm. Thus, based on the provided information, this statement would be considered uncertain because there's no direct logical pathway to confirm or deny it with absolute certainty using only the given statements."
  },
  {
    "id": "FOLIO_dev_167",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Heinrich Schmidt was either German or Russian.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nheinrich_scmidt ::: represents heinrich scmidt\ngerman ::: represents german\nprussian_state_parliament ::: represents the prussian state parliament\nnazi_reichstag ::: represents the nazi reichstag\n\nPredicates:\nis_nazi(x) ::: x is a Nazi.\nis_german(x) ::: x is German.\nis_politician(x) ::: x is politician.\nis_member_of_prussion_state_parliament(x) ::: x is member of prussian state parliament.\nis_member_of_nazi_reichstag(x) ::: x is member of nazi reichstag.\n\nPremises:\nis_german(\"heinrich_scmidt\") ∧ is_politician(\"heinrich_scmidt\") ∧ is_nazi(\"heinrich_scmidt\") ::: Heinrich Scmidt was a Nazi German politician.\n\"heinrich_scmidt\" = \"heinrich_scmidt\" ∧ is_member_of_prussion_state_parliament(\"heinrich_scmidt\") ∧ is_member_of_nazi_reichstag(\"heinrich_scmidt\") ::: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n\nQuery:\n(is_german(\"heinrich_scmidt\") ∨ \"russian\" = \"russian\") ::: Heinrich Schmidt was either German or Russian."
  },
  {
    "id": "FOLIO_dev_168",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, we can deduce that Heinrich Scmidt was both a Nazi German politician and a member of the Prussian State Parliament and the Nazi Reichstag. This directly supports the statement \"Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\" Therefore, the answer is:\n\n TRUE"
  },
  {
    "id": "FOLIO_dev_169",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No politicans are part of the Nazi Reichstag.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nheinrich_scmidt ::: represents heinrich scmidt\nPredicates:\nis_politician(x) ::: x is a politician.\nis_member_of_prussian_state_parliament(x) ::: x is a member of Prussian State Parliament.\nis_nazi_reichstag(x) ::: x is a part of Nazi Reichstag.\n\nPremises:\n∃x (is_politician(\"heinrich_scmidt\") ∧ is_member_of_prussian_state_parliament(\"heinrich_scmidt\") ∧ is_nazi_reichstag(\"heinrich_scmidt\")) ::: Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nQuery:\n¬∃x (is_politician(x) ∧ is_nazi_reichstag(x)) ::: No politicians are part of the Nazi Reichstag.\n\nThis statement is false, because Heinrich Scmidt is a politician who is a part of the Nazi Reichstag."
  },
  {
    "id": "FOLIO_dev_170",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Colorectal cancer is a severe cancer",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbile_duct_cancer ::: represents bile duct cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\ncolorectal_cancer ::: represents colorectal cancer\n\nPredicates:\nis_deadly(x) ::: x is a deadly disease.\nhas_low_survival_rate(x) ::: x has low survival rate.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_mild_flu(x) ::: x is a mild flu.\n\nPremises:\n∀x (is_deadly(x) → has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (is_severe_cancer(x) → is_deadly(x)) ::: All severe cancers are deadly diseases.\nis_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n∀x ∀y (is_cholangiocarcinoma(x) ∧ x = y → is_bile_duct_cancer(y))::: All Cholangiocarcinoma is bile duct cancer.\n¬has_low_survival_rate(\"mild_flu\") ::: No one with mild flu has a low survival rate.\n(is_bile_duct_cancer(\"colorectal_cancer\") ∧ (is_bile_duct_cancer(\"colorectal_cancer\") → ¬is_bile_duct_cancer(\"colorectal_cancer\"))) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n\nQuery:\n∀x ∀y (is_colorectal_cancer(x) ∧ x = y → is_severe_cancer(y)) ::: Colorectal cancer is a severe cancer."
  },
  {
    "id": "FOLIO_dev_171",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nbile_duct_cancer ::: represents a bile duct cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\ncolorectal_cancer ::: represents colorectal cancer\nmild_flu ::: represents mild flu\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nhas_low_survival_rate(x) ::: x has low survival rate.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_bile_duct_cancer(x) ::: x is a bile duct cancer.\nis_cholangiocarcinoma(x) ::: x is a cholangiocarcinoma.\nhas_mild_flu(x) ::: x has mild flu.\n\nPremises:\n∀x (is_deadly_disease(x) → has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (is_severe_cancer(x) → is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_bile_duct_cancer(\"bile_duct_cancer\") ∧ is_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n∀x (is_cholangiocarcinoma(x) → is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n∀x (has_mild_flu(x) → ¬has_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n(is_bile_duct_cancer(\"colorectal_cancer\") ∧ has_low_survival_rate(\"colorectal_cancer\")) → ¬is_bile_duct_cancer(\"colorectal_cancer\") ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n\nQuery:\n(is_bile_duct_cancer(\"colorectal_cancer\") ∨ is_cholangiocarcinoma(\"colorectal_cancer\")) → (is_bile_duct_cancer(\"colorectal_cancer\") ∧ has_mild_flu(\"colorectal_cancer\")) ::: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu."
  },
  {
    "id": "FOLIO_dev_172",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndeadly_disease ::: represents deadly disease\nlow_survival_rate ::: represents low survival rate\nsevere_cancer ::: represents severe cancer\nbile_duct_cancer ::: represents bile duct cancer\nmild_flu ::: represents mild flu\ncolorectal_cancer ::: represents colorectal cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\n\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nhas_low_survival_rate(x) ::: x has low survival rate.\nis_severe_cancer(x) ::: x is severe cancer.\nis_bile_duct_cancer(x) ::: x is bile duct cancer.\nis_mild_flu(x) ::: x is mild flu.\nis_cholangiocarcinoma(x) ::: x is cholangiocarcinoma.\n\nPremises:\n∀x (is_deadly_disease(x) → has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n∀x (is_severe_cancer(x) → is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_bile_duct_cancer(\"bile_duct_cancer\") ∧ is_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n∀x (is_cholangiocarcinoma(x) → is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n∀x (is_mild_flu(x) → ¬has_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n(is_bile_duct_cancer(\"colorectal_cancer\") ∧ has_low_survival_rate(\"colorectal_cancer\")) → ¬is_bile_duct_cancer(\"colorectal_cancer\") ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n\nQuery:\n¬(is_mild_flu(\"colorectal_cancer\") ∧ is_cholangiocarcinoma(\"colorectal_cancer\")) → (is_bile_duct_cancer(\"colorectal_cancer\") ∨ is_cholangiocarcinoma(\"colorectal_cancer\")) ::: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma."
  },
  {
    "id": "FOLIO_dev_173",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor eats salads regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, we can analyze the statements as follows:\n\n1. All people who eat salads regularly are very conscious about their health and eating habits.\n2. All people who grew up in health-conscious childhood homes eat salads regularly.\n3. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n4. If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n5. If people have good relationships with their parents, then they do not eat salads regularly.\n6. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n\nFrom statements 4 and 5, we can infer that having a good relationship with parents implies fulfilling nutritional daily intakes but not eating salads regularly.\n\nThe given statement about Taylor is: \"It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\"\n\nIf the first part of this statement is true (Taylor grew up in a health-conscious childhood home and has a good relationship with her parents), then from statements 2 and 5, we can infer that Taylor does not eat salads regularly.\n\nIf the second part of this statement is true (Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents), then we cannot directly conclude whether Taylor eats salads regularly or not based on the given premises.\n\nTherefore, considering both possibilities for Taylor's background and relationship with her parents, the conclusion about whether Taylor eats salads regularly remains uncertain."
  },
  {
    "id": "FOLIO_dev_174",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor visits the gym at least once a day.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given text and question, I will provide the constants, predicates, premises, and query as per the specified format.\n\n\nConstants:\ntaylor ::: represents taylor\n\n\nPredicates:\neat_salads_regularly(x) ::: x eats salads regularly.\nconscious_about_health_and_eating_habits(x) ::: x is very conscious about their health and eating habits.\ngrew_up_in_health_conscious_childhood_home(x) ::: x grew up in a health-conscious childhood home.\nfulfill_nutritional_daily_intakes(x) ::: x fulfills their nutritional daily intakes.\nhave_good_relationship_with_parents(x) ::: x has good relationships with their parents.\nvisit_gym_at_least_once_a_day(x) ::: x visits the gym at least once a day.\n\n\nPremises:\n∀x (eat_salads_regularly(x) → conscious_about_health_and_eating_habits(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n∀x (grew_up_in_health_conscious_childhood_home(x) → eat_salads_regularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n∀x (fulfill_nutritional_daily_intakes(x) → grew_up_in_health_conscious_childhood_home(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n∀x (have_good_relationship_with_parents(x) → fulfill_nutritional_daily_intakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n∀x (have_good_relationship_with_parents(x) → ¬eat_salads_regularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n∀x (visit_gym_at_least_once_a_day(x) → fulfill_nutritional_daily_intakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n(grew_up_in_health_conscious_childhood_home(\"taylor\") ∧ have_good_relationship_with_parents(\"taylor\")) ∨ (¬grew_up_in_health_conscious_childhood_home(\"taylor\") ∧ ¬have_good_relationship_with_parents(\"taylor\")) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n\n\nQuery:\nvisit_gym_at_least_once_a_day(\"taylor\") :::  Taylor visits the gym at least once a day."
  },
  {
    "id": "FOLIO_dev_175",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the provided text, we can deduce the following:\n\n1. If people have good relationships with their parents, then they fulfill their nutritional daily intakes (premise 4).\n2. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes (premise 6).\n3. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents (premise 7).\n\nFrom premise 4, if people have good relationships with their parents, then they fulfill their nutritional daily intakes. This means that having a good relationship with parents implies fulfilling nutritional needs.\n\nNow, let's consider the possibilities for Taylor:\n\nA) Taylor grew up in a health-conscious childhood home and has a good relationship with her parents.\nB) Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n\nIf A is true, then Taylor fulfills her nutritional daily intakes (by premise 4). If B is true, then Taylor does not fulfill her nutritional daily intakes.\n\nNow, let's examine the statement: \"Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\"\n\nIf A is true, then Taylor fulfills her nutritional daily intakes. By premise 6, visiting the gym at least once a day also implies fulfilling nutritional needs. However, we cannot conclude that Taylor visits the gym or not, as this information is not provided.\n\nIf B is true, then Taylor does not fulfill her nutritional daily intakes. In this case, it's possible that Taylor does not visit the gym at least once a day, but we cannot be certain.\n\nIn conclusion, based on the given premises, we can neither confirm nor deny with absolute certainty whether Taylor visits the gym at least once a day or not. The statement \"Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day\" is uncertain."
  },
  {
    "id": "FOLIO_dev_176",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The world championships is a sporting event.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Since the given problem doesn't follow the specified format and doesn't provide explicit information to parse into first-order logic formulas, I will outline a general approach on how this task could be accomplished. However, please note that without more specific details or examples in the correct format, providing an accurate final answer is not feasible.\n\nTo tackle this type of problem, you would typically follow these steps:\n\n1. **Identify Constants and Predicates**: Extract all constants (representing objects, individuals, etc.) and predicates (actions, states, relations) from the given text.\n   \n   - Constants might include names of people, places, organizations, etc.\n   - Predicates could be actions or states described in the sentences.\n\n2. **Apply Predicate Naming Rules**:\n   - Use main verbs followed by adverbs to create predicate names when applicable.\n   - For sentences lacking a clear action (e.g., \"is\" statements), use the full adjective phrase as part of the predicate name.\n   - Avoid negations and embedded predicates.\n\n3. **Convert Sentences into First-Order Logic Formulas**:\n   - Use logical operators (∧, ∨, ¬, →, , ∀, ∃) to represent relationships between predicates.\n   - Assign variables (from {u, v, w, x, y, z}) as arguments of predicates when needed, following the priority order given.\n\n4. **List Used Predicates and Constants**:\n   - After parsing all sentences, list out all used predicates with their meanings and constants with what they represent.\n\n5. **Determine Truth Values for Queries (If Any)**:\n   - If queries are provided in a format that can be parsed into first-order logic formulas, determine if the statements are true, false, or uncertain based on the premises established from the text.\n\nGiven the final instructions were to provide a response in a very specific format but without sufficient information in the correct format to parse into logical expressions accurately, I'm constrained from giving a boxed answer. The task as presented lacks concrete examples to directly translate into first-order logic formulas and determine their validity based on given premises."
  },
  {
    "id": "FOLIO_dev_177",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The last Olympic games were not in Tokyo.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nolympic_games ::: represents the olympic games\ntokyo ::: represents tokyo\nunited_states ::: represents united states\n\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nwas_in(x,y) ::: x was in y.\nwon_most_medals(x, y) ::: x won most medals in y.\n\nPremises:\nis_sporting_event(\"olympic_games\") ::: The Olympic games is a sporting event.\nwas_in(\"last_olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\n\nQuery:\n¬was_in(\"last_olympic_games\", \"tokyo\") :::  The last Olympic games were not in Tokyo."
  },
  {
    "id": "FOLIO_dev_178",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The United States won the most medals in the last Olympic games.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nolympic_games ::: represents olympic games\ntokyo ::: represents tokyo\nunited_states ::: represents united states\n\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nwas_in(x,y) ::: x was in y.\nwon_most_medals(x, y) ::: x won the most medals in y.\n\nPremises:\nis_sporting_event(\"olympic_games\") ::: The Olympic games is a sporting event.\nwas_in(\"last_olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\n\nQuery:\nwon_most_medals(\"united_states\", \"last_olympic_games\") ::: The United States won the most medals in the last Olympic games."
  },
  {
    "id": "FOLIO_dev_179",
    "context": "All horses have hooves. No humans have hooves.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some humans are horses.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nhorse ::: represents horse\nhuman ::: represents human\n\nPredicates:\nis_horse(x) ::: x is a horse.\nhas_hooves(x) ::: x has hooves.\nis_human(x) ::: x is human.\n\nPremises:\n∀x (is_horse(x) → has_hooves(x)) ::: All horses have hooves.\n∀x (is_human(x) → ¬has_hooves(x)) ::: No humans have hooves.\n\nQuery:\n∃x (is_human(x) ∧ is_horse(x)) ::: Some humans are horses. \n\nThe final answer is: false"
  },
  {
    "id": "FOLIO_dev_180",
    "context": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Susan flies from LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nsusan ::: represents susan\nlga_airport ::: represents lga airport\njohn ::: represents john\n\nPredicates:\nflies_from(x, y) ::: x flies from y.\nflies_to(x, y) ::: x flies to y.\n\nPremises:\nflies_to(\"susan\", \"lga_airport\") ::: Susan flies to LGA airport.\n∀x ∀y (¬(flies_from(x, y) ∧ flies_to(x, y))) ::: The departure and arrival can not be the same airport.\nflies_from(\"john\", \"lga_airport\") ::: John flies from LGA airport.\n\nQuery:\nflies_from(\"susan\", \"lga_airport\") ::: Susan flies from LGA airport."
  },
  {
    "id": "FOLIO_dev_181",
    "context": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John flies to LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nsusan ::: represents susan\nlga_airport ::: represents lga airport\njohn ::: represents john\n\nPredicates:\nflies_to(x,y) ::: x flies to y\nflies_from(x,y) ::: x flies from y.\n\nPremises: \n∀x ∀y (flies_to(x, y) → ¬flies_from(x, y)) ::: The departure and arrival can not be the same airport.\nflies_to(\"susan\", \"lga_airport\") ::: Susan flies to LGA airport.\nflies_from(\"john\", \"lga_airport\") ::: John flies from LGA airport.\n\nQuery:\nflies_to(\"john\", \"lga_airport\") :::  John flies to LGA airport."
  },
  {
    "id": "FOLIO_dev_182",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is a grumpy person.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ntom ::: represents tom\n\nPredicates:\nis_nice_to_animals(x) ::: x is nice to animals.\nis_mean_to_animals(x) ::: x is mean to animals.\nis_grumpy_person(x) ::: x is a grumpy person.\nowns_pet(x) ::: x owns pet.\nloves_animals(x) ::: x loves animals.\n\nPremises:\n∀x (is_nice_to_animals(x) → ¬is_mean_to_animals(x)) ::: No one nice to animals is mean to animals.\n∃x (is_grumpy_person(x) ∧ is_mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n∀x (loves_animals(x) → is_nice_to_animals(x)) ::: All animal lovers are nice to animals.\n∀x (owns_pet(x) → loves_animals(x)) ::: If someone owns a pet, then they love animals.\nowns_pet(\"tom\") ::: Tom is a pet owner.\n\nQuery:\nis_grumpy_person(\"tom\") ::: Tom is a grumpy person."
  },
  {
    "id": "FOLIO_dev_183",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is not a grumpy person and mean to animals.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given text and rules of predicate naming and constants, let's analyze the premises step by step:\n\n1. No one nice to animals is mean to animals.\n   - is_nice_to_animals(x) → ¬is_mean_to_animals(x)\n\n2. Some grumpy people are mean to animals.\n   - ∃x (is_grumpy(x) ∧ is_mean_to_animals(x))\n\n3. All animal lovers are nice to animals.\n   - ∀x (is_animal_lover(x) → is_nice_to_animals(x))\n\n4. If someone owns a pet, then they love animals.\n   - ∀x (owns_pet(x) → loves_animals(x))\n\n5. Tom is a pet owner.\n   - owns_pet(\"tom\")\n\nNow let's define the constants and predicates:\n\nConstants:\n  tom ::: represents tom\n\nPredicates:\n  is_nice_to_animals(x) ::: x is nice to animals\n  is_mean_to_animals(x) ::: x is mean to animals\n  is_grumpy(x) ::: x is a grumpy person\n  loves_animals(x) ::: x loves animals\n  owns_pet(x) ::: x owns a pet\n\nPremises:\n  ∀x (is_nice_to_animals(x) → ¬is_mean_to_animals(x)) ::: No one nice to animals is mean to animals.\n  ∃x (is_grumpy(x) ∧ is_mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n  ∀x (loves_animals(x) → is_nice_to_animals(x)) ::: All animal lovers are nice to animals.\n  ∀x (owns_pet(x) → loves_animals(x)) ::: If someone owns a pet, then they love animals.\n  owns_pet(\"tom\") ::: Tom is a pet owner.\n\nQuery:\n ¬(is_grumpy(\"tom\") ∧ is_mean_to_animals(\"tom\")) ::: Tom is not a grumpy person and mean to animals."
  },
  {
    "id": "FOLIO_dev_184",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ntom ::: represents tom\nPredicates:\nis_nice_to_animals(x) ::: x is nice to animals.\nis_mean_to_animals(x) ::: x is mean to animals.\nis_grumpy_person(x) ::: x is a grumpy person.\nis_animal_lover(x) ::: x is an animal lover.\nowns_pet(x) ::: x owns pet.\n\nPremises:\n∀x (¬(is_nice_to_animals(x) ∧ is_mean_to_animals(x))) ::: No one nice to animals is mean to animals.\n∃x (is_grumpy_person(x) ∧ is_mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n∀x (is_animal_lover(x) → is_nice_to_animals(x)) ::: All animal lovers are nice to animals.\n∀x (owns_pet(x) → is_animal_lover(x)) ::: If someone owns a pet, then they love animals.\nowns_pet(\"tom\") ::: Tom is a pet owner.\n\nQuery:\n¬(is_grumpy_person(\"tom\") ∧ is_mean_to_animals(\"tom\")) → ¬(is_grumpy_person(\"tom\") ∨ is_animal_lover(\"tom\")) ::: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover."
  },
  {
    "id": "FOLIO_dev_185",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dani Shapiro is a novel writer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndani_shapiro ::: represents Dani Shapiro\namerican_city ::: represents an American city\nfamily_history ::: represents the book Family History\nyear_2003 ::: represents the year 2003\npodcast_family_secrets ::: represents the podcast Family Secrets\nboston ::: represents Boston\n\nPredicates:\nis_novel(x) ::: x is a novel.\nis_podcast(x) ::: x is a podcast.\nis_writer(x, y) ::: x is a writer of type y.\nis_american(x) ::: x is an American person.\nborn_in(x, y) ::: x was born in y.\ncreated(x, y) ::: x created y.\nwritten_by(x, y) ::: x is written by y.\npublished_year(x,y) ::: x published year y.\n\nPremises:\n¬(is_novel(x) ∧ is_podcast(x)) ::: A podcast is not a novel.\n∀x (born_in(x, \"american_city\") → is_american(x)) ::: If a person is born in American City, the person is American.\n∀x ∀y (is_novel(y) ∧ written_by(y,x) → is_writer(x, \"novel\")) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") ∧ is_writer(\"dani_shapiro\", \"american\") ::: Dani Shapiro is an American writer.\nwritten_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\npublished_year(\"family_history\", \"year_2003\") ∧ is_novel(\"family_history\") ::: Family History is a novel written in 2003.\ncreated(\"dani_shapiro\", \"podcast_family_secrets\")::: Dani Shapiro created a podcast called Family Secrets.\nis_american_city(\"boston\") ::: Boston is an American city.\n\nQuery:\nis_writer(\"dani_shapiro\", \"novel\") ::: Dani Shapiro is a novel writer."
  },
  {
    "id": "FOLIO_dev_186",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Family Secrets is a novel.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\namerican_city ::: represents american city\ndani_shapiro ::: represents dani shapiro\nfamily_history ::: represents family history\nyear_2003 ::: represents the year 2003\nboston ::: represents boston\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_book(x) ::: x is a book.\nwritten_by(x, y) ::: x is written by y.\nis_writer(x) ::: x is a writer.\nborn_in(x,y) ::: x was born in y.\ncreated(x, y) ::: x created y.\nis_american_city(x) ::: x is an american city.\nPremises:\n¬(is_podcast(\"family_history\") ∧ is_novel(\"family_history\")) ::: A podcast is not a novel. \n∀x (born_in(x,\"american_city\") → is_writer(\"american writer\")) ::: If a person is born in American City, the person is American. \n∀x ∀y ((is_novel(y) ∧ written_by(y,x)) → is_writer(\"novel writer\", x)) :::  If a book is novel and it is written by a person, then the person is a novel writer.\n(is_american_city(\"boston\") ∧ born_in(\"dani_shapiro\",\"boston\"))::: Dani Shapiro is an American writer.\nwritten_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\nis_novel(\"family_history\") ∧ written_by(\"family_history\", \"year_2003\") ::: Family History is a novel written in 2003.\ncreated(\"dani_shapiro\",\"family_secrets\")::: Dani Shapiro created a podcast called Family Secrets. \nQuery:\nis_novel(\"family_secrets\") ::: Family Secrets is a novel."
  },
  {
    "id": "FOLIO_dev_187",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dani Shapiro was born in Boston.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\ndani_shapiro ::: represents dani shapiro\namerican_city ::: represents american city\nfamily_history ::: represents family history\nyear_2003 ::: represents year 2003\nboston ::: represents boston\n\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_writer(x) ::: x is writer.\nis_born_in(x, y) ::: x is born in y.\nis_american(x) ::: x is american.\nis_book_written_by(x, y) ::: x book written by y.\ncreated_podcast(x, y) ::: x created podcast y.\n\nPremises:\n¬(is_novel(\"podcast\")) ::: A podcast is not a novel.\n∀x ∀y(is_born_in(y,x) ∧ is_american_city(x) → is_american(y)) ::: If a person is born in American City, the person is American.\n∀x ∀y(is_book_written_by(\"novel\", y) ∧ is_novel(y) → is_writer(x)) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") ∧ is_writer(\"dani_shapiro\") ::: Dani Shapiro is an American writer.\nis_book_written_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\nis_novel(\"family_history\") ∧ publishes(\"family_history\", \"year_2003\") :::  Family History is a novel written in 2003.\ncreated_podcast(\"dani_shapiro\", \"family_secrets\") ::: Dani Shapiro created a podcast called Family Secrets.\nis_american_city(\"boston\") ::: Boston is an American city.\n\nQuery:\nis_born_in(\"dani_shapiro\", \"boston\") ::: Dani Shapiro was born in Boston.\n\nThe final answer is uncertain."
  },
  {
    "id": "FOLIO_dev_188",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is an American.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyuri ::: represents Yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an American.\nwears_large_size_clothes(x) ::: x wears large-size clothes.\nis_tall(x) ::: x is tall.\nPremises:\n∃x (¬is_american(x) ∧ is_basketball_player(x)) ::: Some basketball players are not American.\n∀x (is_basketball_player(x) → is_tall(x)) ::: All basketball players are tall.\n∀x (is_tall(x) → wears_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (wears_large_shoes(x) → wears_large_size_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬wears_large_size_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\nis_american(\"yuri\") ::: Yuri is an American."
  },
  {
    "id": "FOLIO_dev_189",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is not an American basketball player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an american.\nwears_large_shoes(x) ::: x wears large shoes.\nwears_larg_size_clothes(x) ::: x wears large-size clothes.\nis_tall(x) ::: x is tall.\n\nPremises:\n∃x (is_basketball_player(x) ∧ ¬is_american(x)) ::: Some basketball players are not American.\n∀x (is_basketball_player(x) → is_tall(x)) ::: All basketball players are tall.\n∀x (is_tall(x) → wears_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (wears_large_shoes(x) → wears_larg_size_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬wears_larg_size_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\n\nQuery:\n¬(is_basketball_player(\"yuri\") ∧ is_american(\"yuri\")) ::: Yuri is not an American basketball player."
  },
  {
    "id": "FOLIO_dev_190",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is an American basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an american.\nis_tall(x) ::: x is tall.\nwears_large_shoes(x) ::: x wears large shoes.\nwear_large_clothes(x) ::: x wears large clothes.\nPremises:\n∃x (is_basketball_player(x) ∧ ¬is_american(x)) ::: Some basketball players are not American.\n∀x (is_basketball_player(x) → is_tall(x)) ::: All basketball players are tall.\n∀x (is_tall(x) → wears_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (wears_large_shoes(x) → wear_large_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬wear_large_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\nis_american(\"yuri\") ∧ is_basketball_player(\"yuri\") ::: Yuri is an American basketball player.\n\nThe answer is uncertain."
  },
  {
    "id": "FOLIO_dev_191",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Yuri does not wear large shoes, then Yuri is an American basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an American person.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_clothes(x) ::: x wears large clothes.\ntall ::: x is tall.\nPremises:\n∃x (is_basketball_player(x) ∧ ¬is_american(x)) ::: Some basketball players are not American.\n∀x (is_basketball_player(x) → tall) ::: All basketball players are tall.\n∀x (tall → wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n∀x ∀y (wear_large_shoes(y) → wear_large_clothes(x)) :::  If someone wears large shoes, they wear large-sized clothes.\n¬(wear_large_clothes(\"yuri\")) ::: Yuri does not wear large-size clothes.\nQuery:\n¬wear_large_shoes(\"yuri\") → (is_basketball_player(\"yuri\") ∧ is_american(\"yuri\"))::: If Yuri does not wear large shoes, then Yuri is an American basketball player."
  },
  {
    "id": "FOLIO_dev_192",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Yuri is not an American basketball player, then Yuri is a basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an american.\nis_tall(x) ::: x is tall.\nwears_large_shoes(x) ::: x wears large shoes.\nwears_large_clothes(x) ::: x wears large-size clothes.\n\nPremises:\n∃x (is_basketball_player(x) ∧ ¬is_american(x)) ::: Some basketball players are not American.\n∀x (is_basketball_player(x) → is_tall(x)) ::: All basketball players are tall.\n∀x (is_tall(x) → wears_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n∀x (wears_large_shoes(x) → wears_large_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n¬wears_large_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\n\nQuery:\n(is_basketball_player(\"yuri\") ∧ ¬is_american(\"yuri\")) → is_basketball_player(\"yuri\") ::: If Yuri is not an American basketball player, then Yuri is a basketball player."
  },
  {
    "id": "FOLIO_dev_193",
    "context": "Events are either happy or sad. At least one event is happy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All events are sad.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nevent ::: represents an event\n\nPredicates:\nis_happy(x) ::: x is happy\nis_sad(x) ::: x is sad\n\nPremises:\n∀x ((is_happy(x) ∧ ¬is_sad(x)) ∨ (¬is_happy(x) ∧ is_sad(x))) ::: Events are either happy or sad.\n∃x (is_happy(x)) ::: At least one event is happy.\n\nQuery:\n∀x (is_sad(x)) ::: All events are sad.\n\nThe final answer is FALSE."
  },
  {
    "id": "FOLIO_dev_194",
    "context": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nsteinhauer ::: represents steinhauer\nbelgium ::: represents belgium\ndescampe ::: represents descampe\nyear_1992 ::: represents the year of 1992\n\nPredicates:\nis_winner(x, y) ::: x is the winner of y.\nparticipated_in(x, y) ::: x participated in y.\non_leaderboard_of(x, y) ::: x is on the leaderboard of y.\nfrom_country(x, y) ::: x is from country y.\nsix_way_tie(x) ::: there was a six-way tie on the leaderboard.\n\nPremises:\nis_winner(\"steinhauer\", \"year_1992\") ∧ participated_in(\"steinhauer\", \"year_1992\") ::: The winner of the 1992 du Maurier Classic was Steinhauer. \nparticipated_in(\"steinhauer\", \"year_1992\") ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x (on_leaderboard_of(x, \"year_1992\") ∧ from_country(x, \"belgium\")) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. \nfrom_country(\"descampe\", \"belgium\") ∧ on_leaderboard_of(\"descampe\", \"year_1992\") ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n∀x (on_leaderboard_of(x, \"year_1992\") → participated_in(x, \"year_1992\")) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n\nQuery:\n¬is_winner(\"steinhauer\", \"year_1992\") ::: Steinhauer was not the winner of the 1992 du Maurier Classic."
  },
  {
    "id": "FOLIO_dev_195",
    "context": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nsteinhauer ::: represents steinhauer\nbelgium ::: represents belgium\ndescampe ::: represents descampe\nPredicates:\nis_winner(x) ::: x is a winner.\nparticipated(x,y) ::: x participated in y.\nis_six_way_tie(x) ::: x is six-way tie.\nfrom_belgium(x) ::: x is from belgium.\non_leaderboard(x,y) ::: x is on leaderboard of y.\n\nPremises:\n∃x (is_winner(\"steinhauer\") ∧ participated(\"steinhauer\", \"1992 du Maurier Classic\"))::: The winner of the 1992 du Maurier Classic was Steinhauer. \nparticipated(\"steinhauer\", \"1992 du Maurier Classic\") ::: Steinhauer participated in the 1992 du Maurier Classic.\n∃x (is_six_way_tie(x) ∧ from_belgium(x) ∧ on_leaderboard(x, \"1992 du Maurier Classic\")) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. \nfrom_belgium(\"descampe\") ∧ on_leaderboard(\"descampe\", \"1992 du Maurier Classic\") ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n∀x (on_leaderboard(x, \"1992 du Maurier Classic\") → participated(x,\"1992 du Maurier Classic\"))::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n\nQuery:\nis_six_way_tie(\"descampe\") ∧ from_belgium(\"descampe\") ∧ on_leaderboard(\"descampe\", \"1992 du Maurier Classic\") ::: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."
  },
  {
    "id": "FOLIO_dev_196",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi is terricolous.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given text, let's break down the information and apply first-order logic to derive conclusions.\n\n1. If an animal barks, then Jane does not like it.\n∀x (bark(x) → ¬like(Jane, x))\n\n2. All dogs are animals that bark.\n∀x (dog(x) → bark(x))\n\n3. If an animal jumps, then Jane likes it.\n∀x (jump(x) → like(Jane, x))\n\n4. If an animal has legs, then it jumps.\n∀x (has_legs(x) → jump(x))\n\n5. If an animal is terricolous, then it has legs.\n∀x (terricolous(x) → has_legs(x))\n\n6. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n¬jump(KiKi) ∧ ¬has_legs(KiKi) → (terricolous(KiKi) ∨ has_legs(KiKi))\n\nFrom statement 4, we know that having legs implies jumping. Therefore, if KiKi does not jump, it cannot have legs.\n\n∀x (¬jump(x) → ¬has_legs(x)) [contrapositive of statement 4]\n\nApplying this to KiKi, we get:\n\n¬jump(KiKi) → ¬has_legs(KiKi)\n\nNow, let's examine the last statement about KiKi. If KiKi neither jumps nor has legs, then it is either terricolous or has legs.\n\n¬jump(KiKi) ∧ ¬has_legs(KiKi) → (terricolous(KiKi) ∨ has_legs(KiKi))\n\nHowever, we already know that if KiKi does not jump, it cannot have legs. So, the disjunction \"has_legs(KiKi)\" is always false.\n\n¬jump(KiKi) ∧ ¬has_legs(KiKi) → terricolous(KiKi)\n\nNow, let's consider the possibility that KiKi might be an animal that barks (since all dogs are animals that bark).\n\nIf KiKi barks, then Jane does not like it. But we do not have any information about KiKi being a dog or an animal that barks.\n\nHowever, if KiKi is terricolous, then it has legs (statement 5), and if it has legs, then it jumps (statement 4). If it jumps, then Jane likes it (statement 3).\n\nSo, we have two possible scenarios:\n\n1. KiKi does not jump and does not have legs, in which case it is terricolous.\n2. KiKi is terricolous, has legs, jumps, and Jane likes it.\n\nIn both cases, KiKi being terricolous is a possibility.\n\nTherefore, based on the given text, we can conclude that KiKi is possibly terricolous."
  },
  {
    "id": "FOLIO_dev_197",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi barks and is a dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nkiki ::: represents kiki\njane ::: represents jane\n\nPredicates:\nis_animal(x) ::: x is an animal.\nbarks(x) ::: x barks.\nlikes(x,y) ::: x likes y.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nis_dog(x) ::: x is a dog.\n\nPremises:\n∀x (barks(x) → ¬likes(\"jane\", x)) ::: If an animal barks, then Jane does not like it.\n∀x (is_dog(x) →  is_animal(x) ∧ barks(x)) ::: All dogs are animals that bark.\n∀x (jumps(x) → likes(\"jane\", x)) ::: If an animal jumps, then Jane likes it.\n∀x (has_legs(x) → jumps(x)) ::: If an animal has legs, then it jumps.\n∀x (is_terricolous(x) → has_legs(x)) ::: If an animal is terricolous, then it has legs.\n¬(jumps(\"kiki\") ∨ has_legs(\"kiki\")) → (is_terricolous(\"kiki\") ∧ has_legs(\"kiki\")) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n\nQuery:\nbarks(\"kiki\") ∧ is_dog(\"kiki\") ::: KiKi barks and is a dog."
  },
  {
    "id": "FOLIO_dev_198",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi neither barks nor is a dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nkiki ::: represents kiki\nPredicates:\nbarks(x) ::: x barks.\nis_animal(x) ::: x is an animal.\nlikes_jane(x) ::: Jane likes x.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nis_dog(x) ::: x is a dog.\nPremises:\n∀x (barks(x) → ¬likes_jane(x)) ::: If an animal barks, then Jane does not like it.\n∀x (is_dog(x) → (is_animal(x) ∧ barks(x))) ::: All dogs are animals that bark.\n∀x (jumps(x) → likes_jane(x)) ::: If an animal jumps, then Jane likes it.\n∀x (has_legs(x) → jumps(x)) ::: If an animal has legs, then it jumps.\n∀x (is_terricolous(x) → has_legs(x)) ::: If an animal is terricolous, then it has legs.\n(¬jumps(\"kiki\") ∧ ¬has_legs(\"kiki\")) → (is_terricolous(\"kiki\") ∨ has_legs(\"kiki\")) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nQuery:\n(¬barks(\"kiki\") ∧ ¬is_dog(\"kiki\")) ::: KiKi neither barks nor is a dog."
  },
  {
    "id": "FOLIO_dev_199",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No one playing for Nautico is Brazilian.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nailton_silva ::: represents ailton silva\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nyear_1995 ::: represents the year of 1995\n\nPredicates:\nis_born(x, y) ::: x was born in year y.\nis_known_as(x, y) ::: x is commonly known as y.\nis_football_player(x) ::: x is a football player.\nloaned_out_to(x, y) ::: x is loaned out to y.\nplays_for(x, y) ::: x plays for y.\nis_brazilian(x) ::: x is brazillian.\n\nPremises:\n\"ailton_silva\" = \"ailton\" ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nloaned_out_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nplays_for(\"ailton_silva\", \"nautico\") ∧ is_brazilian(\"ailton_silva\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\n∃x (is_football_club(x) ∧ x = \"braga\" ∨ x = \"nautico\") ::: Nautico is a football club along with Braga.\n∃x (is_football_club(x) ∧ x = \"fluminense\") ::: Fluminense is a football club.\n\nQuery:\n¬(∀x (plays_for(x, \"nautico\") → ¬is_brazilian(x))) ::: No one playing for Nautico is Brazilian."
  },
  {
    "id": "FOLIO_dev_200",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva foes not play for a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nailton_silva ::: represents Ailton Silva\nbrazilian ::: represents Brazilian\nbraga ::: represents Braga\nnautico ::: represents Nautico\nfluminense ::: represents Fluminense\nPredicates:\nis_born(x,y) ::: x is born in year y.\nis_known_as(x,y) ::: x is commonly known as y.\nis_footballer_player(x) ::: x is a football player.\nplays_for(x, y) ::: x plays for team y.\nloaned_out_to(x, y) ::: x was loaned out to team y.\nis_club(x) ::: x is a football club.\nPremises:\nis_born(\"ailton_silva\", 1995) ∧ is_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nloaned_out_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_footballer_player(\"ailton_silva\") ∧ plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_club(\"nautico\") ∧ is_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_club(\"fluminense\") ::: Fluminense is a football club.\nQuery:\n¬plays_for(\"ailton_silva\", x) ::: Ailton Silva foes not play for a football club."
  },
  {
    "id": "FOLIO_dev_201",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton was not loaned out to a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nailton_silva ::: represents ailton silva\nbrazil ::: represents brazil\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\n\nPredicates:\nis_born(x,y) ::: x is born in year y.\nis_footballer(x) ::: x is footballer.\nplays_for(x, y) ::: x plays for y.\nloaned_to(x, y) ::: x loaned to y.\ncommonly_known_as(x, y) ::: x commonly known as y.\n\nPremises:\nis_born(\"ailton_silva\", 1995) ∧ commonly_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nloaned_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nplays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\n∃x (is_football_club(x) ∧ x = \"braga\" ∨ x = \"nautico\") ::: Nautico is a football club along with Braga.\n∃x (is_football_club(x) ∧ x = \"fluminense\") ::: Fluminense is a football club.\n\nQuery:\n¬loaned_to(\"ailton\", \"football_club\") ::: Ailton was not loaned out to a football club.\n\nThe final answer is: uncertain"
  },
  {
    "id": "FOLIO_dev_202",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva played for Fluminense.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Based on the given text, the answer to the question \"Ailton Silva played for Fluminense\" is Uncertain.\n\nThe text provides information about Ailton Silva's birth year, his common name, and his association with football clubs Braga and Nautico. However, there is no mention of him playing for Fluminense. Therefore, it cannot be determined from the given text whether he played for Fluminense or not, resulting in an uncertain answer.\n\nHere are the constants, predicates, premises, and query for this problem:\n\nConstants:\nailton_silva ::: represents Ailton Silva\nbraga ::: represents Braga football club\nnautico ::: represents Nautico football club\nfluminense ::: represents Fluminense football club\n\nPredicates:\nis_born(x, y) ::: x is born in year y\nis_football_player(x) ::: x is a football player\nis_loan_out_to(x, y) ::: x is loaned out to y\nplays_for(x, y) ::: x plays for y\nis_football_club(x) ::: x is a football club\n\nPremises:\nis_born(\"ailton_silva\", \"1995\") ::: Ailton Silva was born in 1995.\n\"ailton_silva\" = \"Ailton\" ::: Ailton Silva is commonly known as Ailton.\nis_football_player(\"ailton_silva\") ∧ is_loan_out_to(\"ailton_silva\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nplays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva plays for Nautico.\nis_football_club(\"nautico\") ∧ is_football_club(\"braga\") ::: Nautico and Braga are football clubs.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\n\nQuery:\nplays_for(\"ailton_silva\", \"fluminense\") ::: Ailton Silva played for Fluminense."
  },
  {
    "id": "FOLIO_dev_203",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": "Constants:\nailton_silva ::: represents ailton silva\nailton ::: represents ailton\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\n\nPredicates:\nis_football_player(x) ::: x is a football player.\nplays_for(x, y) ::: x plays for y.\nloaned_out_to(x, y) ::: x was loaned out to y.\nis_brazillian(x) ::: x is brazillian.\nborn_in(x, y) ::: x was born in year y.\n\nPremises:\n\"ailton_silva\" = \"ailton\" ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nloaned_out_to(\"ailton\", \"braga\") ∧ plays_for(\"ailton_silva\", \"nautico\") ::: Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_brazillian(\"ailton_silva\"):::  Ailton Silva is a Brazillian footballer who plays for Nautico\nis_football_club(\"nautico\") ∧ is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\n\nQuery:\nloaned_out_to(\"ailton_silva\", x) ::: Ailton Silva was loaned out to a football club."
  }
]
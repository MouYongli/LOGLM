[
  {
    "id": "FOLIO_dev_0",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Bonnie performs in school talent shows often.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here's the analysis of the problem in JSON format as per your instructions:\n\n```json\n{\n    \"Predicates\": {\n        \"Perform(x)\": \"x performs in school talent shows often\",\n        \"Engage(x)\": \"x attends and is very engaged with school events\",\n        \"Inactive(x)\": \"x is an inactive and disinterested member of their community\",\n        \"Chaperone(x)\": \"x chaperones high school dances\",\n        \"Student(x)\": \"x is a student who attends the school\"\n    },\n    \"Premises\": [\n        \"∀x (Perform(x) → Engage(x))\",  // If people perform in school talent shows often, then they attend and are very engaged with school events.\n        \"∀x (Perform(x) ⊕ Inactive(x))\",  // People either perform in school talent shows often or are inactive and disinterested members of their community.\n        \"∀x (Chaperone(x) → ¬Student(x))\",  // If people chaperone high school dances, then they are not students who attend the school.\n        \"∀x (Inactive(x) → Chaperone(x))\",  // All people who are inactive and disinterested members of their community chaperone high school dances.\n        \"(Student(bonnie) ∧ Engage(bonnie)) ⊕ ¬(Student(bonnie) ∨ Engage(bonnie))\"  // Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\n    ],\n    \"Conclusion\": {\n        \"Perform(bonnie)\": \"Bonnie performs in school talent shows often\"\n    }\n}\n```\n\nThis JSON output contains the predicates (core entities or properties), premises (assertions made in the problem), and conclusion (what needs to be evaluated based on the premises)."
    ]
  },
  {
    "id": "FOLIO_dev_1",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```json\n{\n    \"Predicates\": {\n        \"Perform(x)\": \"x performs in school talent shows often\",\n        \"Engaged(x)\": \"x is very engaged with school events\",\n        \"Attend(x)\": \"x attends and is very engaged with school events\",\n        \"Inactive(x)\": \"x is an inactive and disinterested member of their community\",\n        \"Chaperone(x)\": \"x chaperones high school dances\",\n        \"Student(x)\": \"x is a student who attends the school\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Perform(x) \\u2192 Attend(x))\",  # If people perform in school talent shows often, then they attend and are very engaged with school events.\n        \"\\u2200x (Perform(x) \\u22c6 Inactive(x))\",  # People either perform in school talent shows often or are inactive and disinterested members of their community.\n        \"\\u2200x (Chaperone(x) \\u2192 ¬Student(x))\",  # If people chaperone high school dances, then they are not students who attend the school.\n        \"\\u2200x (Inactive(x) \\u2192 Chaperone(x))\",  # All people who are inactive and disinterested members of their community chaperone high school dances.\n        \"\\u2200x ((YoungChild(x) ∧ Teenager(x) ∧ FurtherEducation(x)) \\u2192 Student(x))\"  # All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n    ],\n    \"Conclusion\": [\n        \"( (FurtherEducation(bonnie) ∧ Chaperone(bonnie)) \\u22c6 ¬(FurtherEducation(bonnie) ∨ Chaperone(bonnie))) \\u2192 (Student(bonnie) \\u22c6 Inactive(bonnie)) )\" \n    ]\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_2",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n\"Predicates\": {\n\"Perform(x)\": \"x performs in school talent shows often\",\n\"AttendAndEngaged(x)\": \"x attends and is very engaged with school events\",\n\"InactiveMember(x)\": \"x is an inactive and disinterested member of their community\",\n\"Chaperone(x)\": \"x chaperones high school dances\",\n\"StudentAtSchool(x)\": \"x is a student who attends the school\",\n\"WishFurtherAcademicCareer(x)\": \"x wishes to further her academic career and educational opportunities\"\n},\n\"Premises\": [\n\"(∀x (Perform(x) → AttendAndEngaged(x)))\", \n\"(∀x (Perform(x) ⊕ InactiveMember(x)))\", \n\"(∀x (Chaperone(x) → ¬StudentAtSchool(x)))\", \n\"(∀x (InactiveMember(x) → Chaperone(x)))\", \n\"(∀x (WishFurtherAcademicCareer(x) ∧ (YoungChild(x) ∨ Teenager(x)) → StudentAtSchool(x)))\", \n\"(AttendAndEngaged(bonnie) ∧ StudentAtSchool(bonnie)) ⊕ ¬(AttendAndEngaged(bonnie) ∨ StudentAtSchool(bonnie))\"\n],\n\"Conclusion\": \"((Chaperone(bonnie) ∨ Perform(bonnie)) → (WishFurtherAcademicCareer(bonnie) ∧ InactiveMember(bonnie)))\"\n}"
    ]
  },
  {
    "id": "FOLIO_dev_3",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James has lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Employee(x)\": \"x is an employee\",\n        \"ScheduleMeeting(x)\": \"x schedules a meeting with their customers\",\n        \"LunchInCompany(x)\": \"x has lunch in the company\",\n        \"LunchAtHome(x)\": \"x has lunch at home\",\n        \"WorkRemotelyFromHome(x)\": \"x works remotely from home\",\n        \"Manager(x)\": \"x is a manager\",\n        \"InOtherCountries(x)\": \"x is in other countries\",\n        \"AppearInCompanyToday(x)\": \"x appears in the company today\"\n    },\n    \"Premises\": [\n        \"∀x (ScheduleMeeting(x) → AppearInCompanyToday(x))\",  // All employees who schedule a meeting with their customers will appear in the company today.\n        \"∀x (LunchInCompany(x) → ScheduleMeeting(x))\",  // Everyone who has lunch in the company schedules meetings with their customers.\n        \"∀x (Employee(x) → LunchInCompany(x) ⊕ LunchAtHome(x))\",  // Employees will either have lunch in the company or have lunch at home.\n        \"∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))\",  // If an employee has lunch at home, then he/she is working remotely from home.\n        \"∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))\",  // All employees who are in other countries work remotely from home.\n        \"¬∃x (Manager(x) ∧ WorkRemotelyFromHome(x))\",  // No managers work remotely from home.\n        \"(Manager(james) ∧ AppearInCompanyToday(james)) ⊕ ¬(Manager(james) ∨ AppearInCompanyToday(james)))\"  // James is either a manager and appears in the company today or neither a manager nor appears in the company today.\n    ],\n    \"Conclusion\": {\n        \"LunchInCompany(james)\": \"James has lunch in the company\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_4",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James does not have lunch in the company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"Employee(x) ::: x is an employee.\",\n        \"ScheduleMeetingWithCustomer(x) ::: x schedules meetings with their customers.\",\n        \"HaveLunchInCompany(x) ::: x has lunch in the company.\",\n        \"HaveLunchAtHome(x) ::: x has lunch at home.\",\n        \"WorkRemotelyFromHome(x) ::: x works remotely from home.\",\n        \"Manager(x) ::: x is a manager.\",\n        \"AppearInTheCompanyToday(x) ::: x appears in the company today.\",\n        \"InOtherCountries(x) ::: x is in other countries.\"\n    ],\n    \"Premises\": [\n        \"∀x (ScheduleMeetingWithCustomer(x) → AppearInTheCompanyToday(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\",\n        \"∀x (HaveLunchInCompany(x) → ScheduleMeetingWithCustomer(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\",\n        \"∀x (Employee(x) → HaveLunchInCompany(x) ⊕ HaveLunchAtHome(x)) ::: Employees will either have lunch in the company or have lunch at home.\",\n        \"∀x (HaveLunchAtHome(x) → WorkRemotelyFromHome(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\",\n        \"∀x (InOtherCountries(x) → WorkRemotelyFromHome(x)) ::: All employees who are in other countries work remotely from home.\",\n        \"¬∃x (Manager(x) ∧ WorkRemotelyFromHome(x)) ::: No managers work remotely from home.\",\n        \"(Manager(james) ∧ AppearInTheCompanyToday(james)) ⊕ ¬(Manager(james) ∨ AppearInTheCompanyToday(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\"\n    ],\n    \"Conclusion\": [\n        \"¬HaveLunchInCompany(james) ::: James does not have lunch in the company.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_5",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"ScheduleMeeting(x) ::: x schedules meetings with customers.\",\n        \"LunchAtCompany(x) ::: x has lunch in the company.\",\n        \"LunchAtHome(x) ::: x has lunch at home.\",\n        \"WorkRemotelyFromHome(x) ::: x works remotely from home.\",\n        \"EmployeeInCountry(x, y) ::: x is an employee in country y.\",\n        \"Manager(x) ::: x is a manager.\",\n        \"AppearInCompanyToday(x) ::: x appears in the company today.\"\n    ],\n    \"Premises\": [\n        \"\\u2200x (ScheduleMeeting(x) → AppearInCompanyToday(x)) ::: All employees who schedule meetings with their customers appear in the company today.\",\n        \"\\u2200x (LunchAtCompany(x) → ScheduleMeeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\",\n        \"\\u2200x (Employee(x) → LunchAtHome(x) \\u22c6 LunchAtCompany(x)) ::: Employees will either have lunch at home or in the company.\",\n        \"LunchAtHome(x) → WorkRemotelyFromHome(x) ::: If an employee has lunch at home, then he/she works remotely from home.\",\n        \"\\u2200x (EmployeeInCountry(x, otherCountries) → WorkRemotelyFromHome(x)) ::: All employees who are in other countries work remotely from home.\",\n        \"¬\\u2203x (Manager(x) ∧ WorkRemotelyFromHome(x)) ::: No managers work remotely from home.\",\n        \"(Manager(james) ∧ AppearInCompanyToday(james)) \\u22c6 ¬(Manager(james) ∨ AppearInCompanyToday(james)) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\"\n    ],\n    \"Conclusion\": [\n        \"(Manager(james) ∨ EmployeeInCountry(james, otherCountries)) → ((LunchAtHome(james) ∧ WorkRemotelyFromHome(james)) \\u22c6 ¬(LunchAtHome(james) ∨ WorkRemotelyFromHome(james))) ::: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_6",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is an animal.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Monkeypox(x)\": \"x is Monkeypox\",\n        \"Virus(x)\": \"x is a virus\",\n        \"InfectiousDisease(x)\": \"x is an infectious disease\",\n        \"CausedBy(x, y)\": \"x is caused by y\",\n        \"CanOccurIn(x, y)\": \"x can occur in y\",\n        \"Human(x)\": \"x is human\",\n        \"Mammal(x)\": \"x is a mammal\",\n        \"Animal(x)\": \"x is an animal\",\n        \"SymptomsOf(x, y)\": \"y are symptoms of x\",\n        \"Fever(x)\": \"x has fever\",\n        \"Headache(x)\": \"x has headache\",\n        \"MusclePains(x)\": \"x has muscle pains\",\n        \"FeelingTired(x)\": \"x feels tired\"\n    },\n    \"Premises\": [\n        \"Monkeypox(monkeypox) ∧ InfectiousDisease(monkeypox) ∧ CausedBy(monkeypox, virus)\", \n        \"Virus(virus) ∧ CanOccurIn(virus, human)\", \n        \"Human(human) → Mammal(human)\", \n        \"Mammal(mammal) → Animal(animal)\",\n        \"SymptomsOf(monkeypox, fever) ∧ SymptomsOf(monkeypox, headache) ∧ SymptomsOf(monkeypox, musclePains) ∧ SymptomsOf(monkeypox, feelingTired)\"\n    ],\n    \"Conclusion\": [\n        \"∃x (Animal(x))\" \n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_7",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No one gets flu.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Monkeypox(x)\": \"x has monkeypox\",\n        \"Virus(x)\": \"x is a virus\",\n        \"OccursIn(x,y)\": \"x occurs in y\",\n        \"Human(x)\": \"x is human\",\n        \"Mammal(x)\": \"x is mammal\",\n        \"Animal(x)\": \"x is animal\",\n        \"HasSymptoms(x, y)\": \"x has symptoms of y\",\n        \"Fever(x)\": \"x has fever\",\n        \"Headache(x)\": \"x has headache\",\n        \"MusclePains(x)\": \"x has muscle pains\",\n        \"Tired(x)\": \"x feels tired\",\n        \"GetsFlu(x)\": \"x gets flu\"\n    },\n    \"Premises\": [\n        \"Monkeypox(monkeypox) ∧ Virus(monkeypox)\", # Monkeypox is a virus\n        \"∃y ∃x (Virus(x) ∧ OccursIn(x, y))\", # The monkeypox virus can occur in certain animals, including humans.\n        \"Human(human) → Mammal(human)\", # Humans are mammals\n        \"Mammal(mammal) → Animal(mammal)\", # Mammals are animals\n        \"HasSymptoms(monkeypox, fever)\", # Monkeypox has symptoms of fever\n        \"HasSymptoms(monkeypox, headache)\", # Monkeypox has symptoms of headache\n        \"HasSymptoms(monkeypox, musclePains)\", # Monkeypox has symptoms of muscle pains\n        \"Tired(human) → GetsFlu(human)\" # People feel tired when they get flu.\n    ],\n    \"Conclusion\": [\n        \"¬∃x GetsFlu(x)\" # No one gets flu.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_8",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Symptons of Monkeypox include coughing.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"CausedBy(x, y)\": \"x is caused by y\",\n        \"OccursIn(x, y)\": \"x occurs in y\",\n        \"IsA(x, y)\": \"x is a type of y\",\n        \"SymptomsOf(x, y)\": \"y are symptoms of x\",\n        \"FeelsTiredDueTo(x, y)\": \"x feels tired due to y\"\n    },\n    \"Premises\": [\n        \"CausedBy(monkeypox, monkeypoxVirus)\",\n        \"OccursIn(monkeypoxVirus, humans)\",\n        \"IsA(humans, mammals)\",\n        \"IsA(mammals, animals)\",\n        \"SymptomsOf(monkeypox, fever)\",\n        \"SymptomsOf(monkeypox, headache)\",\n        \"SymptomsOf(monkeypox, musclePains)\",\n        \"SymptomsOf(monkeypox, feelingTired)\",\n        \"FeelsTiredDueTo(humans, glu)\"\n    ],\n    \"Conclusion\": {\n        \"¬∃x (SymptomsOf(monkeypox, coughing))\": \"Symptoms of Monkeypox do not include coughing.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_9",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Ocellated wild turkey.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{{\n\"Predicates\": \n     \"Eastern(x) ::: x is an Eastern wild turkey. \n     Osceola(x) ::: x is an Osceola wild turkey. \n     Goulds(x) ::: x is a Gould’s wild turkey. \n     Merriams(x) ::: x is a Merriam’s wild turkey. \n     RioGrande(x) ::: x is a Rio Grande wild turkey. \n     Ocellated(x) ::: x is an Ocellated wild turkey. \n     WildTurkey(x) ::: x is a wild turkey.\", \n\n\"Premises\": \n     \"¬Eastern(tom) ::: Tom is not an Eastern wild turkey. \n     ¬Osceola(tom) ::: Tom is not an Osceola wild turkey. \n     ¬(Goulds(tom) ∨ Merriams(tom) ∨ RioGrande(tom)) ::: Tom is also not a Gould's wild turkey, or a Merriam’s wild turkey, or a Rio Grande wild turkey. \n     WildTurkey(tom) ::: Tom is a wild turkey.\", \n\n\"Conclusion\": \n     \"Ocellated(tom) ::: Tom is an Ocellated wild turkey.\"\n}}}"
    ]
  },
  {
    "id": "FOLIO_dev_10",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Eastern wild turkey.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Eastern(x)\": \"x is an Eastern wild turkey.\",\n        \"Osceola(x)\": \"x is an Osceola wild turkey.\",\n        \"Goulds(x)\": \"x is a Gould's wild turkey.\",\n        \"Merriams(x)\": \"x is a Merriam's wild turkey.\",\n        \"RioGrande(x)\": \"x is a Rio Grande wild turkey.\",\n        \"Ocellated(x)\": \"x is an Ocellated wild turkey.\",\n        \"WildTurkey(x)\": \"x is a wild turkey.\"\n    },\n    \"Premises\": [\n        \"¬Eastern(tom)\", \n        \"¬Osceola(tom)\",\n        \"(¬Goulds(tom) ∧ ¬Merriams(tom) ∧ ¬RioGrande(tom))\", \n        \"WildTurkey(tom)\"\n    ],\n    \"Conclusion\": {\n        \"¬Eastern(tom)\": \"Tom is not an Eastern wild turkey.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_11",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Joey is a wild turkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here are the predicates, premises, and conclusion for the given problem:\n\n```json\n{\n  \"Predicates\": [\n    \"EasternWT(x)\": \"x is an Eastern wild turkey\",\n    \"OsceolaWT(x)\": \"x is an Osceola wild turkey\",\n    \"GouldsWT(x)\": \"x is a Gould's wild turkey\",\n    \"MerriamsWT(x)\": \"x is a Merriam's wild turkey\",\n    \"RioGrandeWT(x)\": \"x is a Rio Grande wild turkey\",\n    \"OcellatedWT(x)\": \"x is an Ocellated wild turkey\",\n    \"WildTurkey(x)\": \"x is a wild turkey\"\n  ],\n  \"Premises\": [\n    \"¬EasternWT(tom)\",\n    \"¬OsceolaWT(tom)\",\n    \"¬(GouldsWT(tom) ∨ MerriamsWT(tom) ∨ RioGrandeWT(tom))\",\n    \"WildTurkey(tom)\"\n  ],\n  \"Conclusion\": [\n    \"WildTurkey(joey)\" \n  ]\n}\n```\n\nPlease note that the conclusion is uncertain as there is no information provided about Joey being a wild turkey or not."
    ]
  },
  {
    "id": "FOLIO_dev_12",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is in the Top 10 list.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Japanese(x)\": \"x is a Japanese game company.\",\n        \"Created(x, y)\": \"x created the game y.\",\n        \"Top10(x)\": \"x is in the Top 10 list.\",\n        \"Sold(x, y)\": \"x sold more than y million copies.\"\n    },\n    \"Premises\": [\n        \"Japanese(company) ∧ Created(company, legendOfZelda)\": \"A Japanese game company created the game the Legend of Zelda.\",\n        \"∀x (Top10(x) → ∃y (Japanese(y) ∧ Created(y, x)))\": \"All games in the Top 10 list are made by Japanese game companies.\",\n        \"(Sold(legendOfZelda, 1) → Top10(legendOfZelda))\": \"If a game sells more than one million copies, then it will be selected into the Top 10 list.\",\n        \"Sold(legendOfZelda, 1)\": \"The Legend of Zelda sold more than one million copies.\"\n    ],\n    \"Conclusion\": {\n        \"Top10(legendOfZelda)\": \"The Legend of Zelda is in the Top 10 list.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_13",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? FIFA 22 is made by a Japanese video game company.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": \n        \"Japanese(x) ::: x is a Japanese game company.\", \n        \"CompanyCreatedGame(x, y) ::: x created y.\", \n        \"Top10List(y) ::: y is in the Top 10 list.\", \n        \"SelectedIntoTop10List(y) ::: y will be selected into the Top 10 list.\", \n        \"SoldMoreThanOneMillionCopies(y) ::: y sold more than one million copies.\"\n    ,\n    \"Premises\": \n        \"CompanyCreatedGame(japaneseGameCompany, legendOfZelda) ::: A Japanese game company created the game the Legend of Zelda.\", \n        \"∀x (Top10List(x) → CompanyCreatedGame(japaneseGameCompany, x)) ::: All games in the Top 10 list are made by Japanese game companies.\", \n        \"(SoldMoreThanOneMillionCopies(legendOfZelda) → SelectedIntoTop10List(legendOfZelda)) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\", \n        \"SoldMoreThanOneMillionCopies(legendOfZelda) ::: The Legend of Zelda sold more than one million copies.\"\n    ,\n    \"Conclusion\": \n        \"∃x (CompanyCreatedGame(x, FIFA22) ∧ Japanese(x)) ::: FIFA 22 is made by a Japanese video game company.\"\n}"
    ]
  },
  {
    "id": "FOLIO_dev_14",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is not in the Top 10 list.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n\"Predicates\": {\n\"Japanese(x)\": \"x is a Japanese game company.\",\n\"Creates(x, y)\": \"Company x creates game y.\",\n\"InTop10(x)\": \"Game x is in the Top 10 list.\",\n\"SellsMoreThanOneMillion(x)\": \"Game x sells more than one million copies.\"\n},\n\"Premises\": [\n\"Japanese(japaneseGameCompany) ∧ Creates(japaneseGameCompany, legendOfZelda)\": \"A Japanese game company created the game the Legend of Zelda.\",\n\"∀x (InTop10(x) → ∃y (Japanese(y) ∧ Creates(y, x)))\": \"All games in the Top 10 list are made by Japanese game companies.\",\n\"SellsMoreThanOneMillion(legendOfZelda) → InTop10(legendOfZelda)\": \"If a game sells more than one million copies, then it will be selected into the Top 10 list.\",\n\"SellsMoreThanOneMillion(legendOfZelda)\": \"The Legend of Zelda sold more than one million copies.\"\n],\n\"Conclusion\": [\n¬InTop10(legendOfZelda): \"The Legend of Zelda is not in the Top 10 list.\"\n]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_15",
    "context": "All squares have four sides. All four-sided things are shapes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All squares are shapes.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Square(x)\": \"x is a square\",\n        \"FourSides(x)\": \"x has four sides\",\n        \"Shape(x)\": \"x is a shape\"\n    },\n    \"Premises\": [\n        \"∀x (Square(x) → FourSides(x))\",  # All squares have four sides\n        \"∀x (FourSides(x) → Shape(x))\"   # All four-sided things are shapes\n    ],\n    \"Conclusion\": {\n        \"∀x (Square(x) → Shape(x))\"  # All squares are shapes\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_16",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Cute(x)\": \"x is cute\",\n        \"Turtle(x)\": \"x is a turtle\",\n        \"Rabbit(x)\": \"x is a rabbit\",\n        \"Squirrel(x)\": \"x is a squirrel\",\n        \"Skittish(x)\": \"x is skittish\",\n        \"Still(x)\": \"x is still\"\n    },\n    \"Premises\": [\n        \"∀x (Rabbit(x) → Cute(x))\",  # All rabbits are cute.\n        \"∃x (Turtle(x))\",  # Some turtles exist.\n        \"∀x (Animal(x) → Rabbit(x) ⊕ Squirrel(x))\",  # An animal is either a rabbit or a squirrel.\n        \"∀x (Skittish(x) → ¬Still(x))\",  # If something is skittish, then it is not still.\n        \"∀x (Squirrel(x) → Skittish(x))\",  # All squirrels are skittish.\n        \"Still(rock)\"  # Rock is still.\n    ],\n    \"Conclusion\": {\n        \"¬Turtle(rock)\": \"Rock is not a turtle\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_17",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is not a turtle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Cute(x)\": \"x is cute\",\n        \"Rabbit(x)\": \"x is a rabbit\",\n        \"Turtle(x)\": \"x is a turtle\",\n        \"Animal(x)\": \"x is an animal\",\n        \"Squirrel(x)\": \"x is a squirrel\",\n        \"Skittish(x)\": \"x is skittish\",\n        \"Still(x)\": \"x is still\"\n    },\n    \"Premises\": [\n        \"∀x (Rabbit(x) → Cute(x))\", \n        \"∃x Turtle(x)\",\n        \"∀x (Animal(x) → Rabbit(x) ⊕ Squirrel(x))\",\n        \"∀x (Skittish(x) → ¬Still(x))\",\n        \"∀x (Squirrel(x) → Skittish(x))\",\n        \"Still(rock)\"\n    ],\n    \"Conclusion\": [\n        \"¬Turtle(rock)\" \n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_18",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle or cute.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Rabbit(x)\": \"x is a rabbit\",\n        \"Cute(x)\": \"x is cute\",\n        \"Turtle(x)\": \"x is a turtle\",\n        \"Squirrel(x)\": \"x is a squirrel\",\n        \"Skittish(x)\": \"x is skittish\",\n        \"Still(x)\": \"x is still\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Rabbit(x) \\u2192 Cute(x))\",  # All rabbits are cute\n        \"\\u2203x Turtle(x)\",  # Some turtles exist\n        \"\\u2200x ((Animal(x) \\u2228 Rabbit(x)) \\u2228 Squirrel(x))\",  # An animal is either a rabbit or a squirrel\n        \"\\u2200x (Skittish(x) \\u2192 ¬Still(x))\",  # If something is skittish, then it is not still\n        \"\\u2200x (Squirrel(x) \\u2192 Skittish(x))\",  # All squirrels are skittish\n        \"Still(rock)\"  # Rock is still\n    ],\n    \"Conclusion\": {\n        \"(Turtle(rock) ∨ Cute(rock))\"  # Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle or cute.\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_19",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Cute(x)\": \"x is cute.\",\n        \"Turtle(x)\": \"x is a turtle.\",\n        \"Rabbit(x)\": \"x is a rabbit.\",\n        \"Squirrel(x)\": \"x is a squirrel.\",\n        \"Skittish(x)\": \"x is skittish.\",\n        \"Still(x)\": \"x is still.\"\n    },\n    \"Premises\": [\n        \"∀x (Rabbit(x) → Cute(x))\",  # All rabbits are cute.\n        \"∃x Turtle(x)\",  # Some turtles exist.\n        \"∀x ((Animal(x) ∧ ¬Rabbit(x)) → Squirrel(x))\",  # An animal is either a rabbit or a squirrel.\n        \"∀x (Skittish(x) → ¬Still(x))\",  # If something is skittish, then it is not still.\n        \"∀x (Squirrel(x) → Skittish(x))\",  # All squirrels are skittish.\n        \"Still(rock)\"  # Rock is still.\n    ],\n    \"Conclusion\": [\n        \"(¬(Turtle(rock) ∧ Squirrel(rock))) → (Cute(rock) ∨ Skittish(rock)))\" \n        # If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_20",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is cute and still, then Rock is a turtle and skittish.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Cute(x)\": \"x is cute\",\n        \"Turtle(x)\": \"x is a turtle\",\n        \"Rabbit(x)\": \"x is a rabbit\",\n        \"Squirrel(x)\": \"x is a squirrel\",\n        \"Skittish(x)\": \"x is skittish\",\n        \"Still(x)\": \"x is still\"\n    },\n    \"Premises\": [\n        \"∀x (Rabbit(x) → Cute(x))\",  # All rabbits are cute.\n        \"∃x (Turtle(x))\",  # Some turtles exist.\n        \"∀x ((Animal(x) ∧ ¬Rabbit(x)) → Squirrel(x))\",  # An animal is either a rabbit or a squirrel.\n        \"∀x (Skittish(x) → ¬Still(x))\",  # If something is skittish, then it is not still.\n        \"∀x (Squirrel(x) → Skittish(x))\",  # All squirrels are skittish.\n        \"Still(rock)\"  # Rock is still.\n    ],\n    \"Conclusion\": [\n        \"(Cute(rock) ∧ Still(rock)) → (Turtle(rock) ∧ Skittish(rock))\"  # If Rock is cute and still, then Rock is a turtle and skittish.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_21",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Stranger Things\" to Lisa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Popular(x)\": \"x is a popular Netflix show\",\n    \"BingeWatch(x, y)\": \"x will binge-watch y\",\n    \"Download(x, y)\": \"x will download y\",\n    \"Share(x, y, z)\": \"x will share y to z\"\n  },\n  \"Premises\": [\n    \"Popular(strangerThings)\", \n    \"∀x (Popular(x) → BingeWatch(karen, x))\", \n    \"(BingeWatch(karen, x) ↔ Download(karen, x))\", \n    \"¬Download(karen, blackMirror)\",\n    \"NetflixShow(blackMirror)\", \n    \"∀x (BingeWatch(karen, x) → Share(karen, x, lisa))\"\n  ],\n  \"Conclusion\": \"Share(karen, strangerThings, lisa)\"\n}"
    ]
  },
  {
    "id": "FOLIO_dev_22",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? \"Black Mirror\" is popular.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"NetflixShow(x)\": \"x is a Netflix show.\",\n        \"Popular(x)\": \"x is popular.\",\n        \"BingeWatch(x, y)\": \"x binge-watches y.\",\n        \"Download(x, y)\": \"x downloads y.\",\n        \"Share(x, y, z)\": \"x shares y to z.\"\n    },\n    \"Premises\": [\n        \"NetflixShow(strangerThings) ∧ Popular(strangerThings)\": \"\"Stranger Things\" is a popular Netflix show.\",\n        \"∀x (Popular(x) ∧ NetflixShow(x) → BingeWatch(karen, x))\": \"If a Netflix show is popular, Karen will binge-watch it.\",\n        \"(BingeWatch(karen, strangerThings) ¬ Download(karen, strangerThings))\": \"If and only if Karen binge-watches a Netflix show, she will download it.\",\n        \"¬Download(karen, blackMirror)\": \"Karen does not download \\\"Black Mirror\\\".\",\n        \"NetflixShow(blackMirror)\": \"\\\"Black Mirror\\\" is a Netflix show.\",\n        \"∀x (BingeWatch(karen, x) → Share(karen, x, lisa))\": \"If Karen binge-watches a Netflix show, she will share it to Lisa.\"\n    ],\n    \"Conclusion\": {\n        \"? Popular(blackMirror)\": \"Is \\\"Black Mirror\\\" popular?\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_23",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Black Mirror\" to Lisa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Popular(x)\": \"x is a popular Netflix show.\",\n        \"BingeWatch(x, y)\": \"x binge-watches y.\",\n        \"Download(x, y)\": \"x downloads y.\",\n        \"Share(x, y, z)\": \"x shares y to z.\"\n    },\n    \"Premises\": [\n        \"Popular(strangerThings)\", \n        \"∀x (Popular(x) → BingeWatch(karen, x))\", \n        \"(BingeWatch(karen, x) ↔ Download(karen, x))\", \n        \"¬Download(karen, blackMirror)\", \n        \"NetflixShow(blackMirror)\", \n        \"∀x (BingeWatch(karen, x) → Share(karen, x, lisa))\"\n    ],\n    \"Conclusion\": {\n        \"Share(karen, blackMirror, lisa)\": \"Karen will share \\\"Black Mirror\\\" to Lisa.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_24",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Capital(x, y)\": \"x is the capital of y\",\n        \"PopulousCity(x)\": \"x is a populous city\",\n        \"LocatedIn(x, y)\": \"x is located in y\",\n        \"HostedOlympics(x, y)\": \"x hosted y Olympics\",\n        \"HostedParalympics(x, y)\": \"x hosted y Paralympics\",\n        \"RankedAmongBest(x, y)\": \"x is ranked among the best in y\"\n    },\n    \"Premises\": [\n        \"Capital(beijing, china)\", \n        \"PopulousCity(beijing)\", \n        \"LocatedIn(beijing, northernChina)\", \n        \"HostedOlympics(beijing, summer2008) ∧ HostedParalympics(beijing, summer2008)\",\n        \"∃x (HostedOlympics(beijing, x) ∧ HostedWinterOlympics(beijing, x))\", \n        \"∀x ∃y (University(x) ∧ RankedAmongBest(x, y))\"\n    ],\n    \"Conclusion\": {\n        \"HostedOlympics(beijing, summer2008) ∧ ∃x (HostedWinterOlympics(beijing, x))\" : \"Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_25",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is located in southern China.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"CapitalOf(x, y)\": \"x is the capital of y\",\n        \"MostPopulousCity(x)\": \"x is the most populous city\",\n        \"LocatedIn(x, y)\": \"x is located in y\",\n        \"HostedEvent(x, y)\": \"x hosted event y\",\n        \"RankedAmongBest(x, y)\": \"x is ranked among best in y\"\n    },\n    \"Premises\": [\n        \"CapitalOf(Beijing, China)\",\n        \"MostPopulousCity(Beijing)\",\n        \"LocatedIn(Beijing, NorthernChina)\",\n        \"HostedEvent(Beijing, SummerOlympics2008)\",\n        \"HostedEvent(Beijing, WinterParalympicsGames)\",\n        \"RankedAmongBest(BeijingsUniversities, AsiaPacific)\"\n    ],\n    \"Conclusion\": [\n        \"¬LocatedIn(Beijing, SouthernChina)\" \n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_26",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is the second largest Chinese city by urban population.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Capital(x, y)\": \"x is the capital of y\",\n        \"PopulousCity(x)\": \"x is a populous city\",\n        \"LocatedIn(x, y)\": \"x is located in y\",\n        \"HostedGames(x, y)\": \"x hosted y games\",\n        \"RankAmongBest(x, y, z)\": \"x consistently rank among the best in y and z\"\n    },\n    \"Premises\": [\n        \"Capital(beijing, peoplesRepublicOfChina)\",\n        \"PopulousCity(beijing)\",\n        \"LocatedIn(beijing, northernChina)\",\n        \"HostedGames(beijing, 2008SummerOlympics) ∧ HostedGames(beijing, 2008SummerParalympics)\",\n        \"∃x (Capital(x, china) ∧ PopulousCity(x)) → ¬(beijing = x)\"\n    ],\n    \"Conclusion\": {\n        \"¬PopulousCity(beijing)\": \"Beijing is not the second largest Chinese city by urban population.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_27",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is an alien.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Alien(x)\": \"x is an alien.\",\n        \"Extraterrestrial(x)\": \"x is an extraterrestrial.\",\n        \"Human(x)\": \"x is a human.\",\n        \"FromEarth(x)\": \"x is from Earth.\",\n        \"FromMars(x)\": \"x is from Mars.\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Alien(x) \\u2192 Extraterrestrial(x))\",  # All aliens are extraterrestrial.\n        \"\\u2200x (FromMars(x) \\u2192 Alien(x))\",  # If someone is from Mars, then they are aliens.\n        \"\\u2200x (Extraterrestrial(x) \\u2192 ¬Human(x))\",  # No extraterrestrial is human.\n        \"\\u2200x (FromEarth(x) \\u2192 Human(x))\",  # Everyone from Earth is a human.\n        \"¬(FromEarth(marvin) ∧ FromMars(marvin))\",  # Marvin cannot be from Earth and from Mars.\n        \"¬FromEarth(marvin) \\u2192 Extraterrestrial(marvin)\"  # If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    ],\n    \"Conclusion\": {\n        \"Alien(marvin)\": \"Marvin is an alien.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_28",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is neither a human nor from Mars.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Alien(x)\": \"x is an alien.\",\n    \"Extraterrestrial(x)\": \"x is an extraterrestrial.\",\n    \"Human(x)\": \"x is a human.\",\n    \"FromEarth(x)\": \"x is from Earth.\",\n    \"FromMars(x)\": \"x is from Mars.\"\n  },\n  \"Premises\": [\n    \"\\u2200x (Alien(x) \\u2192 Extraterrestrial(x))\", // All aliens are extraterrestrial.\n    \"\\u2200x (FromMars(x) \\u2192 Alien(x))\", // If someone is from Mars, then they are aliens.\n    \"\\u2200x \\u00ac(Extraterrestrial(x) \\u2227 Human(x))\", // No extraterrestrial is human.\n    \"\\u2200x (FromEarth(x) \\u2192 Human(x))\", // Everyone from Earth is a human.\n    \"\\u00ac(Dependent(marvin) \\u2228 FromMars(marvin))\", // Marvin cannot be from Earth and from Mars.\n    \"\\u00acFromEarth(marvin) \\u2192 Extraterrestrial(marvin)\" // If Marvin is not from Earth, then Marvin is an extraterrestrial.\n  ],\n  \"Conclusion\": {\n    \"\\u00ac(Human(marvin) \\u2228 FromMars(marvin))\" // Marvin is neither a human nor from Mars.\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_29",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Marvin is not from Mars, then Marvin is a human.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Alien(x)\": \"x is an alien\",\n        \"Extraterrestrial(x)\": \"x is an extraterrestrial\",\n        \"Human(x)\": \"x is a human\",\n        \"FromEarth(x)\": \"x is from Earth\",\n        \"FromMars(x)\": \"x is from Mars\"\n    },\n    \"Premises\": [\n        \"∀x (Alien(x) → Extraterrestrial(x))\",  # All aliens are extraterrestrial.\n        \"∀x (FromMars(x) → Alien(x))\",  # If someone is from Mars, then they are aliens.\n        \"¬∃x (Extraterrestrial(x) ∧ Human(x))\",  # No extraterrestrial is human.\n        \"∀x (FromEarth(x) → Human(x))\",  # Everyone from Earth is a human.\n        \"¬(FromEarth(marvin) ∧ FromMars(marvin))\",  # Marvin cannot be from Earth and from Mars.\n        \"¬FromEarth(marvin) → Extraterrestrial(marvin)\"  # If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    ],\n    \"Conclusion\": {\n        \"¬FromMars(marvin) → Human(marvin)\"  # If Marvin is not from Mars, then Marvin is a human.\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_30",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic is a Grand Slam champion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"GrandSlamChampion(x) ::: x is a Grand Slam champion.\",\n        \"OscarNominatedActor(x) ::: x is an Oscar-nominated actor.\",\n        \"ProfessionalTennisPlayer(x) ::: x is a professional tennis player.\",\n        \"Celebrity(x) ::: x is a celebrity.\",\n        \"Athlete(x) ::: x is an athlete.\",\n        \"WellPaid(x) ::: x is well paid.\",\n        \"LivesInTaxHaven(x) ::: x lives in tax haven.\",\n        \"Famous(x) ::: x is famous.\"\n    ],\n    \"Premises\": [\n        \"(GrandSlamChampion(djokovic) ⊕ OscarNominatedActor(djokovic))\",\n        \"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\",\n        \"∀x (OscarNominatedActor(x) → Celebrity(x))\",\n        \"∀x (ProfessionalTennisPlayer(x) → Athlete(x))\",\n        \"∀x (Celebrity(x) → WellPaid(x))\",\n        \"∀x (Athlete(x) → Famous(x))\",\n        \"∀x (WellPaid(x) → LivesInTaxHaven(x))\",\n        \"(Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic)\"\n    ],\n    \"Conclusion\": [\n        \"GrandSlamChampion(djokovic)\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_31",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic lives in a tax haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"GrandSlam(x)\": \"x is a Grand Slam champion\",\n    \"OscarNominated(x)\": \"x is an Oscar-nominated actor\",\n    \"ProfessionalTennisPlayer(x)\": \"x is a professional tennis player\",\n    \"Celebrity(x)\": \"x is a celebrity\",\n    \"Athlete(x)\": \"x is an athlete\",\n    \"WellPaid(x)\": \"x is well paid\",\n    \"Famous(x)\": \"x is famous\",\n    \"LivesInTaxHaven(x)\": \"x lives in a tax haven\"\n  },\n  \"Premises\": [\n    \"(GrandSlam(djokovic) ⊕ OscarNominated(djokovic))\", \n    \"∀x (GrandSlam(x) → ProfessionalTennisPlayer(x))\",\n    \"∀x (OscarNominated(x) → Celebrity(x))\",\n    \"∀x (ProfessionalTennisPlayer(x) → Athlete(x))\",\n    \"∀x (Celebrity(x) → WellPaid(x))\",\n    \"∀x (Athlete(x) → Famous(x))\",\n    \"∀x (WellPaid(x) → LivesInTaxHaven(x))\",\n    \"(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)\"\n  ],\n  \"Conclusion\": {\n    \"LivesInTaxHaven(djokovic)\": \"Djokovic lives in a tax haven\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_32",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic does not live in a tax haven.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"GrandSlamChampion(x)\": \"x is a Grand Slam champion.\",\n        \"OscarNominatedActor(x)\": \"x is an Oscar-nominated actor.\",\n        \"ProfessionalTennisPlayer(x)\": \"x is a professional tennis player.\",\n        \"Celebrity(x)\": \"x is a celebrity.\",\n        \"Athlete(x)\": \"x is an athlete.\",\n        \"WellPaid(x)\": \"x is well paid.\",\n        \"Famous(x)\": \"x is famous.\",\n        \"LivesInTaxHaven(x)\": \"x lives in a tax haven.\"\n    },\n    \"Premises\": [\n        \"∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))\",\n        \"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))\",\n        \"∀x (OscarNominatedActor(x) → Celebrity(x))\",\n        \"∀x (ProfessionalTennisPlayer(x) → Athlete(x))\",\n        \"∀x (Celebrity(x) → WellPaid(x))\",\n        \"∀x (Athlete(x) → Famous(x))\",\n        \"∀x (WellPaid(x) → LivesInTaxHaven(x))\",\n        \"(Famous(djokovic) ∧ Athlete(djokovic)) → LivesInTaxHaven(djokovic)\"\n    ],\n    \"Conclusion\": [\n        \"¬LivesInTaxHaven(djokovic)\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_33",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads a professional wrestling stable.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"ProfessionalWrestlingStable(x)\": \"x is a professional wrestling stable\",\n        \"Lead(x, y)\": \"x leads y\",\n        \"Include(x, y)\": \"x includes y\",\n        \"Feud(x, y)\": \"x has a feud with y\"\n    },\n    \"Premises\": {\n        \"ProfessionalWrestlingStable(diamondMine)\": \"Diamond Mine is a professional wrestling stable\",\n        \"Lead(roderickStrong, diamondMine)\": \"Roderick Strong leads Diamond Mine\",\n        \"Include(diamondMine, creedBrothers)\": \"Diamond Mine includes the Creed Brothers\",\n        \"Include(diamondMine, ivyNile)\": \"Diamond Mine includes Ivy Nile\",\n        \"Feud(imperium, diamondMine)\": \"Imperium has a feud with Diamond Mine\"\n    },\n    \"Conclusion\": {\n        \"Lead(roderickStrong, diamondMine) ∧ ProfessionalWrestlingStable(diamondMine)\": \"Roderick Strong leads a professional wrestling stable\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_34",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads the Creed Brothers.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Lead(x, y)\": \"x leads y\",\n        \"PartOf(x, y)\": \"x is part of y\",\n        \"HasFeudWith(x, y)\": \"x has a feud with y\"\n    },\n    \"Premises\": [\n        \"ProfessionalWrestlingStable(diamondMine) ∧ FormedInWWE(diamondMine)\": \"Diamond Mine is a professional wrestling stable formed in WWE.\",\n        \"Lead(roderickStrong, diamondMine)\": \"Roderick Strong leads Diamond Mine.\",\n        \"(PartOf(creedBrothers, diamondMine) ∧ PartOf(ivynile, diamondMine))\": \"Diamond Mine includes the Creed Brothers and Ivy Nile.\",\n        \"HasFeudWith(imperium, diamondMine)\": \"Imperium has a feud with Diamond Mine.\"\n    ],\n    \"Conclusion\": {\n        \"Lead(roderickStrong, creedBrothers)\": \"Roderick Strong leads the Creed Brothers.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_35",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"ProfessionalWrestlingStable(x)\": \"x is a professional wrestling stable\",\n        \"Lead(x, y)\": \"x leads y\",\n        \"Includes(x, y)\": \"x includes y\",\n        \"Feud(x, y)\": \"x has a feud with y\"\n    },\n    \"Premises\": [\n        \"ProfessionalWrestlingStable(diamondMine)\", \n        \"Lead(roderickStrong, diamondMine)\",\n        \"Includes(diamondMine, creedBrothers)\",\n        \"Includes(diamondMine, ivyNile)\",\n        \"Feud(imperium, diamondMine)\"\n    ],\n    \"Conclusion\": {\n        \"¬(∃x (ProfessionalWrestlingStable(x) ∧ Includes(x, ivyNile) ∧ ¬Feud(imperium, x)))\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_36",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is a composer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"MusicPiece(x)\": \"x is a music piece.\",\n        \"Composer(x)\": \"x is a composer.\",\n        \"Write(x, y)\": \"x writes y.\",\n        \"Premiere(x, y)\": \"x premieres y.\",\n        \"Orchestra(x)\": \"x is an orchestra.\",\n        \"Lead(x, y)\": \"x leads y.\",\n        \"Conductor(x)\": \"x is a conductor.\"\n    },\n    \"Premises\": [\n        \"MusicPiece(SymphonyNo9)\", \n        \"∀x (Composer(x) → ∃y (Write(x, y) ∧ MusicPiece(y)))\",  \n        \"Write(Beethoven, SymphonyNo9)\",\n        \"Premiere(ViennaMusicSociety, SymphonyNo9)\",\n        \"Orchestra(ViennaMusicSociety)\",\n        \"Lead(Beethoven, ViennaMusicSociety)\",\n        \"∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))\"\n    ],\n    \"Conclusion\": {\n        \"Composer(Beethoven)\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_37",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some orchestras premiered music pieces.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{\"Predicates\": \"MusicPiece(x) ::: x is a music piece.\\n Composer(x) ::: x is a composer.\\n Write(x, y) ::: x writes y.\\n Premiere(x, y) ::: x premieres y.\\n Orchestra(x) ::: x is an orchestra.\\n Leads(x, y) ::: x leads y.\\n Conductor(x) ::: x is a conductor.\",\n\"Premises\": \"MusicPiece(symphonyNo9) ::: Symphony No. 9 is a music piece.\\n ∀x (Composer(x) → Write(x, symphonyNo9)) ::: Composers write music pieces.\\n Write(beethoven, symphonyNo9) ::: Beethoven wrote Symphony No. 9.\\n Premiere(viennaMusicSociety, symphonyNo9) ::: Vienna Music Society premiered Symphony No. 9.\\n Orchestra(viennaMusicSociety) ::: Vienna Music Society is an orchestra.\\n Leads(beethoven, viennaMusicSociety) ::: Beethoven leads the Vienna Music Society.\\n ∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Leads(y, x))) ::: Orchestras are led by conductors.\",\n\"Conclusion\": \"∃x (Premiere(x, symphonyNo9)) ::: Some orchestras premiered music pieces.\"\n}}"
    ]
  },
  {
    "id": "FOLIO_dev_38",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is not a conductor.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here's the solution in JSON format as requested:\n\n\n{\n    \"Predicates\": {\n        \"MusicPiece(x)\": \"x is a music piece.\",\n        \"Composer(x)\": \"x is a composer.\",\n        \"Write(x, y)\": \"x writes y.\",\n        \"Premiered(x, y)\": \"x premiered y.\",\n        \"Orchestra(x)\": \"x is an orchestra.\",\n        \"Lead(x, y)\": \"x leads y.\",\n        \"Conductor(x)\": \"x is a conductor.\"\n    },\n    \"Premises\": [\n        \"MusicPiece(symphonyNo9)\", \n        \"∀x (Composer(x) → Write(x, symphonyNo9))\",  \n        \"Write(beethoven, symphonyNo9)\",\n        \"Premiered(viennaMusicSociety, symphonyNo9)\",\n        \"Orchestra(viennaMusicSociety)\",\n        \"Lead(beethoven, viennaMusicSociety)\",\n        \"∀x (Orchestra(x) → ∃y (Conductor(y) ∧ Lead(y, x)))\"\n    ],\n    \"Conclusion\": [\n        \"¬Conductor(beethoven)\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_39",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is a mass product design.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Timeless(x)\": \"x is a timeless design style.\",\n        \"MassProductDesign(x)\": \"x is a mass product design.\",\n        \"Evocative(x)\": \"x is an evocative design style.\",\n        \"Dreamy(x)\": \"x is a dreamy design style.\"\n    },\n    \"Premises\": [\n        \"\\u2200x (ZahaHadidDesigns(x) → Timeless(x))\",  # All of Zaha Hadid's design styles are timeless.\n        \"\\u00ac\\u2203x (MassProductDesign(x) ∧ Timeless(x))\",  # No mass product design is timeless.\n        \"(ZahaHadidDesignStyle ∨ KellyWearstlerDesignStyle)\",  # Either Zaha Hadid's design style or Kelly Wearstler's design style.\n        \"\\u2200x (KellyWearstlerDesigns(x) → Evocative(x))\",  # All of Kelly Wearstler's design styles are evocative.\n        \"\\u2200x (KellyWearstlerDesigns(x) → Dreamy(x))\",  # All of Kelly Wearstler's design styles are dreamy.\n        \"(Timeless(MaxDesign) → (MassProductDesign(MaxDesign) ∧ Evocative(MaxDesign)))\"  # If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n    ],\n    \"Conclusion\": {\n        \"? MassProductDesign(MaxDesign)\"  # A design by Max is a mass product design\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_40",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is evocative and dreamy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Timeless(x)\": \"x is a timeless design style\",\n    \"MassProductDesign(x)\": \"x is a mass product design\",\n    \"Evocative(x)\": \"x is an evocative design style\",\n    \"Dreamy(x)\": \"x is a dreamy design style\",\n    \"DesignStyleOf(x, y)\": \"x has the design style of y\"\n  },\n  \"Premises\": [\n    \"∀x (DesignStyleOf(zahaHadid, x) → Timeless(x))\", # All of Zaha Hadid's design styles are timeless.\n    \"¬∃x (MassProductDesign(x) ∧ Timeless(x))\", # No mass product design is timeless.\n    \"(∃x DesignStyleOf(zahaHadid, x) ⊕ ∃x DesignStyleOf(kellyWearstler, x))\", # Either Zaha Hadid's design style or Kelly Wearstler's design style.\n    \"∀x (DesignStyleOf(kellyWearstler, x) → Evocative(x))\", # All of Kelly Wearstler's design styles are evocative.\n    \"∀x (DesignStyleOf(kellyWearstler, x) → Dreamy(x))\", # All of Kelly Wearstler's design styles are dreamy.\n    \"(Timeless(max) → (MassProductDesign(max) ∧ Evocative(max)))\" # If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n  ],\n  \"Conclusion\": {\n    \"Evocative(max) ∧ Dreamy(max)\": \"A design by Max is evocative and dreamy.\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_41",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is either evocative or dreamy.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```json\n{\n    \"Predicates\": {\n        \"Timeless(x)\": \"x's design style is timeless\",\n        \"MassProduct(x)\": \"x's design style is a mass product design\",\n        \"Evocative(x)\": \"x's design style is evocative\",\n        \"Dreamy(x)\": \"x's design style is dreamy\"\n    },\n    \"Premises\": [\n        \"\\u2200x (DesignByZahaHadid(x) \\u2192 Timeless(x))\",  // All of Zaha Hadid's design styles are timeless.\n        \"\\u00ac\\u2203x (MassProduct(x) \\u2227 Timeless(x))\",  // No mass product design is timeless.\n        \"(DesignByZahaHadid(max) \\u22c5 DesignByKellyWearstler(max))\",  // Either Zaha Hadid's design style or Kelly Wearstler's design style.\n        \"\\u2200x (DesignByKellyWearstler(x) \\u2192 Evocative(x))\",  // All of Kelly Wearstler's design styles are evocative.\n        \"\\u2200x (DesignByKellyWearstler(x) \\u2192 Dreamy(x))\",  // All of Kelly Wearstler's design styles are dreamy.\n        \"(Timeless(max) \\u2192 (MassProduct(max) \\u2227 Evocative(max)))\"   // If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n    ],\n    \"Conclusion\": {\n        \"(Evocative(max) \\u22c5 Dreamy(max))\"  // A design by Max is either evocative or dreamy.\n    }\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_42",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is among the most active players in major tennis.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Ranked(x)\": \"x is ranked highly by the Women's Tennis Association\",\n    \"Active(x)\": \"x is among the most active players in major tennis\",\n    \"LostToIga(x)\": \"x lost to Iga Świątek\",\n    \"PlayerAtRolandGarros20xxFemale(x)\": \"x is a female tennis player at Roland Garros 20xx\",\n    \"PlayerAtRolandGarros20xxMale(x)\": \"x is a male tennis player at Roland Garros 20xx\",\n    \"LostToRafael(x)\": \"x lost to Rafael Nadal\"\n  },\n  \"Premises\": [\n    \"∀x (Ranked(x) → Active(x))\", \n    \"∀x (LostToIga(x) → Ranked(x))\", \n    \"∀x (PlayerAtRolandGarros20xxFemale(x) → LostToIga(x))\",\n    \"(∃x PlayerAtRolandGarros20xxFemale(x)) ⊕ (∃x PlayerAtRolandGarros20xxMale(x))\", \n    \"∀x (PlayerAtRolandGarros20xxMale(x) → LostToRafael(x))\", \n    \"(Ranked(cocoGauff) ∨ LostToRafael(cocoGauff)) → ¬PlayerAtRolandGarros20xxMale(cocoGauff)\"\n  ],\n  \"Conclusion\": {\n    \"Active(cocoGauff)\" : \"Coco Gauff is among the most active players in major tennis.\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_43",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff has lost to Rafael Nadal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"RankedHighly(x)\": \"x is ranked highly by the Women's Tennis Association\",\n        \"MostActive(x)\": \"x is among the most active players in major tennis\",\n        \"LostToIgaSwiatek(x)\": \"x lost to Iga Świątek\",\n        \"FemaleTennisPlayerAtRolandGarros2022(x)\": \"x is a female tennis player at Roland Garros 2022\",\n        \"MaleTennisPlayerAtRolandGarros2022(x)\": \"x is a male tennis player at Roland Garros 2022\",\n        \"LostToRafaelNadal(x)\": \"x lost to Rafael Nadal\"\n    },\n    \"Premises\": [\n        \"∀x (RankedHighly(x) → MostActive(x))\", \n        \"∀x (LostToIgaSwiatek(x) → RankedHighly(x))\",\n        \"∀x (FemaleTennisPlayerAtRolandGarros2022(x) → LostToIgaSwiatek(x))\",\n        \"(∃x FemaleTennisPlayerAtRolandGarros2022(x)) ⊕ (∃x MaleTennisPlayerAtRolandGarros2022(x))\", \n        \"∀x (MaleTennisPlayerAtRolandGarros2022(x) → LostToRafaelNadal(x))\",\n        \"(RankedHighly(cocoGauff) ∨ LostToRafaelNadal(cocoGauff)) → ¬ MaleTennisPlayerAtRolandGarros2022(cocoGauff)\"\n    ],\n    \"Conclusion\": {\n        \"LostToRafaelNadal(cocoGauff)\": \"Coco Gauff has lost to Rafael Nadal\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_44",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"HighlyRanked(x)\": \"x is ranked highly by the Women's Tennis Association.\",\n        \"ActivePlayer(x)\": \"x is among the most active players in major tennis.\",\n        \"LostToIgaSwiatek(x)\": \"x lost to Iga Świątek.\",\n        \"FemaleTennisPlayerAtRolandGarros2022(x)\": \"x is a female tennis player at Roland Garros 2022.\",\n        \"MaleTennisPlayerAtRolandGarros2022(x)\": \"x is a male tennis player at Roland Garros 2022.\",\n        \"LostToRafaelNadal(x)\": \"x lost to Rafael Nadal.\"\n    },\n    \"Premises\": [\n        \"∀x (HighlyRanked(x) → ActivePlayer(x))\", \n        \"∀x (LostToIgaSwiatek(x) → HighlyRanked(x))\",\n        \"∀x (FemaleTennisPlayerAtRolandGarros2022(x) → LostToIgaSwiatek(x))\",\n        \"(∃x FemaleTennisPlayerAtRolandGarros2022(x)) ⊕ (∃x MaleTennisPlayerAtRolandGarros2022(x))\", \n        \"∀x (MaleTennisPlayerAtRolandGarros2022(x) → LostToRafaelNadal(x))\",\n        \"(HighlyRanked(cocoGauff) ∨ LostToRafaelNadal(cocoGauff)) → ¬MaleTennisPlayerAtRolandGarros2022(cocoGauff)\"\n    ],\n    \"Conclusion\": {\n        \"¬(LostToIgaSwiatek(cocoGauff) ∨ ActivePlayer(cocoGauff))\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_45",
    "context": "All cats are mammals. Some pets are not mammals.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No pets are cats.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Cat(x)\": \"x is a cat.\",\n    \"Mammal(x)\": \"x is a mammal.\",\n    \"Pet(x)\": \"x is a pet.\"\n  },\n  \"Premises\": [\n    \"\\u2200x (Cat(x) \\u2192 Mammal(x))\", # All cats are mammals.\n    \"\\u2203x (Pet(x) \\u2227 \\u00acMammal(x))\" # Some pets are not mammals.\n  ],\n  \"Conclusion\": {\n    \"\\u00ac\\u2203x (Pet(x) \\u2227 Cat(x))\" # No pets are cats.\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_46",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is summer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Season(x)\": \"x is a season\",\n        \"Student(x)\": \"x is a student\",\n        \"Love(x, y)\": \"x loves y\",\n        \"Favorite(x, y)\": \"y is x's favorite season\",\n        \"Vacation(x)\": \"x wants to have a long vacation\"\n    },\n    \"Premises\": [\n        \"∃x (Season(x) ∧ Season(spring) ∧ Season(summer) ∧ Season(fall) ∧ Season(winter))\",  # There are four seasons in a year: Spring, Summer, Fall, and Winter.\n        \"∀x (Student(x) ∧ Vacation(x) → Love(x, summer))\",  # All students who want to have a long vacation love summer the most.\n        \"Favorite(emma, summer)\",  # Emma's favorite season is summer.\n        \"¬Favorite(mia, summer)\",  # Mia's favorite season is not the same as Emma's.\n        \"Vacation(james)\"  # James wants to have a long vacation.\n    ],\n    \"Conclusion\": {\n        \"Favorite(james, summer)\": \"James's favorite season is summer\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_47",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is fall.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": \n        \"Season(x) ::: x is a season.\n         Favorite(x, y) ::: x's favorite season is y.\n         LongVacation(x) ::: x wants to have a long vacation.\",\n    \n    \"Premises\": \n        \"∃x (Season(x) ∧ Name(x, spring)) ::: There is a season called Spring.\n         ∃x (Season(x) ∧ Name(x, summer)) ::: There is a season called Summer.\n         ∃x (Season(x) ∧ Name(x, fall)) ::: There is a season called Fall.\n         ∃x (Season(x) ∧ Name(x, winter)) ::: There is a season called Winter.\n         ∀x (LongVacation(x) → Favorite(x, summer)) ::: All students who want to have a long vacation love summer the most.\n         Favorite(emma, summer) ::: Emma's favorite season is summer.\n         ¬Favorite(mia, summer) ::: Mia's favorite season is not the same as Emma's.\n         LongVacation(james) ::: James wants to have a long vacation.\",\n    \n    \"Conclusion\": \n        \"Favorite(james, fall)\" ::: James's favorite season is fall.\n}"
    ]
  },
  {
    "id": "FOLIO_dev_48",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mia's favorite season is spring.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"FavoriteSeason(x, y)\": \"x's favorite season is y.\",\n        \"WantLongVacation(x)\": \"x wants to have a long vacation.\",\n        \"LoveSummerTheMost(x)\": \"x loves summer the most.\"\n    },\n    \"Premises\": [\n        \"∀x (WantLongVacation(x) → LoveSummerTheMost(x))\", \n        \"FavoriteSeason(emma, summer)\",\n        \"¬(FavoriteSeason(mia, summer))\",\n        \"WantLongVacation(james)\"\n    ],\n    \"Conclusion\": {\n        \"FavoriteSeason(mia, spring)\": \"Mia's favorite season is spring.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_49",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is printed text.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Digital(x)\": \"x is digital media\",\n        \"Analog(x)\": \"x is analog\",\n        \"PrintedText(x)\": \"x is printed text\",\n        \"StreamingService(x)\": \"x is a streaming service\",\n        \"HardcoverBook(x)\": \"x is a hardcover book\"\n    },\n    \"Premises\": [\n        \"∀x (Digital(x) → ¬Analog(x))\", # No digital media are analog.\n        \"∀x (PrintedText(x) → Analog(x))\", # Every printed text is analog.\n        \"∀x (StreamingService(x) → Digital(x))\", # All streaming services are digital.\n        \"(HardcoverBook(1984) → PrintedText(1984))\", # If an object is a hardcover book then it is printed text.\n        \"(StreamingService(1984) → HardcoverBook(1984))\" # If 1984 is a streaming service, then 1984 is a hardcover book.\n    ],\n    \"Conclusion\": {\n        \"PrintedText(1984)\": \"Is 1984 printed text?\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_50",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is a streaming service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Digital(x)\": \"x is digital\",\n        \"Analog(x)\": \"x is analog\",\n        \"StreamingService(x)\": \"x is a streaming service\",\n        \"PrintedText(x)\": \"x is printed text\",\n        \"HardcoverBook(x)\": \"x is a hardcover book\"\n    },\n    \"Premises\": [\n        \"¬∃x (Digital(x) ∧ Analog(x))\",  // No digital media are analog.\n        \"∀x (PrintedText(x) → Analog(x))\",  // Every printed text is analog.\n        \"∀x (StreamingService(x) → Digital(x))\",  // All streaming services are digital.\n        \"∀x (HardcoverBook(x) → PrintedText(x))\",  // If an object is a hardcover book then it is printed text.\n        \"(StreamingService(1984) → HardcoverBook(1984))\"  // If 1984 is a streaming service, then 1984 is a hardcover book.\n    ],\n    \"Conclusion\": {\n        \"Query\": \"StreamingService(1984)\"  // Is 1984 a streaming service?\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_51",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is not a streaming service.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```\n{\n    \"Predicates\": {\n        \"Digital(x)\": \"x is digital\",\n        \"Analog(x)\": \"x is analog\",\n        \"PrintedText(x)\": \"x is a printed text\",\n        \"StreamingService(x)\": \"x is a streaming service\",\n        \"HardcoverBook(x)\": \"x is a hardcover book\"\n    },\n    \"Premises\": [\n        \"¬∃x (Digital(x) ∧ Analog(x))\", \n        \"∀x (PrintedText(x) → Analog(x))\", \n        \"∀x (StreamingService(x) → Digital(x))\", \n        \"∀x (HardcoverBook(x) → PrintedText(x))\",\n        \"(1984 is a streaming service) → (1984 is a hardcover book)\"\n    ],\n    \"Conclusion\": [\n        \"¬(1984 is a streaming service)\"\n    ]\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_52",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Basque is a Romance language.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": \n    {\n        \"Romance(x)\": \"x is a Romance language\",\n        \"IndoEuropean(x)\": \"x is an Indo-European language\",\n        \"LanguageFamily(x)\": \"x is a language family\",\n        \"RelatedTo(x, y)\": \"x is related to y\"\n    },\n    \n    \"Premises\": \n    {\n        \"∀x (Romance(x) → IndoEuropean(x))\": \"All Romance languages are Indo-European languages.\",\n        \"LanguageFamily(romance)\": \"The Romance languages are a language family.\",\n        \"∀x ∀y ((LanguageFamily(x) ∧ Language(y) ∧ Language(z)) → RelatedTo(y, z))\": \"All languages within a language family are related to each other.\",\n        \"Romance(french)\": \"French is a Romance language.\",\n        \"Romance(spanish)\": \"Spanish is a Romance language.\",\n        \"RelatedTo(german, spanish)\": \"German is related to Spanish.\",\n        \"¬∃x (Language(x) ∧ RelatedTo(basque, x))\": \"Basque is not related to any other language.\"\n    },\n    \n    \"Conclusion\": \n    {\n        \"Romance(basque)\": \"Basque is a Romance language.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_53",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? German is a Romance language.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"RomanceLanguage(x)\": \"x is a Romance language.\",\n        \"IndoEuropeanLanguage(x)\": \"x is an Indo-European language.\",\n        \"RelatedTo(x, y)\": \"x is related to y.\",\n        \"Family(x)\": \"x is a family.\"\n    },\n    \"Premises\": [\n        \"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))\",\n        \"Family(RomanceLanguages)\",\n        \"∀x ∀y ((LanguageFamily(x) ∧ InLanguage(y, x) ∧ InLanguage(z, x)) → RelatedTo(y, z))\",\n        \"RomanceLanguage(French)\",\n        \"RomanceLanguage(Spanish)\",\n        \"RelatedTo(German, Spanish)\",\n        \"¬∃x (Basque = x ∨ RelatedTo(Basque, x))\"\n    ],\n    \"Conclusion\": {\n        \"RomanceLanguage(German)\": \"German is a Romance language.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_54",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? French is an Indo-European language.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Romance(x)\": \"x is a Romance language\",\n        \"IndoEuropean(x)\": \"x is an Indo-European language\",\n        \"LanguageFamily(x)\": \"x is a language family\",\n        \"Related(x, y)\": \"x is related to y\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Romance(x) \\u2192 IndoEuropean(x))\",  # All Romance languages are Indo-European languages.\n        \"LanguageFamily(romanceLanguages)\",  # The Romance languages are a language family.\n        \"\\u2200x (\\u2200y (LanguageFamily(y) \\u2227 y = x) \\u2192 Related(x, y)))\",  # All languages within a language family are related to each other.\n        \"Romance(french)\",  # French is a Romance language.\n        \"Romance(spanish)\",  # Spanish is a Romance language.\n        \"Related(german, spanish)\"  # German is related to Spanish.\n    ],\n    \"Conclusion\": {\n        \"IndoEuropean(french)\": \"French is an Indo-European language.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_55",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a soccer player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{\"Predicates\": \"Striker(x) ::: x is a striker.\\nSoccerPlayer(x) ::: x is a soccer player.\\nLeft(x, y) ::: x left team y.\", \n\"Premises\": \"\\u2610x (Striker(x) \\u2192 SoccerPlayer(x)) ::: Strikers are soccer players.\\n\\u2610x \\u2610y (Left(x, y) \\u2192 \\u00acPlayFor(x, y)) ::: If a player left a team they no longer play for that team.\", \n\"Conclusion\": \"SoccerPlayer(robertLewandowski) ::: Robert Lewandowski is a soccer player.\"}}"
    ]
  },
  {
    "id": "FOLIO_dev_56",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski plays for Bayern Munchen.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Striker(x)\": \"x is a striker\",\n        \"SoccerPlayer(x)\": \"x is a soccer player\",\n        \"Left(x, y)\": \"x left team or club y\",\n        \"PlayFor(x, y)\": \"x plays for team or club y\"\n    },\n    \"Premises\": [\n        \"Striker(robertLewandowski) ∧ Left(robertLewandowski, bayernMunchen)\",\n        \"∀x (Striker(x) → SoccerPlayer(x))\",\n        \"∀x ∀y (Left(x, y) → ¬PlayFor(x, y))\"\n    ],\n    \"Conclusion\": {\n        \"¬PlayFor(robertLewandowski, bayernMunchen)\": \"Robert Lewandowski does not play for Bayern Munchen\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_57",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a star.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Striker(x)\": \"x is a striker.\",\n        \"SoccerPlayer(x)\": \"x is a soccer player.\",\n        \"Left(x, y)\": \"x left y.\",\n        \"PlayFor(x, y)\": \"x plays for y.\"\n    },\n    \"Premises\": [\n        \"Striker(robertLewandowski)\",\n        \"\\u2200x (Striker(x) \\u2192 SoccerPlayer(x))\",\n        \"Left(robertLewandowski, bayernMunchen)\",\n        \"\\u2200x \\u2200y (Left(x, y) \\u2192 ¬PlayFor(x, y))\"\n    ],\n    \"Conclusion\": [\n        \"¬∃y (Star(y) ∧ PlayFor(y, robertLewandowski))\" // Uncertain\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_58",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Butte and Pierre are in the same state.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"City(x)\": \"x is a city\",\n        \"InState(x, y)\": \"city x is in state y\"\n    },\n    \"Premises\": [\n        \"City(billings) ∧ InState(billings, montana)\",\n        \"∃x ∃y ∃z (City(x) ∧ City(y) ∧ City(z) ∧ InState(x, montana) ∧ InState(y, montana) ∧ InState(z, montana) ∧ x ≠ y ∧ x ≠ z ∧ y ≠ z ∧ x = butte ∧ y = helena ∧ z = missoula)\",\n        \"City(whiteSulphurSprings) ∧ City(butte) ∧ ∃s (InState(whiteSulphurSprings, s) ∧ InState(butte, s))\",\n        \"¬InState(pierre, montana)\",\n        \"∀x ¬(City(x) ∧ InState(x, butte) ∧ InState(x, pierre))\"\n    ],\n    \"Conclusion\": {\n        \"¬∃s (InState(butte, s) ∧ InState(pierre, s))\": \"Butte and Pierre are not in the same state\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_59",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Pierre and Bismarck are in the same state.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"In(x, y)\": \"x is a location within y\",\n        \"City(x)\": \"x is a city\"\n    },\n    \"Premises\": [\n        \"City(billings) ∧ In(billings, montana)\", \n        \"In(butte, montana) ∧ In(helena, montana) ∧ In(missoula, montana)\", \n        \"In(whiteSulphurSprings, y) ∧ In(butte, y)\", \n        \"¬In(pierre, montana)\",\n        \"∀x (City(x) ∧ In(x, butte) → ¬In(x, pierre))\"\n    ],\n    \"Conclusion\": {\n        \"In(pierre, z) ∧ In(bismarck, z)\": \"Pierre and Bismarck are in the same state.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_60",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Montana is home to the city of Missoula.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"CityIn(x,y)\": \"x is a city located in y\",\n        \"SameState(x,y)\": \"cities x and y are in the same state\"\n    ],\n    \"Premises\": [\n        \"CityIn(billings, montana)\": \"Billings is a city in Montana.\",\n        \"(CityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana))\": \"Montana includes the cities of Butte, Helena, and Missoula.\",\n        \"(SameState(whiteSulphurSprings, butte) ∧ CityIn(whiteSulphurSprings, y) ∧ CityIn(butte, z) → SameState(y,z))\": \"White Sulphur Springs and Butte are cities in the same state.\",\n        \"¬CityIn(pierre, montana)\": \"The city of Pierre is not in Montana.\",\n        \"∀x (CityIn(x, butte) → ¬CityIn(x, pierre))\": \"Any city in Butte is not in Pierre.\"\n    ],\n    \"Conclusion\": [\n        \"CityIn(missoula, montana)\": \"Montana is home to the city of Missoula.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_61",
    "context": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mike has an F1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"InternationalStudent(x)\": \"x is an international student\",\n        \"F1Visa(x)\": \"x has an F1 visa\",\n        \"J1Visa(x)\": \"x has a J1 visa\",\n        \"NeedsCPTForWork(x)\": \"x needs to apply for CPT if x wants to work in the US\",\n        \"NeedsOPTForWork(x)\": \"x needs to apply for OPT if x wants to work in the US\"\n    },\n    \"Premises\": [\n        \"∀x (InternationalStudent(x) → F1Visa(x) ⊕ J1Visa(x))\",  # International students in US have either an F1 visa or a J1 visa.\n        \"∀x ((F1Visa(x) ∧ InternationalStudent(x)) → NeedsCPTForWork(x) ∨ NeedsOPTForWork(x))\",  # An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n        \"InternationalStudent(mike)\",  # Mike is an international student.\n        \"NeedsCPTForWork(mike)\"  # Mike needs to apply for CPT if he wants to work in the US.\n    ],\n    \"Conclusion\": {\n        \"F1Visa(mike)\": \"Mike has an F1 visa.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_62",
    "context": "International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mike has a J1 visa.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"F1Visa(x)\": \"x has an F1 visa\",\n        \"J1Visa(x)\": \"x has a J1 visa\",\n        \"InternationalStudentInUS(x)\": \"x is an international student in US\",\n        \"NeedsCPTForWork(x)\": \"x needs to apply for CPT if he wants to work in the US\"\n    },\n    \"Premises\": [\n        \"∀x (InternationalStudentInUS(x) → F1Visa(x) ⊕ J1Visa(x))\", \n        \"∀x ((F1Visa(x) ∧ InternationalStudentInUS(x)) → NeedsCPTForWork(x))\",\n        \"InternationalStudentInUS(mike)\",\n        \"NeedsCPTForWork(mike)\"\n    ],\n    \"Conclusion\": {\n        \"J1Visa(mike)\": \"Mike has a J1 visa\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_63",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ted is a pet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Cow(x)\": \"x is a cow.\",\n        \"Bovine(x)\": \"x is a bovine.\",\n        \"Pet(x)\": \"x is a pet.\",\n        \"Domesticated(x)\": \"x is domesticated.\",\n        \"Alligator(x)\": \"x is an alligator.\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Cow(x) \\u2192 Bovine(x))\",  # All cows are bovines.\n        \"\\u2203x (Pet(x) \\u2227 Cow(x))\",  # Some pets are cows.\n        \"\\u2200x (Bovine(x) \\u2192 Domesticated(x))\",  # If something is a bovine, then it is domesticated.\n        \"\\u00ac\\u2203x (Domesticated(x) \\u2227 Alligator(x))\",  # No domesticated animals are alligators.\n        \"Alligator(ted)\"  # Ted is an aligator.\n    ],\n    \"Conclusion\": {\n        \"Pet(ted)\": \"Ted is a pet.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_64",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ted is a pet and a cow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Cow(x)\": \"x is a cow.\",\n        \"Bovine(x)\": \"x is a bovine.\",\n        \"Pet(x)\": \"x is a pet.\",\n        \"Domesticated(x)\": \"x is domesticated.\",\n        \"Alligator(x)\": \"x is an alligator.\"\n    },\n    \"Premises\": [\n        \"∀x (Cow(x) → Bovine(x))\",  // All cows are bovines.\n        \"∃x (Pet(x) ∧ Cow(x))\",  // Some pets are cows.\n        \"∀x (Bovine(x) → Domesticated(x))\",  // If something is a bovine, then it is domesticated.\n        \"¬∃x (Domesticated(x) ∧ Alligator(x))\",  // No domesticated animals are alligators.\n        \"Alligator(ted)\"  // Ted is an aligator.\n    ],\n    \"Conclusion\": {\n        \"(Pet(ted) ∧ Cow(ted))\"  // Is it true, false, or uncertain that Ted is a pet and a cow?\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_65",
    "context": "All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Ted is a cow, then Ted is not a pet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"Cow(x)\": \"x is a cow.\",\n        \"Bovine(x)\": \"x is a bovine.\",\n        \"Pet(x)\": \"x is a pet.\",\n        \"Domesticated(x)\": \"x is domesticated.\",\n        \"Alligator(x)\": \"x is an alligator.\"\n    ],\n    \"Premises\": [\n        \"\\u2200x (Cow(x) \\u2192 Bovine(x))\": \"All cows are bovines.\",\n        \"\\u2203x (Pet(x) \\u2227 Cow(x))\": \"Some pets are cows.\",\n        \"\\u2200x (Bovine(x) \\u2192 Domesticated(x))\": \"If something is a bovine, then it is domesticated.\",\n        \"\\u00AC\\u2203x (Domesticated(x) \\u2227 Alligator(x))\": \"No domesticated animals are alligators.\",\n        \"Alligator(ted)\": \"Ted is an aligator.\"\n    ],\n    \"Conclusion\": [\n        \"(Cow(ted) \\u2192 \\u00AC Pet(ted))\": \"If Ted is a cow, then Ted is not a pet.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_66",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A private Ivy League research university moved to New Haven.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{{\n    \"Predicates\": {\n        \"IvyLeague(x)\": \"x is a Ivy League\",\n        \"Private(x)\": \"x is private\",\n        \"ResearchUniversity(x)\": \"x is a research university\",\n        \"MoveToNewHaven(x, y)\": \"x moved to New Haven in year y\"\n    },\n    \"Premises\": [\n        \"(IvyLeague(yale) ∧ Private(yale) ∧ ResearchUniversity(yale))\", \n        \"MoveToNewHaven(yale, 1716)\"\n    ],\n    \"Conclusion\": {\n        \"∃x (Private(x) ∧ IvyLeague(x) ∧ ResearchUniversity(x) ∧ ∃y MoveToNewHaven(x, y))\": \"A private Ivy League research university moved to New Haven.\"\n    }\n}}"
    ]
  },
  {
    "id": "FOLIO_dev_67",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yale University has the largest university endowment of any educational institution.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"University(x)\": \"x is a university\",\n    \"Private(x)\": \"x is private\",\n    \"IvyLeague(x)\": \"x is in Ivy League\",\n    \"EndowmentValue(x, y)\": \"The endowment value of x is y\",\n    \"LargestEndowment(x)\": \"x has the largest university endowment of any educational institution\"\n  },\n  \"Premises\": [\n    \"University(yale) ∧ Private(yale) ∧ IvyLeague(yale)\": \"Yale University is a private Ivy League research university.\",\n    \"EndowmentValue(yale, \\$42.3 billion)\": \"Yale university's endowment was valued at $42.3 billion\"\n  ],\n  \"Conclusion\": {\n    \"∃x (University(x) ∧ EndowmentValue(x, y) ∧ ∀z (University(z) → EndowmentValue(z, ≤y))) → LargestEndowment(yale)\": \"Yale University has the largest university endowment of any educational institution.\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_68",
    "context": "Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Pierson College is a residential college at Yale.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"IvyLeague(x)\": \"x is an Ivy League research university.\",\n        \"PrivateUniversity(x)\": \"x is a private university.\",\n        \"MovedToNewHaven(x, y)\": \"x moved to New Haven in year y.\",\n        \"ValuedAt(x, y)\": \"x's endowment was valued at $y billion.\",\n        \"OrganizedIntoCollegesAndSchools(x, y)\": \"x has been organized into y constituent colleges and schools.\",\n        \"ResidentialCollege(x)\": \"x is a residential college.\",\n        \"LocatedAtYale(x)\": \"x is located at Yale.\"\n    ],\n    \"Premises\": [\n        \"IvyLeague(yale) ∧ PrivateUniversity(yale)\": \"Yale University is a private Ivy League research university.\",\n        \"MovedToNewHaven(yale, year1716)\": \"Yale University moved to New Haven in 17^6.\",\n        \"ValuedAt(yale, 42.3)\": \"Yale university's endowment was valued at $42.3 billion.\",\n        \"OrganizedIntoCollegesAndSchools(yale, 27)\": \"Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\",\n        \"ResidentialCollege(benjaminFranklin) ∧ LocatedAtYale(benjaminFranklin)\": \"Benjamin Franklin College is a residential college at Yale.\",\n        \"ResidentialCollege(berkeley) ∧ LocatedAtYale(berkeley)\": \"Berkeley College is a residential college at Yale.\",\n        \"ResidentialCollege(branford) ∧ LocatedAtYale(branford)\": \"Branford College is a residential college at Yale.\",\n        \"ResidentialCollege(davenport) ∧ LocatedAtYale(davenport)\": \"Davenport College is a residential college at Yale.\",\n        \"ResidentialCollege(ezraStiles) ∧ LocatedAtYale(ezraStiles)\": \"Ezra Stiles College is a residential college at Yale.\",\n        \"ResidentialCollege(graceHopper) ∧ LocatedAtYale(graceHopper)\": \"Grace Hopper College is a residential college at Yale.\",\n        \"ResidentialCollege(jonathanEdwards) ∧ LocatedAtYale(jonathanEdwards)\": \"Jonathan Edwards College is a residential college at Yale.\",\n        \"ResidentialCollege(morse) ∧ LocatedAtYale(morse)\": \"Morse College is a residential college at Yale.\",\n        \"ResidentialCollege(pauliMurray) ∧ LocatedAtYale(pauliMurray)\": \"Pauli Murray College is a residential college at Yale.\",\n        \"ResidentialCollege(pierson) ∧ LocatedAtYale(pierson)\": \"Pierson College is a residential college at Yale.\",\n        \"ResidentialCollege(saybrook) ∧ LocatedAtYale(saybrook)\": \"Saybrook College is a residential college at Yale.\",\n        \"ResidentialCollege(silliman) ∧ LocatedAtYale(silliman)\": \"Silliman College is a residential college at Yale.\",\n        \"ResidentialCollege(timothyDwight) ∧ LocatedAtYale(timothyDwight)\": \"Timothy Dwight College is a residential college at Yale.\",\n        \"ResidentialCollege(trumbull) ∧ LocatedAtYale(trumbull)\": \"Trumbull College is a residential college at Yale.\"\n    ],\n    \"Conclusion\": \"LocatedAtYale(pierson)\"\n}"
    ]
  },
  {
    "id": "FOLIO_dev_69",
    "context": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```\n{\n    \"Predicates\": {\n        \"Sitcom(x)\": \"x is a British Sitcom series\",\n        \"Stars(x, y)\": \"x stars members of y\",\n        \"Piloted(x, y)\": \"x piloted in y\",\n        \"WorkingTitle(x, y)\": \"the working title of x is y\",\n        \"ScriptEditor(x, y)\": \"x was the script editor for y\"\n    },\n    \"Premises\": [\n        \"Sitcom(badults) ∧ Stars(badults, pappys)\",\n        \"Piloted(badults, july2013)\",\n        \"WorkingTitle(badults, theSecretDudeSociety)\",\n        \"ScriptEditor(andrewCollins, badults)\"\n    ],\n    \"Conclusion\": [\n        \"∃x (Sitcom(x) ∧ WorkingTitle(x, theSecretDudeSociety)) → ScriptEditor(andrewCollins, x)\"\n    ]\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_70",
    "context": "Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here is the analysis of the problem and question:\n\n```\n{\n  \"Predicates\": {\n    \"British(x)\": \"x is British\",\n    \"Sitcom(x)\": \"x is a Sitcom series\",\n    \"Star(x, y)\": \"x stars in y\",\n    \"Pilot(x, y)\": \"x piloted on y\",\n    \"Title(x, y)\": \"x has the title of y\",\n    \"ScriptEditor(x, y)\": \"x is the script editor for y\"\n  },\n  \"Premises\": [\n    \"British(Badults) ∧ Sitcom(Badults) ∧ Star(membersOfPappys, Badults)\": \"Badults is a British Sitcom series starring members of Pappy's\",\n    \"Pilot(Badults, BBCThree)\": \"Badults piloted in July 2013 on BBC Three\",\n    \"Title(Badults, theSecretDudeSociety)\": \"The Working title 'The Secret Dude Society' was used for Badults\",\n    \"ScriptEditor(AndrewCollins, Badults)\": \"Andrew Collins was the script editor for Badults\"\n  ],\n  \"Conclusion\": {\n    \"¬∃x (Star(x, y) ∧ (Pilot(y, BBCTwo) ∨ Pilot(y, BBCTwo)))\": \"No members of Pappy's have starred for a show piloting on BBC Two or BBC Three\"\n  }\n}\n```\n\nNote that the conclusion is a negated existential quantification, which means it asserts that there does not exist any member of Pappy's who has starred in a show that pilots on either BBC Two or BBC Three."
    ]
  },
  {
    "id": "FOLIO_dev_71",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KO is a company stock.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```\n{\n    \"Predicates\": [\n        \"Growth(x) ::: x is a growth company's stock.\",\n        \"Volatile(x) ::: x is volatile.\",\n        \"RetirementFund(x) ::: x is suitable for a retirement fund.\",\n        \"Mature(x) ::: x is a mature company's stock.\"\n    ],\n    \"Premises\": [\n        \"∀x (Growth(x) → Volatile(x)) ::: All growth companies' stocks are volatile.\",\n        \"(Volatile(x) → ¬RetirementFund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\",\n        \"∃x (CompanyStock(x) ∧ Growth(x)) ::: Some companies' stocks are growth companies' stocks.\",\n        \"∀x (Mature(x) → RetirementFund(x)) ::: All mature companies' stocks are suitable for a retirement fund.\",\n        \"Mature(ko) ::: KO is a mature company's stock.\"\n    ],\n    \"Conclusion\": [\n        \"CompanyStock(ko) ::: KO is a company stock.\"\n    ]\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_72",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KO is a company stock and a growth company’s stock.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"GrowthStock(x)\": \"x is a growth company's stock\",\n        \"Volatile(x)\": \"x is volatile\",\n        \"SuitableForRetirementFund(x)\": \"x is suitable for a retirement fund\",\n        \"MatureCompanyStock(x)\": \"x is a mature company's stock\"\n    },\n    \"Premises\": [\n        \"\\u2200x (GrowthStock(x) \\u2192 Volatile(x))\",  # All growth companies' stocks are volatile.\n        \"\\u2200x (Volatile(x) \\u2192 ¬SuitableForRetirementFund(x))\",  # If the stock price is volatile, then it is not suitable for a retirement fund.\n        \"\\u2203x (GrowthStock(x) ∧ MatureCompanyStock(x))\",  # Some companies' stocks are growth companies' stocks and mature company's stocks.\n        \"\\u2200x (MatureCompanyStock(x) \\u2192 SuitableForRetirementFund(x))\",  # All mature companies' stocks are suitable for a retirement fund.\n        \"MatureCompanyStock(KO)\",  # KO is a mature company's stock.\n        \"GrowthStock(KO)\"  # Added to consider the question\n    ],\n    \"Conclusion\": \"\\u2203x (CompanyStock(x) ∧ GrowthStock(x))\" \n}"
    ]
  },
  {
    "id": "FOLIO_dev_73",
    "context": "All growth companies’ stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies’ stocks are growth companies’ stocks. All mature companies’ stocks are suitable for a retirement fund. KO is a mature company’s stock.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```json\n{\n    \"Predicates\": {\n        \"GrowthCompany(x)\": \"x is a growth company\",\n        \"MatureCompany(x)\": \"x is a mature company\",\n        \"Volatile(x)\": \"The stock price of x is volatile\",\n        \"SuitableForRetirementFund(x)\": \"x is suitable for a retirement fund\"\n    },\n    \"Premises\": [\n        \"\\u2200x (GrowthCompany(x) \\u2192 Volatile(x))\", \n        \"(Volatile(KO) \\u2192 ¬SuitableForRetirementFund(KO))\",\n        \"\\u2203x (MatureCompany(x) \\u2227 GrowthCompany(x))\",\n        \"\\u2200x (MatureCompany(x) \\u2192 SuitableForRetirementFund(x))\",\n        \"MatureCompany(KO)\"\n    ],\n    \"Conclusion\": \"(GrowthCompany(KO) \\u22C6 Volatile(KO)) \\u2192 ¬(GrowthCompany(KO) \\u2228 Volatile(KO))\"\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_74",
    "context": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Joe's license plate begins with the number 34.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"FromIstanbul(x)\": \"x is a vehicle registration plate from Istanbul.\",\n        \"BeginWith34(x)\": \"x begins with the number 34.\",\n        \"JoesPlate(x)\": \"Joe's vehicle registration plate is x.\",\n        \"TomsPlate(x)\": \"Tom's license plate is x.\"\n    },\n    \"Premises\": {\n        \"∀x (FromIstanbul(x) → BeginWith34(x))\": \"All vehicle registration plates in Istanbul begin with the number 34.\",\n        \"∀x (¬BeginWith34(x) → ¬FromIstanbul(x))\": \"Plates that do not begin with the number 34 are not from Istanbul.\",\n        \"FromIstanbul(JoesPlate)\": \"Joe's vehicle registration plate is from Istanbul.\",\n        \"TomsPlate Begins with 35\": \"Tom's license plate begins with the number 35.\",\n        \"∀x (BeginWith35(x) → ¬BeginWith34(x))\": \"If a license plate begins with the number 35, then it does not begin with the number 34.\"\n    },\n    \"Conclusion\": {\n        \"BeginWith34(JoesPlate)\": \"Joe's license plate begins with the number 34.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_75",
    "context": "All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul. Joe's vehicle registration plate is from Istanbul. Tom's license plate begins with the number 35. [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom's license plate is from Istanbul.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Istanbul(x)\": \"x is from Istanbul.\",\n        \"BeginWith34(x)\": \"x begins with the number 34.\"\n    },\n    \"Premises\": [\n        \"∀x (Istanbul(x) → BeginWith34(x))\": \"All vehicle registration plates in Istanbul begin with the number 34.\",\n        \"∀x (¬BeginWith34(x) → ¬Istanbul(x))\": \"Plates that do not begin with the number 34 are not from Istanbul.\",\n        \"Istanbul(joe)\": \"Joe's vehicle registration plate is from Istanbul.\",\n        \"BeginWith35(tom)\": \"Tom's license plate begins with the number 35.\",\n        \"(BeginWith35(x) → ¬BeginWith34(x))\": \"If a license plate begins with the number 35, then it does not begin with the number 34.\"\n    ],\n    \"Conclusion\": {\n        \"Istanbul(tom)\": \"Tom's license plate is from Istanbul.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_76",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary needs to earn money to help pay for her college tuition.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"WorkOnCampus(x)\": \"x works on campus\",\n        \"NeedMoneyForTuition(x)\": \"x needs money for tuition\",\n        \"OrderTakeoutFrequently(x)\": \"x orders takeout frequently\",\n        \"EnjoyDiningHallMealsAndRecipes(x)\": \"x enjoys dining hall meals and recipes\",\n        \"PickyEater(x)\": \"x is a picky eater\",\n        \"SpendTimeEatingWithFriends(x)\": \"x spends time eating with friends\"\n    },\n    \"Premises\": [\n        \"∀x (WorkOnCampus(x) → NeedMoneyForTuition(x))\",\n        \"∀x (OrderTakeoutFrequently(x) → WorkOnCampus(x))\",\n        \"∀x (OrderTakeoutFrequently(x) ⊕ EnjoyDiningHallMealsAndRecipes(x))\",\n        \"∀x (EnjoyDiningHallMealsAndRecipes(x) → ¬PickyEater(x))\",\n        \"∀x (EnjoyDiningHallMealsAndRecipes(x) → SpendTimeEatingWithFriends(x))\",\n        \"(WorkOnCampus(mary) ∧ NeedMoneyForTuition(mary)) → ¬(PickyEater(mary) ∨ NeedMoneyForTuition(mary))\"\n    ],\n    \"Conclusion\": {\n        \"NeedMoneyForTuition(mary)\": \"Mary needs to earn money for tuition\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_77",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"WorkCampus(x)\": \"x works in student jobs on campus\",\n        \"NeedTuition(x)\": \"x needs to earn money to help pay for their college tuition\",\n        \"OrderTakeout(x)\": \"x orders takeout frequently in college\",\n        \"EnjoyDiningHall(x)\": \"x enjoys the dining hall meals and recipes\",\n        \"PickyEater(x)\": \"x is a picky eater\",\n        \"SpendTimeEating(x)\": \"x spends a lot of their time eating and catching up with friends in the campus dining halls\"\n    },\n    \"Premises\": {\n        \"∀x (WorkCampus(x) → NeedTuition(x))\": \"If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\",\n        \"∀x (OrderTakeout(x) → WorkCampus(x))\": \"If people order takeout frequently in college, then they work in student jobs on campus.\",\n        \"∀x (OrderTakeout(x) ⊕ EnjoyDiningHall(x))\": \"People either order takeout frequently in college or enjoy the dining hall meals and recipes.\",\n        \"∀x (EnjoyDiningHall(x) → ¬PickyEater(x))\": \"If people enjoy the dining hall meals and recipes, then they are not picky eaters.\",\n        \"∀x (EnjoyDiningHall(x) → SpendTimeEating(x))\": \"If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\",\n        \"(WorkCampus(mary) ∧ NeedTuition(mary)) → ¬(PickyEater(mary) ∨ NeedTuition(mary))\": \"If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\"\n    },\n    \"Conclusion\": {\n        \"(¬PickyEater(mary) ∧ SpendTimeEating(mary))\": \"Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_78",
    "context": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"WorksOnCampus(x)\": \"x works in student jobs on campus\",\n    \"NeedsMoneyForTuition(x)\": \"x needs to earn money to help pay for college tuition\",\n    \"OrderTakeoutFrequentlyInCollege(x)\": \"x orders takeout frequently in college\",\n    \"EnjoysDiningHallMealsAndRecipes(x)\": \"x enjoys the dining hall meals and recipes\",\n    \"IsPickyEater(x)\": \"x is a picky eater\",\n    \"SpendsTimeEatingWithFriends(x)\": \"x spends a lot of time eating and catching up with friends in the campus dining halls\"\n  },\n  \"Premises\": [\n    \"\\u2200x (WorksOnCampus(x) \\u2192 NeedsMoneyForTuition(x))\", \n    \"\\u2200x (OrderTakeoutFrequentlyInCollege(x) \\u2192 WorksOnCampus(x))\",\n    \"\\u2200x (EnjoysDiningHallMealsAndRecipes(x) \\u2228 OrderTakeoutFrequentlyInCollege(x))\",\n    \"\\u2200x (EnjoysDiningHallMealsAndRecipes(x) \\u2192 ¬IsPickyEater(x))\",\n    \"\\u2200x (EnjoysDiningHallMealsAndRecipes(x) \\u2192 SpendsTimeEatingWithFriends(x))\",\n    \"¬(WorksOnCampus(mary) ∧ NeedsMoneyForTuition(mary)) → (IsPickyEater(mary) ⊕ ¬NeedsMoneyForTuition(mary))\"\n  ],\n  \"Conclusion\": \"(¬IsPickyEater(mary) ∨ (IsPickyEater(mary) ∧ SpendsTimeEatingWithFriends(mary)))\"\n}"
    ]
  },
  {
    "id": "FOLIO_dev_79",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are a product of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"Bakery(x) ::: x is a bakery.\",\n        \"Spicy(x) ::: x is spicy.\",\n        \"Cupcake(x) ::: x is a cupcake.\",\n        \"Hotpot(x) ::: x is a hotpot.\",\n        \"ProductOfBakedByMelissa(x) ::: x is a product of Baked by Melissa.\"\n    ],\n    \"Premises\": [\n        \"¬∃x (Bakery(x) ∧ Spicy(x)) ::: No bakery is spicy.\",\n        \"∀x (Cupcake(x) → Bakery(x)) ::: All cupcakes are bakeries.\",\n        \"∀x (Hotpot(x) → Spicy(x)) ::: All hotpots are spicy.\",\n        \"∀x (ProductOfBakedByMelissa(x) → Cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\",\n        \"(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\"\n    ],\n    \"Conclusion\": [\n        \"ProductOfBakedByMelissa(driedThaiChilies) ::: Dried Thai chilies are a product of Baked by Melissa.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_80",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are not a product of Baked by Melissa.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Bakery(x)\": \"x is a bakery\",\n        \"Spicy(x)\": \"x is spicy\",\n        \"Cupcake(x)\": \"x is a cupcake\",\n        \"Hotpot(x)\": \"x is a hotpot\",\n        \"ProductOfBakedByMelissa(x)\": \"x is a product of Baked by Melissa\"\n    },\n    \"Premises\": [\n        \"¬∃x (Bakery(x) ∧ Spicy(x))\",  # No bakery is spicy.\n        \"∀x (Cupcake(x) → Bakery(x))\",  # All cupcakes are bakeries.\n        \"∀x (Hotpot(x) → Spicy(x))\",  # All hotpots are spicy.\n        \"∀x (ProductOfBakedByMelissa(x) → Cupcake(x))\",  # All products of Baked by Melissa are cupcakes.\n        \"(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies))\"  # If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n    ],\n    \"Conclusion\": [\n        \"¬ProductOfBakedByMelissa(driedThaiChilies)\"  # Dried Thai chilies are not a product of Baked by Melissa.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_81",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are a hotpot.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Spicy(x)\": \"x is spicy\",\n        \"Bakery(x)\": \"x is a bakery\",\n        \"Hotpot(x)\": \"x is a hotpot\",\n        \"Cupcake(x)\": \"x is a cupcake\"\n    },\n    \"Premises\": [\n        \"¬∃x (Bakery(x) ∧ Spicy(x))\",  # No bakery is spicy.\n        \"∀x (Cupcake(x) → Bakery(x))\",  # All cupcakes are bakeries.\n        \"∀x (Hotpot(x) → Spicy(x))\",  # All hotpots are spicy.\n        \"∀x (ProductOfBakedByMelissa(x) → Cupcake(x))\",  # All products of Baked by Melissa are cupcakes.\n        \"(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies))\"  # If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n    ],\n    \"Conclusion\": {\n        \"Hotpot(driedThaiChilies)\": \"Dried Thai chilies are a hotpot\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_82",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Bakery(x)\": \"x is a bakery.\",\n        \"Spicy(x)\": \"x is spicy.\",\n        \"Cupcake(x)\": \"x is a cupcake.\",\n        \"Hotpot(x)\": \"x is a hotpot.\",\n        \"ProductOfBakedByMelissa(x)\": \"x is a product of Baked by Melissa.\"\n    },\n    \"Premises\": [\n        \"¬∃x (Bakery(x) ∧ Spicy(x))\", \n        \"∀x (Cupcake(x) → Bakery(x))\", \n        \"∀x (Hotpot(x) → Spicy(x))\", \n        \"∀x (ProductOfBakedByMelissa(x) → Cupcake(x))\",\n        \"(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies))\"\n    ],\n    \"Conclusion\": {\n        \"¬(ProductOfBakedByMelissa(driedThaiChilies) ∨ Bakery(driedThaiChilies))\": \"Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_83",
    "context": "No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Bakery(x)\": \"x is a bakery\",\n        \"Spicy(x)\": \"x is spicy\",\n        \"Cupcake(x)\": \"x is a cupcake\",\n        \"Hotpot(x)\": \"x is a hotpot\",\n        \"ProductOfBBM(x)\": \"x is a product of Baked by Melissa\"\n    },\n    \"Premises\": [\n        \"¬∃x (Bakery(x) ∧ Spicy(x))\",  # No bakery is spicy\n        \"∀x (Cupcake(x) → Bakery(x))\",  # All cupcakes are bakeries\n        \"∀x (Hotpot(x) → Spicy(x))\",  # All hotpots are spicy\n        \"∀x (ProductOfBBM(x) → Cupcake(x))\",  # All products of Baked by Melissa are cupcakes\n        \"(Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies)) → (Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies))\"  # If dried Thai chilies are spicy or a bakery, then they are a hotpot or spicy\n    ],\n    \"Conclusion\": {\n        \"(Cupcake(driedThaiChilies) ∧ ProductOfBBM(driedThaiChilies))\": \"Dried Thai chilies are cupcakes and a product of Baked by Melissa\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_84",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Listed(x)\": \"x is listed in Yelp’s recommendations\",\n        \"NegativeReviews(x)\": \"x receives many negative reviews\",\n        \"RatingGreater9(x)\": \"x has a rating greater than 9\",\n        \"PopularAmongLocals(x)\": \"x is popular among local residents\",\n        \"TakeOutService(x)\": \"x provides take-out service\"\n    },\n    \"Premises\": {\n        \"∀x (Listed(x) → ¬NegativeReviews(x))\": \"If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\",\n        \"∀x (RatingGreater9(x) → Listed(x))\": \"All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\",\n        \"∃x (∀y (¬TakeOutService(y) ∧ NegativeReviews(y)))\": \"Some restaurants that do not provide take-out service receive many negative reviews.\",\n        \"∀x (PopularAmongLocals(x) → RatingGreater9(x))\": \"All restaurants that are popular among local residents have ratings greater than 9.\",\n        \"(RatingGreater9(subway) ∨ PopularAmongLocals(subway))\": \"Subway has a rating greater than 9 or is popular among local residents.\"\n    },\n    \"Conclusion\": {\n        \"((TakeOutService(subway) ∧ NegativeReviews(subway)) → (RatingGreater9(subway) ∧ ¬TakeOutService(subway)))\": \"If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_85",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Subway provides take-out service and does not receive many negative reviews.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Listed(x)\": \"x is listed in Yelp’s recommendations\",\n        \"NegativeReviews(x)\": \"x receives many negative reviews\",\n        \"RatingGreaterThan9(x)\": \"x has a rating greater than 9\",\n        \"PopularAmongLocals(x)\": \"x is popular among local residents\",\n        \"TakeOutService(x)\": \"x provides take-out service\"\n    },\n    \"Premises\": [\n        \"∀x (Listed(x) → ¬NegativeReviews(x))\", \n        \"∀x (RatingGreaterThan9(x) → Listed(x))\", \n        \"∃x (¬TakeOutService(x) ∧ NegativeReviews(x))\", \n        \"∀x (PopularAmongLocals(x) → RatingGreaterThan9(x))\",\n        \"(RatingGreaterThan9(subway) ∨ PopularAmongLocals(subway))\"\n    ],\n    \"Conclusion\": {\n        \"(TakeOutService(subway) ∧ ¬NegativeReviews(subway))\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_86",
    "context": "If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp’s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Subway does not provide take-out service.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Listed(x)\": \"x is listed in Yelp’s recommendations\",\n        \"NegativeReviews(x)\": \"x receives many negative reviews\",\n        \"RatingGreaterThan9(x)\": \"x has a rating greater than 9\",\n        \"ProvideTakeOutService(x)\": \"x provides take-out service\",\n        \"PopularAmongLocalResidents(x)\": \"x is popular among local residents\"\n    },\n    \"Premises\": [\n        \"∀x (Listed(x) → ¬NegativeReviews(x))\", \n        \"∀x (RatingGreaterThan9(x) → Listed(x))\", \n        \"∃x (¬ProvideTakeOutService(x) ∧ NegativeReviews(x))\", \n        \"∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))\", \n        \"(RatingGreaterThan9(subway) ∨ PopularAmongLocalResidents(subway))\"\n    ],\n    \"Conclusion\": {\n        \"¬ProvideTakeOutService(subway)\": \"Subway does not provide take-out service\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_87",
    "context": "In superhero movies, the good guys always win. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie. Good guys fight bad guys and vice versa. Sir Digby fights his nemesis. If a superhero movie is named after a character, that character is a good guy. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby. If somebody wins a fight, the person they are fighting loses. If a superhero movie is named after a character, that character appears in the movie.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Sir Digby’s nemesis loses.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{{\n     \"Predicates\": \n          \"SuperheroMovie(x) ::: x is a superhero movie.\",\n          \"GoodGuysWin(x) ::: The good guys win in movie x.\",\n          \"NamedAfter(x, y) ::: Movie or show x is named after character y.\",\n          \"IsGoodGuy(x) ::: Character x is a good guy.\",\n          \"Fights(x, y) ::: Character x fights character y.\",\n          \"WinsFight(x, y) ::: Character x wins fight against character y.\",\n          \"LosesFight(x, y) ::: Character x loses fight against character y.\",\n          \"AppearsIn(x, y) ::: Character or entity x appears in movie y.\",\n     \"Premises\": \n          \"∀x (SuperheroMovie(x) → GoodGuysWin(x)) ::: In superhero movies, the good guys always win.\",\n          \"SuperheroMovie(sirDigbyAdventures) ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\",\n          \"∀x ∃y (GoodGuys(x) ∧ Fights(x, y) ∧ BadGuys(y)) ::: Good guys fight bad guys and vice versa.\",\n          \"Fights(sirDigby, sirDigbysNemesis) ::: Sir Digby fights his nemesis.\",\n          \"(NamedAfter(movie, character) → IsGoodGuy(character)) ::: If a superhero movie is named after a character, that character is a good guy.\",\n          \"NamedAfter(sirDigbyAdventures, sirDigby) ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\",\n          \"(WinsFight(x, y) → LosesFight(y, x)) ::: If somebody wins a fight, the person they are fighting loses.\",\n          \"(NamedAfter(movie, character) → AppearsIn(character, movie)) ::: If a superhero movie is named after a character, that character appears in the movie.\",\n     \"Conclusion\": \n          \"LosesFight(sirDigbysNemesis, sirDigby) ::: Sir Digby’s nemesis loses.\"\n}}"
    ]
  },
  {
    "id": "FOLIO_dev_88",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Walden contains knowledge.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Contains(x, y)\": \"x contains y\",\n        \"Reads(x, y)\": \"x reads y\",\n        \"GainsKnowledge(x)\": \"x gains knowledge\",\n        \"IsSmarter(x)\": \"x becomes smarter\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Book(x) \\u2192 Contains(x, knowledge))\": \"Books contain tons of knowledge.\",\n        \"\\u2200x (Reads(x, y) \\u2192 GainsKnowledge(x))\": \"When a person reads a book, that person gains knowledge.\",\n        \"\\u2200x (GainsKnowledge(x) \\u2192 IsSmarter(x))\": \"If a person gains knowledge, they become smarter.\",\n        \"Reads(harry, walden)\": \"Harry read the book \\\"Walden\\\" by Henry Thoreau.\"\n    ],\n    \"Conclusion\": {\n        \"Contains(walden, knowledge)\": \"Walden contains knowledge.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_89",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is smarter than before.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Contain(x, y)\": \"x contains y\",\n        \"Read(x, y)\": \"x reads y\",\n        \"Gain(x, y)\": \"x gains y\",\n        \"Become(x, y)\": \"x becomes y\"\n    },\n    \"Premises\": [\n        \"\\u2200 x (Book(x) \\u2192 Contain(x, knowledge))\": \"Books contain tons of knowledge.\",\n        \"\\u2200 x \\u2200 y (Read(x, y) \\u2192 Gain(x, knowledge))\": \"When a person reads a book, that person gains knowledge.\",\n        \"\\u2200 x (Gain(x, knowledge) \\u2192 Become(x, smarter))\": \"If a person gains knowledge, they become smarter.\",\n        \"Read(harry, walden)\": \"Harry read the book \\u201cWalden\\u201d by Henry Thoreau.\"\n    ],\n    \"Conclusion\": {\n        \"Become(harry, smarter)\": \"Harry is smarter than before.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_90",
    "context": "[BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge. [BG] If a person gains knowledge, they become smarter. Harry read the book “Walden” by Henry Thoreau.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A person who is smarter has gained knowledge.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Contain(x, y)\": \"x contains y\",\n        \"Read(x, y)\": \"person x reads book y\",\n        \"Gain(x, y)\": \"person x gains knowledge y\",\n        \"Smarter(x)\": \"person x is smarter\"\n    },\n    \"Premises\": [\n        \"∀x (Book(x) → Contain(x, knowledge))\",  # Books contain tons of knowledge.\n        \"∀x ∀y (Read(x, y) → Gain(x, knowledge))\",  # When a person reads a book, that person gains knowledge.\n        \"∀x (Gain(x, knowledge) → Smarter(x))\"  # If a person gains knowledge, they become smarter.\n    ],\n    \"Conclusion\": [\n        \"∃x ∃y (Read(harry, x) ∧ Author(y, x) ∧ Book(x) ∧ Gain(harry, knowledge))\"  # Harry read the book “Walden” by Henry Thoreau.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_91",
    "context": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Machine translation is a language generation task.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"LanguageGenerationTask(x)\": \"x is a language generation task\",\n        \"LanguageUnderstandingTask(x)\": \"x is a language understanding task\",\n        \"NLPtask(x)\": \"x is a natural language processing task\",\n        \"OutputTextSequence(x, y)\": \"the output of x is a text sequence\"\n    },\n    \"Premises\": [\n        \"∀x (NLPtask(x) → LanguageGenerationTask(x) ∨ LanguageUnderstandingTask(x))\": \"Natural language processing tasks can be categorized as either language generation task or language understanding task\",\n        \"∀x (∃y (OutputTextSequence(x, y)) → LanguageGenerationTask(x))\": \"If the output of a natural language processing task is a text sequence, then it is a language generation task\",\n        \"NLPtask(machineTranslation)\": \"Machine translation is a natural language processing task\",\n        \"∃y (OutputTextSequence(machineTranslation, y))\": \"The output of machine translation is a text sequence\"\n    ],\n    \"Conclusion\": {\n        \"LanguageGenerationTask(machineTranslation)\": \"Is Machine translation a language generation task?\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_92",
    "context": "Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Machine translation is a language understanding task.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"NLPGTask(x)\": \"x is a natural language processing task\",\n        \"LanguageGeneration(x)\": \"x is a language generation task\",\n        \"LanguageUnderstanding(x)\": \"x is a language understanding task\",\n        \"TextSequence(x)\": \"x is a text sequence\"\n    },\n    \"Premises\": [\n        \"∀x (NLPGTask(x) → LanguageGeneration(x) ⊕ LanguageUnderstanding(x))\", \n        \"∀x ((NLPGTask(x) ∧ TextSequence(x)) → LanguageGeneration(x))\",\n        \"NLPGTask(machineTranslation)\",\n        \"TextSequence(machineTranslation)\"\n    ],\n    \"Conclusion\": {\n        \"LanguageUnderstanding(machineTranslation)\": \"Machine translation is a language understanding task\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_93",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom will rent an apartment in The Olive Garden.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here is the response:\n\n```\n{\n  \"Predicates\": {\n    \"ManagedBuilding(x)\": \"x is a managed building.\",\n    \"Pet(x)\": \"x is a pet.\",\n    \"AllowedIn(x, y)\": \"x is allowed in y.\",\n    \"DepositRequired(x)\": \"a deposit is required to rent an apartment in x.\",\n    \"SecurityDepositEqualsOneMonthRent(x)\": \"the security deposit for renting an apartment in x equals one month's rent.\",\n    \"SecurityDepositMoreThanOneMonthRent(x)\": \"the security deposit for renting an apartment in x is more than one month's rent.\",\n    \"Cat(x)\": \"x is a cat.\",\n    \"Fluffy(x)\": \"x is Fluffy, Tom's cat.\",\n    \"TomRentsApartmentIn(x)\": \"Tom rents an apartment in x.\",\n    \"SecurityDepositNoMoreThan(x, y)\": \"the security deposit for renting an apartment in x is no more than y.\"\n  },\n  \"Premises\": [\n    \"∃x (ManagedBuilding(x) ∧ AllowedIn(Pet, x))\", # Pets are allowed in some managed buildings.\n    \"∀x (ManagedBuilding(x) → DepositRequired(x))\", # A deposit is required to rent an apartment in a managed building.\n    \"(SecurityDepositEqualsOneMonthRent(x) ∨ SecurityDepositMoreThanOneMonthRent(x))\", # The security deposit can be either equal to one month's rent or more.\n    \"Cat(Fluffy)\", # Cats are pets.\n    \"Fluffy(Tom)\", # Fluffy is Tom's cat.\n    \"ManagedBuilding(OliveGarden)\", # The Olive Garden is a managed building.\n    \"SecurityDepositMoreThanOneMonthRent(OliveGarden)\", # 2,000$ is more than $15,000.\n    \"(TomRentsApartmentIn(x) ∧ (AllowedIn(Fluffy, x) ∧ SecurityDepositNoMoreThan(x, 15000)))\", # Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $15,000.\n    \"¬SecurityDepositNoMoreThan(OliveGarden, 15000)\" # The monthly rent at the Olive Garden is $2,000\n  ],\n  \"Conclusion\": {\n    \"∃x (TomRentsApartmentIn(x) ∧ ManagedBuilding(x))\" # Tom will rent an apartment in a managed building.\n  }\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_94",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": \n    {\n        \"Managed(x)\": \"x is a managed building.\",\n        \"PetAllowed(x)\": \"pets are allowed in x\",\n        \"RequiresDeposit(x)\": \"a deposit is required to rent an apartment in x\",\n        \"SecurityDepositEqualOrMoreThanOneMonthRent(x)\": \"the security deposit for renting an apartment in x can be either equal to one month's rent or more\",\n        \"CatIsPet()\": \"cats are pets\",\n        \"RentAmount(x, y)\": \"y is the monthly rent at x\"\n    },\n    \n    \"Premises\": \n    {\n        \"∃x (Managed(x) ∧ PetAllowed(x))\": \"pets are allowed in some managed buildings.\",\n        \"∀x (Managed(x) → RequiresDeposit(x))\": \"a deposit is required to rent an apartment in a managed building\",\n        \"∀x (RequiresDeposit(x) → SecurityDepositEqualOrMoreThanOneMonthRent(x))\": \"the security deposit can be either equal to one month's rent or more\",\n        \"CatIsPet()\": \"cats are pets.\",\n        \"Managed(oliveGarden)\": \"the Olive Garden is a managed building.\",\n        \"RentAmount(oliveGarden, 2000)\": \"the monthly rent at the Olive Garden is $2,000\",\n        \"∀x (TomRentsIn(x) ↔ (PetAllowed(x) ∧ SecurityDepositNoMoreThan1500(x)))\": \"tom will rent an apartment in a managed building if and only if he is allowed to move in with fluffy, and the security deposit is no more than $15,000\",\n        \"2000 > 15000\": \"2,000$ is more than $15,000.\"\n    },\n    \n    \"Conclusion\": \n    {\n        \"(PetAllowed(oliveGarden) ∧ SecurityDepositNoMoreThan1500(oliveGarden))\": \"tom is allowed to move in an apartment in the Olive Garden with fluffy\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_95",
    "context": "Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The security deposit at the Olive Garden is either $2000 or more.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Managed(x)\": \"x is a managed building.\",\n        \"AllowedPets(x)\": \"pets are allowed in x\",\n        \"DepositRequired(x)\": \"a deposit is required to rent an apartment in x\",\n        \"SecurityDeposit(x, y)\": \"the security deposit for renting an apartment in x is y dollars\",\n        \"Pet(x)\": \"x is a pet\",\n        \"Cat(x)\": \"x is a cat\",\n        \"OwnsPet(x, y)\": \"x owns pet y\"\n    },\n    \"Premises\": {\n        \"\\u2200x (Managed(x) \\u2192 \\u2203y (AllowedPets(y))\": \"pets are allowed in some managed buildings\",\n        \"\\u2200x (Managed(x) \\u2192 DepositRequired(x))\": \"a deposit is required to rent an apartment in a managed building\",\n        \"\\u2200x (\\u2200y (SecurityDeposit(x, y) \\u2192 (y = 1000 \\u2227 y > 1000)))\": \"the security deposit can be either equal to one month's rent or more\",\n        \"Cat(Fluffy)\": \"Fluffy is a cat\",\n        \"\\u2200x (Cat(x) \\u2192 Pet(x))\": \"cats are pets\",\n        \"Managed(OliveGarden)\": \"The Olive Garden is a managed building\",\n        \"SecurityDeposit(OliveGarden, 2000)\": \"the monthly rent at the Olive Garden is $2,000\",\n        \"\\u22A5 (TomRentApartment \\u2194 (AllowedPets(Tom) \\u2227 SecurityDeposit(Tom, x) \\u2264 1500))\": \"tom will rent an apartment in a managed building if and only if he is allowed to move in with fluffy, and the security deposit is no more than $15,000\",\n        \"2000 > 1500\": \"$2,000 is more than $1,500\"\n    },\n    \"Conclusion\": {\n        \"\\u2203x (SecurityDeposit(OliveGarden, x) \\u2227 (x = 2000 \\u2227 x > 2000))\": \"the security deposit at the Olive Garden is either $2,000 or more\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_96",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Koalas love to sleep.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"FromAustralia(x)\": \"x is from Australia\",\n        \"LovedByTourists(x)\": \"x is loved by tourists\",\n        \"FavoriteAnimalOfMax(x)\": \"x is a favorite animal of Max\",\n        \"Quokka(x)\": \"x is a quokka\",\n        \"Koala(x)\": \"x is a koala\",\n        \"VeryFluffy(x)\": \"x is very fluffy\",\n        \"LovesToSleep(x)\": \"x loves to sleep\"\n    },\n    \"Premises\": [\n        \"∀x (LovedByTourists(x) → FavoriteAnimalOfMax(x))\",  # If animals are loved by tourists, then they are Max's favorite animals\n        \"∀x (FromAustralia(x) → LovedByTourists(x))\",  # All animals from Australia are loved by tourists\n        \"∀x (Quokka(x) → FromAustralia(x))\",  # All quokkas are animals from Australia\n        \"∀x (FavoriteAnimalOfMax(x) → VeryFluffy(x))\",  # All of Max's favorite animals are very fluffy\n        \"∀x (FavoriteAnimalOfMax(x) → LovesToSleep(x))\",  # All of Max's favorite animals love to sleep\n        \"∀x ((Koala(x) ∧ VeryFluffy(x)) → ¬Quokka(x))\"  # If a koala is very fluffy, then the koala is not a quokka\n    ],\n    \"Conclusion\": [\n        \"∃x (Koala(x) ∧ LovesToSleep(x))\"  # Koalas love to sleep\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_97",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Koalas love to sleep and are quokka.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Favorite(x, y)\": \"x's favorite animal is y\",\n        \"LovedByTourists(x)\": \"animals x are loved by tourists\",\n        \"FromAustralia(x)\": \"animals x are from Australia\",\n        \"Quokka(x)\": \"x is a quokka\",\n        \"VeryFluffy(x)\": \"x is very fluffy\",\n        \"LoveToSleep(x)\": \"x loves to sleep\"\n    },\n    \"Premises\": [\n        \"∀x (LovedByTourists(x) → Favorite(Max, x))\",  // If animals are loved by tourists, then they are Max's favorite animals.\n        \"∀x (FromAustralia(x) → LovedByTourists(x))\",  // All animals from Australia are loved by tourists.\n        \"∀x (Quokka(x) → FromAustralia(x))\",  // All quokka are animals from Australia.\n        \"∀x (Favorite(Max, x) → VeryFluffy(x))\",  // All of Max's favorite animals are very fluffy.\n        \"∀x (Favorite(Max, x) → LoveToSleep(x))\",  // All of Max's favorite animals love to sleep.\n        \"∀x (Quokka(x) ∧ VeryFluffy(x) → ¬Quokka(x))\"  // If a koala is very fluffy, then the koala is not a quokka.\n    ],\n    \"Conclusion\": {\n        \"¬(LoveToSleep(koalas) ∧ Quokka(koalas))\": \"Koalas do not love to sleep and are quokkas\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_98",
    "context": "If animals are loved by tourists, then they are Max's favorite animals. All animals from Australia are loved by tourists. All quokka are animals from Australia. All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep. If a koala is very fluffy, then the koala is not a quokka.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"LovedByTourists(x)\": \"x is loved by tourists\",\n        \"FavoriteAnimal(x, y)\": \"x's favorite animal is y\",\n        \"FromAustralia(x)\": \"x is from Australia\",\n        \"Quokka(x)\": \"x is a quokka\",\n        \"VeryFluffy(x)\": \"x is very fluffy\",\n        \"LovesToSleep(x)\": \"x loves to sleep\"\n    },\n    \"Premises\": [\n        \"∀x (LovedByTourists(x) → ∃y (FavoriteAnimal(Max, y) ∧ x = y))\", \n        \"∀x (FromAustralia(x) → LovedByTourists(x))\",\n        \"∀x (Quokka(x) → FromAustralia(x))\",\n        \"∀x (FavoriteAnimal(Max, x) → VeryFluffy(x))\",\n        \"∀x (FavoriteAnimal(Max, x) → LovesToSleep(x))\",\n        \"∀x (Koala(x) ∧ VeryFluffy(x) → ¬Quokka(x))\"\n    ],\n    \"Conclusion\": {\n        \"∀x (Quokka(x) ∧ Koala(x) → LovesToSleep(x) ⊕ VeryFluffy(x))\", \n        \"¬(Quokka(koala) ∧ Koala(koala)) ∨ (LovesToSleep(koala) ⊕ VeryFluffy(koala))\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_99",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is a CEO.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Kind(x)\": \"x is a kind person\",\n        \"Evil(x)\": \"x is an evil person\",\n        \"Ugly(x)\": \"x is an ugly person\",\n        \"Handsome(x)\": \"x is handsome\",\n        \"Gentleman(x)\": \"x is a gentleman\",\n        \"CEO(x)\": \"x is a CEO\"\n    },\n    \"Premises\": [\n        \"(Kind(harry) ⊕ Evil(harry))\", \n        \"∀x (Ugly(x) → ¬Handsome(x))\", \n        \"∀x (Evil(x) → Ugly(x))\", \n        \"∀x (Gentleman(x) → Handsome(x))\", \n        \"∀x (CEO(x) → Gentleman(x))\",\n        \"Gentleman(harry)\"\n    ],\n    \"Conclusion\": {\n        \"CEO(harry)\": \"Harry is a CEO\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_100",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry is kind or a CEO.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Kind(x)\": \"x is kind\",\n        \"Evil(x)\": \"x is evil\",\n        \"Ugly(x)\": \"x is ugly\",\n        \"Handsome(x)\": \"x is handsome\",\n        \"Gentleman(x)\": \"x is a gentleman\",\n        \"CEO(x)\": \"x is a CEO\"\n    },\n    \"Premises\": [\n        \"\\u2200 x (Kind(x) \\u22c5 Evil(x))\": \"A man is either kind or evil.\",\n        \"\\u2200 x (Ugly(x) → ¬Handsome(x))\": \"No ugly person is handsome.\",\n        \"\\u2200 x (Evil(x) → Ugly(x))\": \"All evil people are ugly.\",\n        \"\\u2200 x (Gentleman(x) → Handsome(x))\": \"All gentlemen are handsome.\",\n        \"\\u2200 x (CEO(x) → Gentleman(x))\": \"All CEOs are gentlemen.\",\n        \"Gentleman(harry)\": \"Harry is a gentleman.\"\n    ],\n    \"Conclusion\": {\n        \"(Kind(harry) ∨ CEO(harry))\": \"Harry is kind or a CEO\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_101",
    "context": "A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Kind(x)\": \"x is kind\",\n        \"Evil(x)\": \"x is evil\",\n        \"Ugly(x)\": \"x is ugly\",\n        \"Handsome(x)\": \"x is handsome\",\n        \"Gentleman(x)\": \"x is a gentleman\",\n        \"CEO(x)\": \"x is a CEO\"\n    },\n    \"Premises\": [\n        \"(Kind(x) ⊕ Evil(x))\",  # A man is either kind or evil.\n        \"∀x (Ugly(x) → ¬Handsome(x))\",  # No ugly person is handsome.\n        \"∀x (Evil(x) → Ugly(x))\",  # All evil people are ugly.\n        \"∀x (Gentleman(x) → Handsome(x))\",  # All gentlemen are handsome.\n        \"∀x (CEO(x) → Gentleman(x))\",  # All CEOs are gentlemen.\n        \"Gentleman(harry)\"  # Harry is a gentleman.\n    ],\n    \"Conclusion\": [\n        \"((Evil(harry) ∧ Ugly(harry)) ⊕ ¬(Evil(harry) ∨ Ugly(harry))) → (¬Kind(harry) ∧ ¬CEO(harry))\" \n        # If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_102",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke spends a lot of time hanging out and playing with his siblings.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{\"Predicates\": \"Twin(x) ::: x is a twin. Triplet(x) ::: x is a triplet. SameAge(x, y) ::: x and y are of the same age. Complain(x, y) ::: x complains about y. Annoying(x, y) ::: x finds y annoying. LiveAtHome(x) ::: x lives at home regularly. BondWithFamily(x) ::: x develops strong bonds with their family members. HangOutPlay(x, y) ::: x spends a lot of time hanging out with and playing with y.\",\n\"Premises\": [\n  \"\\u2200x ((Twin(x) \\u2228 Triplet(x)) \\u2192 \\u2200y (SameAge(x, y) \\u2192 HangOutPlay(x, y))) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\",\n  \"\\u2200x (\\u2203y (SameAge(x, y)) \\u2192 (Twin(x) \\u2228 Triplet(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\",\n  \"\\u2200x (\\u2200y ((Complain(x, y) \\u2227 Annoying(y, x)) \\u2192 \\u2203z (SameAge(z, y)))) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\",\n  \"\\u2200x (\\u00acLiveAtHome(x) \\u2192 \\u00acBondWithFamily(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\",\n  \"\\u2200x (\\u2203y (HangOutPlay(x, y)) \\u2192 \\u00acLiveAtHome(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\",\n  \"(Twin(luke) \\u2228 Triplet(luke)) \\u25aa (BondWithFamily(luke) \\u25aa (\\u00ac(Twin(luke) \\u2228 Triplet(luke))) \\u25aa \\u00ac(BondWithFamily(luke)))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\"\n],\n\"Conclusion\": \"\\u2203y (HangOutPlay(luke, y)) ::: Luke spends a lot of time hanging out and playing with his siblings.\"}}"
    ]
  },
  {
    "id": "FOLIO_dev_103",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke complains often about annoying siblings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here's the analysis of the given problem:\n\n**Predicates**\n\n* TwinOrTriplet(x) ::: x is a twin or triplet.\n* SameAgeSiblings(x) ::: x has siblings who are the same age.\n* ComplainOften(x) ::: x complains often about annoying siblings.\n* SpendTimeWithSiblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\n* LiveAtHomeRegularly(x) ::: x lives at home regularly.\n* StrongBonds(x) ::: x develops strong bonds with their family members.\n\n**Premises**\n\n1. ∀x (TwinOrTriplet(x) → SpendTimeWithSiblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n2. ∀x (SameAgeSiblings(x) → TwinOrTriplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.\n3. ∀x (ComplainOften(x) → SameAgeSiblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n4. ∀x (¬LiveAtHomeRegularly(x) → ¬StrongBonds(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n5. ∀x (SpendTimeWithSiblings(x) → ¬LiveAtHomeRegularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n6. (TwinOrTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinOrTriplet(luke) ∧ ¬StrongBonds(luke)) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\n\n**Conclusion**\n\nComplainOften(luke) ::: Does Luke complain often about annoying siblings?"
    ]
  },
  {
    "id": "FOLIO_dev_104",
    "context": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Luke is neither a twin nor triplet nor complains often about annoying siblings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{{\n\"Predicates\": {\n\"Twin(x)\": \"x is a twin\",\n\"Triplet(x)\": \"x is a triplet\",\n\"SiblingSameAge(x, y)\": \"x and y are siblings who are the same age\",\n\"ComplainAboutSibling(x, y)\": \"x complains often about annoying sibling y\",\n\"HangoutWithSibling(x, y)\": \"x spends a lot of time hanging out with and playing with sibling y\",\n\"LiveAtHomeRegularly(x)\": \"x lives at home regularly\",\n\"DevelopStrongBondsWithFamilyMember(x, y)\": \"x develops strong bonds with family member y\"\n},\n\"Premises\": [\n\"∀x (Twin(x) ∨ Triplet(x)) → ∃y HangoutWithSibling(x, y)\", \n\"∀x ∀y SiblingSameAge(x, y) → Twin(x) ∨ Triplet(x)\",\n\"∀x ∀y ComplainAboutSibling(x, y) → SiblingSameAge(x, y)\",\n\"¬LiveAtHomeRegularly(x) → ¬∃y DevelopStrongBondsWithFamilyMember(x, y)\",\n\"∀x ∀y HangoutWithSibling(x, y) → ¬LiveAtHomeRegularly(x)\",\n\"(Twin(luke) ∨ Triplet(luke)) ∧ ∃y DevelopStrongBondsWithFamilyMember(luke, y)) ⊕ ¬(Twin(luke) ∨ Triplet(luke)) ∧ ¬∃y DevelopStrongBondsWithFamilyMember(luke, y))\"\n],\n\"Conclusion\": \"¬((Twin(luke) ∨ Triplet(luke)) ∨ ∃y ComplainAboutSibling(luke, y)))\"\n}}"
    ]
  },
  {
    "id": "FOLIO_dev_105",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom can apply for financial aid from ETS to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Costs(x, y)\": \"It costs US $y to take the x test.\",\n        \"ProvidesFinancialAid(x, y)\": \"x provides financial aid to those y applicants who prove economic hardship.\",\n        \"EconomicHardship(x)\": \"x refers to difficulty caused by having too little money or too few resources.\",\n        \"SingleParentFamily(x)\": \"x lives in a single-parent family.\",\n        \"OutOfWork(x, y)\": \"x has been out of work for more than y year.\"\n    },\n    \"Premises\": [\n        \"Costs(GRE, 205)\",\n        \"∀x (Applicant(x) ∧ EconomicHardship(x) → ProvidesFinancialAid(ETS, x))\",\n        \"EconomicHardship(Tom)\",\n        \"SingleParentFamily(Tom)\",\n        \"OutOfWork(Dad, 1)\"\n    ],\n    \"Conclusion\": {\n        \"ProvidesFinancialAid(ETS, Tom)\": \"Tom can apply for financial aid from ETS to take the GRE test.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_106",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? It cost below US $300 to take the GRE test.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": \n    {\n        \"Cost(x, y)\": \"x costs y dollars to take the GRE test\",\n        \"FinancialAid(x)\": \"ETS provides financial aid to x GRE applicants who prove economic hardship\",\n        \"EconomicHardship(x)\": \"x refers to difficulty caused by having too little money or too few resources\"\n    },\n    \n    \"Premises\": \n    {\n        \"Cost(GRE, 205)\": \"It costs US $205 to take the GRE test\",\n        \"∀x (GREApplicant(x) ∧ EconomicHardship(x) → FinancialAid(x))\": \"ETS provides financial aid to those GRE applicants who prove economic hardship\",\n        \"EconomicHardship(Tom)\": \"Tom lives in a single-parent family and his dad has been out of work for more than a year\"\n    },\n    \n    \"Conclusion\": \n    {\n        \"(∃x Cost(GRE, x) ∧ x < 300)\": \"It cost below US $300 to take the GRE test\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_107",
    "context": "It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is no financial aid available for the GRE test.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"Costs(x, y)\": \"x costs US$y\",\n        \"ProvidesAid(x, y)\": \"x provides financial aid to y\",\n        \"Hardship(x)\": \"x experiences economic hardship\",\n        \"Difficulty(x)\": \"x has difficulty caused by having too little money or too few resources\",\n        \"LivesInSingleParentFamily(x)\": \"x lives in a single-parent family\",\n        \"OutOfWork(x, y)\": \"x's parent has been out of work for more than y years\"\n    ],\n    \"Premises\": [\n        \"Costs(GRETest, 205)\": \"It costs US $205 to take the GRE test.\",\n        \"∀x (AppliesForAid(x) → ProvidesAid(ETS, x))\": \"ETS provides financial aid to those GRE applicants who prove economic hardship.\",\n        \"Hardship(x) ↔ Difficulty(x)\": \"Economic hardship refers to difficulty caused by having too little money or too few resources.\",\n        \"LivesInSingleParentFamily(Tom)\": \"Tom lives in a single-parent family.\",\n        \"OutOfWork(Dad, 1)\": \"His dad has been out of work for more than a year.\"\n    ],\n    \"Conclusion\": [\n        \"¬∃x ProvidesAid(x, GRETest)\": \"There is no financial aid available for the GRE test.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_108",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter tidies his space consistently and enjoys the process of cleaning.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Spill(x)\": \"x spills a lot of food on their clothing\",\n        \"Tidy(x)\": \"x tidies their spaces consistently\",\n        \"EnjoyClean(x)\": \"x enjoys the process of cleaning\",\n        \"Foodie(x)\": \"x is a foodie who goes out frequently to find new food restaurants to try\",\n        \"OnlyChild(x)\": \"x grew up as an only child with no siblings\",\n        \"BusyParent(x)\": \"x has parents who are very busy with their regular jobs\",\n        \"HighIncomeHousehold(x)\": \"x belongs to a household with a high net income\"\n    },\n    \"Premises\": [\n        \"∀x (Spill(x) → ¬(Tidy(x) ∧ EnjoyClean(x)))\",  # If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n        \"∀x (Foodie(x) → Spill(x))\",  # All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n        \"∀x (OnlyChild(x) → Tidy(x) ∧ EnjoyClean(x))\",  # If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n        \"∀x (BusyParent(x) → OnlyChild(x))\",  # If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n        \"∀x (HighIncomeHousehold(x) → BusyParent(x))\"  # All households with a high net income have people who have parents who are very busy with their regular jobs.\n    ],\n    \"Conclusion\": {\n        \"(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter)) → (Tidy(peter) ∧ EnjoyClean(peter))\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_109",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Foodie(x)\": \"x is a foodie\",\n        \"FrequentDiner(x)\": \"x goes out frequently to find new food restaurants to try\",\n        \"SpillFood(x)\": \"x spills a lot of food on their clothing\",\n        \"TidySpace(x)\": \"x tidies their spaces consistently\",\n        \"EnjoyCleaning(x)\": \"x enjoys the process of cleaning\",\n        \"OnlyChild(x)\": \"x grew up as an only child with no siblings\",\n        \"BusyParents(x)\": \"x has parents who are very busy with their regular jobs\",\n        \"HighNetIncome(x)\": \"x belongs to a household with a high net income\"\n    },\n    \"Premises\": [\n        \"∀x (SpillFood(x) → ¬(TidySpace(x) ∧ EnjoyCleaning(x)))\",\n        \"∀x (FrequentDiner(x) → SpillFood(x))\",\n        \"∀x (OnlyChild(x) → TidySpace(x) ∧ EnjoyCleaning(x))\",\n        \"∀x (BusyParents(x) → OnlyChild(x))\",\n        \"∀x (HighNetIncome(x) → BusyParents(x))\",\n        \"(SpillFood(peter) ∧ OnlyChild(peter)) ⊕ ¬(SpillFood(peter) ∨ OnlyChild(peter))\"\n    ],\n    \"Conclusion\": {\n        \"(FrequentDiner(peter) ∨ HighNetIncome(peter))\": \"Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_110",
    "context": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Spill(x)\": \"x spills a lot of food on their clothing\",\n    \"Tidy(x)\": \"x tidies their spaces consistently and enjoys the process of cleaning\",\n    \"Foodie(x)\": \"x is a foodie who goes out frequently to find new food restaurants to try\",\n    \"OnlyChild(x)\": \"x grew up as an only child with no siblings\",\n    \"BusyParents(x)\": \"x has parents who are very busy with their regular jobs\",\n    \"HighIncomeHousehold(x)\": \"x belongs to a household with a high net income\"\n  },\n  \"Premises\": [\n    \"∀x (Spill(x) → ¬Tidy(x))\", // If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n    \"∀x (Foodie(x) ∧ FrequentlyGoOut(x) → Spill(x))\", // All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n    \"∀x (OnlyChild(x) → Tidy(x))\", // If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n    \"∀x (BusyParents(x) → OnlyChild(x))\", // If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n    \"∀x (HighIncomeHousehold(x) → BusyParents(x))\", // All households with a high net income have people who have parents who are very busy with their regular jobs.\n    \"(Spill(peter) ∧ OnlyChild(peter)) ⊕ ¬(Spill(peter) ∨ OnlyChild(peter))\" // Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\n  ],\n  \"Conclusion\": {\n    \"(Foodie(peter) ∧ FrequentlyGoOut(peter) ∧ HighIncomeHousehold(peter)) ⊕ ¬(Foodie(peter) ∨ FrequentlyGoOut(peter) ∨ HighIncomeHousehold(peter))\" // Peter is either a foodie who goes out frequently to find new food restaurants to try and belongs to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_111",
    "context": "All fir trees are evergreens. Some objects of worship are fir trees.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some evergreens are not objects of worship.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"FirTree(x)\": \"x is a fir tree\",\n        \"Evergreen(x)\": \"x is an evergreen\",\n        \"ObjectOfWorship(x)\": \"x is an object of worship\"\n    },\n    \"Premises\": [\n        \"∀x (FirTree(x) → Evergreen(x))\",  # All fir trees are evergreens.\n        \"∃x (ObjectOfWorship(x) ∧ FirTree(x))\"  # Some objects of worship are fir trees.\n    ],\n    \"Conclusion\": {\n        \"∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x))\"  # Some evergreens are not objects of worship.\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_112",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Juan de Onate visited a mountain range in New Mexico.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"MountainRange(x)\": \"x is a mountain range\",\n        \"LocatedIn(x, y)\": \"x is located in y\",\n        \"Donated(x)\": \"x was donated\",\n        \"Visited(x, y)\": \"x visited y\"\n    ],\n    \"Premises\": [\n        \"(MountainRange(picuris) ∧ (LocatedIn(picuris, newmexico) ∨ LocatedIn(picuris, texas)))\": \"The Picuris Mountains are a mountain range in New Mexico or Texas\",\n        \"Visited(juanDeOnate, picuris)\": \"Juan de Onate visited the Picuris Mountains\",\n        \"(LocatedIn(hardingPegmatiteMine, picuris) ∧ Donated(hardingPegmatiteMine))\": \"The Harding Pegmatite Mine, located in the Picuris Mountains, was donated\",\n        \"¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ ∃y (LocatedIn(y, x) ∧ Donated(y)))\": \"There are no mountain ranges in Texas that have mines which have been donated\"\n    ],\n    \"Conclusion\": [\n        \"(Visited(juanDeOnate, picuris) ∧ LocatedIn(picuris, newmexico))\": \"Juan de Onate visited a mountain range in New Mexico\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_113",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Juan de Onate visited a mountain range in Texas.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Visited(x, y)\": \"x visited y\",\n        \"MountainRange(x)\": \"x is a mountain range\",\n        \"State(x)\": \"x is a state\",\n        \"Mine(x)\": \"x is a mine\",\n        \"Donated(x)\": \"x was donated\"\n    },\n    \"Premises\": [\n        \"(MountainRange(picuris) ∧ State(newmexico)) ⊕ (MountainRange(picuris) ∧ State(texas))\", \n        \"Visited(juan, picuris)\",\n        \"(Mine(harding) ∧ LocatedIn(harding, picuris) ∧ Donated(harding))\",\n        \"¬∃x (State(x, texas) ∧ Mine(x) ∧ Donated(x))\"\n    ],\n    \"Conclusion\": [\n        \"State(picuris, texas) → Visited(juan, picuris)\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_114",
    "context": "The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Picuris(x)\": \"x is a mountain range in New Mexico\",\n        \"Visit(x, y)\": \"x visited y\",\n        \"Donated(x)\": \"x was donated\",\n        \"LocatedIn(x, y)\": \"x is located in y\"\n    },\n    \"Premises\": [\n        \"(Picuris(picuris) ∧ LocatedIn(picuris, newmexico)) ⊕ (Picuris(picuris) ∧ LocatedIn(picuris, texas))\", \n        \"Visit(juan, picuris)\", \n        \"Donated(hardingpegmatitemine)\", \n        \"LocatedIn(hardingpegmatitemine, picuris)\",\n        \"¬∃x (MountainRange(x) ∧ LocatedIn(x, texas) ∧ Donated(Mine(x)))\"\n    ],\n    \"Conclusion\": {\n        \"¬LocatedIn(hardingpegmatitemine, newmexico)\": \"The Harding Pegmatite Mine is not located in a mountain range in New Mexico.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_115",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter is shorter than a man in Michael's class.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n\"Predicates\": [\n\"Taller(x, y) ::: x is taller than y.\",\n\"Man(x) ::: x is a man.\",\n\"Block(x, y) ::: x can block y's shooting.\",\n\"Jump(x) ::: x can jump when shooting.\",\n\"GreatShooter(x) ::: x is a great shooter.\"\n],\n\"Premises\": [\n\"Taller(michael, everyoneElseInHisClass) ::: Michael is a man who is taller than everyone else in his class.\",\n\"Taller(peter, michael) ::: Peter is a man who is taller than Michael.\",\n\"∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z\",\n\"¬Jump(michael) ::: Michael cannot block Windy's shooting.\",\n\"∀x (Taller(x, y) → Block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\",\n\"∀x ∀y ((Jump(y) ∧ GreatShooter(y)) ∨ Block(michael, y)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\"\n],\n\"Conclusion\": [\n\"¬Taller(peter, michael) ::: Peter is shorter than a man in Michael's class.\"\n]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_116",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Windy is a great shooter.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Taller(x, y)\": \"x is taller than y\",\n        \"CanBlock(x, y)\": \"x can block y's shooting\",\n        \"Man(x)\": \"x is a man\",\n        \"Shooter(x)\": \"x is a shooter\",\n        \"Jump(x)\": \"x can jump when shooting\",\n        \"GreatShooter(x)\": \"x is a great shooter\"\n    },\n    \"Premises\": [\n        \"∀x ∀y (Taller(x, y) → CanBlock(x, y))\": \"If a man is taller than another man, the taller one can block the other's shooting.\",\n        \"Man(michael) ∧ ∀x ((Man(x) ∧ ¬(x = michael)) → Taller(michael, x))\": \"Michael is a man who is taller than everyone else in his class.\",\n        \"∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z))\": \"If person x is taller than person y, and person y is taller than person z, than x is taller than z\",\n        \"Man(peter) ∧ Taller(peter, michael)\": \"Peter is a man who is taller than Michael.\",\n        \"∀x (¬Jump(x) → CanBlock(michael, x))\": \"Michael can block any shooting from a person as long as the person does not jump when shooting.\",\n        \"¬CanBlock(michael, windy)\": \"Michael cannot block Windy's shooting.\",\n        \"∀x ((Shooter(x) ∧ Jump(x)) → GreatShooter(x))\": \"Every shooter who can jump when shooting is a great shooter.\"\n    ],\n    \"Conclusion\": {\n        \"GreatShooter(windy)\": \"Windy is a great shooter\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_117",
    "context": "If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Peter can block Windy's shooting.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Taller(x, y)\": \"x is taller than y\",\n        \"Man(x)\": \"x is a man\",\n        \"Block(x, y)\": \"x can block y's shooting\",\n        \"Shooter(x)\": \"x is a shooter\",\n        \"Jump(x)\": \"x can jump when shooting\",\n        \"GreatShooter(x)\": \"x is a great shooter\"\n    },\n    \"Premises\": [\n        \"∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → Block(x, y))\", \n        \"Man(michael) ∧ ∀x (Man(x) → Taller(michael, x))\",\n        \"∀x ∀y ∀z (Taller(x, y) ∧ Taller(y, z) → Taller(x, z))\",\n        \"Taller(peter, michael)\",\n        \"∀x (Block(michael, x) ⊕ Jump(x))\", \n        \"¬Block(michael, windy)\", \n        \"∀x (Shooter(x) ∧ Jump(x) → GreatShooter(x))\"\n    ],\n    \"Conclusion\": {\n        \"Question\": \"Can Peter block Windy's shooting?\",\n        \"Logical Formula\": \"Block(peter, windy)\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_118",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Barutin is named after all islands in Antarctica.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here's the problem parsed into first-order logic formulars as requested:\n\n\n```json\n{\n  \"Predicates\": {\n    \"NamedAfter(x, y)\": \"x is named after y\",\n    \"LocatedIn(x, y)\": \"x is located in y\"\n  },\n  \"Premises\": [\n    \"NamedAfter(barutinCove, barutin)\",\n    \"LocatedIn(barutinCove, snowIsland)\",\n    \"(∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z)))\",\n    \"LocatedIn(snowIsland, southShetlandIslands)\",\n    \"LocatedIn(greenwichIsland, southShetlandIslands)\",\n    \"LocatedIn(deceptionIsland, southShetlandIslands)\",\n    \"LocatedIn(southShetlandIslands, antarctica)\"\n  ],\n  \"Conclusion\": [\n    \"∃x (NamedAfter(barutin, x) ∧ LocatedIn(x, antarctica))\" \n  ]\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_119",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is at least one cove in Antarctica named after a place in Bulgaria.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"NamedAfter(x, y)\": \"x is named after y\",\n        \"IsLocatedIn(x, y)\": \"x is located in y\"\n    },\n    \"Premises\": [\n        \"NamedAfter(barutinCove, barutin)\",\n        \"IsLocatedIn(barutinCove, snowIsland)\",\n        \"snowIsland ∈ southShetlandIslands\",\n        \"greenwichIsland ∈ southShetlandIslands\",\n        \"deceptionIsland ∈ southShetlandIslands\",\n        \"southShetlandIslands ⊆ antarctica\"\n    ],\n    \"Conclusion\": {\n        \"∃x (NamedAfter(x, y) ∧ IsLocatedIn(x, antarctica) ∧ y ∈ bulgaria)\": \"There is at least one cove in Antarctica named after a place in Bulgaria.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_120",
    "context": "Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Barutin is not located in Antarctica.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"NamedAfter(x, y)\": \"x is named after y\",\n        \"LocatedIn(x, y)\": \"x is located in y\"\n    },\n    \"Premises\": [\n        \"NamedAfter(BarutinCove, Barutin)\",\n        \"LocatedIn(BarutinCove, southwest coast of Snow Island)\",\n        \"LocatedIn(SnowIsland, South Shetland Islands)\",\n        \"LocatedIn(GreenwichIsland, South Shetland Islands)\",\n        \"LocatedIn(DeceptionIsland, South Shetland Islands)\",\n        \"LocatedIn(South Shetland Islands, Antarctica)\",\n        \"∀x ∀y ∀z (LocatedIn(x, y) ∧ LocatedIn(y, z) → LocatedIn(x, z))\"\n    ],\n    \"Conclusion\": {\n        \"¬LocatedIn(Barutin, Antarctica)\": \"Barutin is not located in Antarctica\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_121",
    "context": "Some affection is love. Some love is positive.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some affection is positive.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Affection(x)\": \"x is an affection\",\n    \"Love(x)\": \"x is love\",\n    \"Positive(x)\": \"x is positive\"\n  },\n  \"Premises\": [\n    \"∃x (Affection(x) ∧ Love(x))\", \n    \"∃x (Love(x) ∧ Positive(x))\"\n  ],\n  \"Conclusion\": {\n    \"∃x (Affection(x) ∧ Positive(x))\": \"Some affection is positive.\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_122",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Greyhound is an airline.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Transport(x, y)\": \"x can transport multiple y\",\n        \"Empty(x)\": \"x is empty\",\n        \"Airline(x)\": \"x is an airline\",\n        \"Plane(x)\": \"x is a plane\",\n        \"Greyhound(x)\": \"x is Greyhound\"\n    },\n    \"Premises\": [\n        \"\\u2200x \\u2192 (Transport(x, passengers) → ¬Empty(x))\",  # If something can transport multiple passengers, then they are not empty.\n        \"\\u2200x (Airline(x) → Transport(x, passengers))\",  # All airlines can transport multiple passengers.\n        \"\\u2200x (Plane(x) → Empty(x))\",  # All planes are empty.\n        \"\\u2200x (Boeing707(x) → Plane(x))\",  # All Boeing 707s are planes.\n        \"¬Airline(Greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x))\"  # If Greyhound is not an airline, then there are no Greyhound planes.\n    ],\n    \"Conclusion\": {\n        \"Airline(Greyhound)\": \"Greyhound is an airline\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_123",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A Greyhound is a Boeing 707.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Airline(x)\": \"x is an airline\",\n        \"Plane(x)\": \"x is a plane\",\n        \"Boeing707(x)\": \"x is a Boeing 707\",\n        \"Greyhound(x)\": \"x is Greyhound\",\n        \"Empty(x)\": \"x is empty\",\n        \"TransportMultiplePassengers(x)\": \"x can transport multiple passengers\"\n    },\n    \"Premises\": [\n        \"∀x (TransportMultiplePassengers(x) → ¬Empty(x))\",  # If something can transport multiple passengers, then they are not empty\n        \"∀x (Airline(x) → TransportMultiplePassengers(x))\",  # All airlines can transport multiple passengers\n        \"∀x (Plane(x) → Empty(x))\",  # All planes are empty\n        \"∀x (Boeing707(x) → Plane(x))\",  # All Boeing 707s are planes\n        \"(¬Airline(Greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)))\"  # If Greyhound is not an airline, then there are no Greyhound planes\n    ],\n    \"Conclusion\": [\n        \"Boeing707(Greyhound)\"  # A Greyhound is a Boeing 707\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_124",
    "context": "If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A Greyhound is not a Boeing 707.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Transport(x, y)\": \"x can transport y\",\n        \"Empty(x)\": \"x is empty\",\n        \"Airline(x)\": \"x is an airline\",\n        \"Plane(x)\": \"x is a plane\",\n        \"Boeing707(x)\": \"x is a Boeing 707\"\n    },\n    \"Premises\": {\n        \"∀x ∀y (Transport(x, y) → ¬Empty(x))\": \"If something can transport multiple passengers, then they are not empty.\",\n        \"∀x (Airline(x) → Transport(x, multiplePassengers))\": \"All airlines can transport multiple passengers.\",\n        \"∀x (Plane(x) → Empty(x))\": \"All planes are empty.\",\n        \"∀x (Boeing707(x) → Plane(x))\": \"All Boeing 707s are planes.\",\n        \"(¬Airline(greyhound) → ¬∃x (Greyhound(x) ∧ Plane(x)))\": \"If Greyhound is not an airline, then there are no Greyhound planes.\"\n    },\n    \"Conclusion\": {\n        \"∃x (Greyhound(x) ∧ Boeing707(x)) → False\": \"A Greyhound is not a Boeing 707.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_125",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a monkey.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Mammal(x)\": \"x is a mammal.\",\n    \"Animal(x)\": \"x is an animal.\",\n    \"Monkey(x)\": \"x is a monkey.\",\n    \"Bird(x)\": \"x is a bird.\",\n    \"Fly(x)\": \"x flies.\",\n    \"Breathe(x)\": \"x breathes.\",\n    \"HasWings(x)\": \"x has wings.\"\n  },\n  \"Premises\": [\n    \"∀x (Mammal(x) → Animal(x))\", \n    \"∀x (Monkey(x) → Mammal(x))\", \n    \"∀x (Animal(x) → Monkey(x) ⊕ Bird(x))\",\n    \"∀x (Bird(x) → Fly(x))\",\n    \"∀x (Animal(x) → Breathe(x))\",\n    \"∀x (Fly(x) → HasWings(x))\",\n    \"¬(Fly(Rock) ∨ Bird(Rock)) → ¬(Fly(Rock) ∨ Breathe(Rock))\"\n  ],\n  \"Conclusion\": [\n    \"Monkey(Rock)\"\n  ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_126",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock has wings.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here is the analysis of the problem and question in JSON format:\n\n\n```\n{\n    \"Predicates\": {\n        \"Mammal(x)\": \"x is a mammal\",\n        \"Monkey(x)\": \"x is a monkey\",\n        \"Animal(x)\": \"x is an animal\",\n        \"Bird(x)\": \"x is a bird\",\n        \"Fly(x)\": \"x flies\",\n        \"Breathe(x)\": \"x breathes\",\n        \"Wings(x)\": \"x has wings\"\n    },\n    \"Premises\": [\n        \"∀x (Mammal(x) → Animal(x))\",  // All mammals are animals\n        \"∀x (Monkey(x) → Mammal(x))\",  // All monkeys are mammals\n        \"∀x (Animal(x) → Monkey(x) ⊕ Bird(x))\",  // An animal is either a monkey or a bird\n        \"∀x (Bird(x) → Fly(x))\",  // All birds fly\n        \"∀x (Animal(x) → Breathe(x))\",  // All animals breathe\n        \"(Fly(Rock) → Wings(Rock))\"  // If something can fly, then it has wings\n    ],\n    \"Conclusion\": \"¬(Wings(Rock))\"  // Rock does not have wings.\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_127",
    "context": "All mammals are animals. All monkeys are mammals. An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock does not have wings.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Mammal(x)\": \"x is a mammal\",\n    \"Animal(x)\": \"x is an animal\",\n    \"Monkey(x)\": \"x is a monkey\",\n    \"Bird(x)\": \"x is a bird\",\n    \"Fly(x)\": \"x can fly\",\n    \"Breathe(x)\": \"x can breathe\",\n    \"HasWings(x)\": \"x has wings\"\n  },\n  \"Premises\": [\n    \"∀x (Mammal(x) → Animal(x))\",  # All mammals are animals.\n    \"∀x (Monkey(x) → Mammal(x))\",  # All monkeys are mammals.\n    \"∀x (Animal(x) → (Monkey(x) ⊕ Bird(x)))\",  # An animal is either a monkey or a bird.\n    \"∀x (Bird(x) → Fly(x))\",  # All birds fly.\n    \"∀x (Animal(x) → Breathe(x))\",  # All animals breathe.\n    \"∀x (Fly(x) → HasWings(x))\",  # If something can fly, then it has wings.\n    \"(¬(Fly(rock) ∨ Bird(rock))) → ¬(Fly(rock) ∨ Breathe(rock)))\"  # If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n  ],\n  \"Conclusion\": {\n    \"¬HasWings(rock)\": \"Rock does not have wings\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_128",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has a wedding that is well-attended.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Wedding(x)\": \"x is a wedding\",\n        \"Child(x)\": \"x has at least one child\",\n        \"TravelParis(x)\": \"x travels to Paris for their honeymoon\",\n        \"July(x)\": \"x occurs in July\",\n        \"WellAttended(x)\": \"x is well-attended\"\n    },\n    \"Premises\": [\n        \"∀x (Wedding(x) → Child(x))\", \n        \"∀x (TravelParis(x) → Wedding(x))\", \n        \"∀x ((July(x) ∧ Wedding(x)) → TravelParis(x))\", \n        \"∃x (July(x) ∧ Wedding(x) ∧ WellAttended(x))\",\n        \"Child(john) → ¬(TravelParis(john) ∨ Wedding(john))\",\n        \"(Wedding(john) ∧ WellAttended(john)) → ((July(john) ∧ Wedding(john)) ∨ TravelParis(john))\"\n    ],\n    \"Conclusion\": {\n        \"∃x (Wedding(john) ∧ WellAttended(x))\": \"John has a wedding that is well-attended\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_129",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John does not have a wedding that is well-attended.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"HasWedding(x) ::: x has a wedding.\",\n        \"HasChild(x) ::: x has at least one child.\",\n        \"TravelsToParisForHoneymoon(x) ::: x travels to Paris for their honeymoon.\",\n        \"WellAttended(x) ::: x is well-attended.\"\n    ],\n    \"Premises\": [\n        \"\\u2200x (HasWedding(x) \\u2192 HasChild(x)) ::: All people who have a wedding are people who have at least one child.\",\n        \"\\u2200x (TravelsToParisForHoneymoon(x) \\u2192 HasWedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\",\n        \"\\u2200x (HasWeddingInJuly(x) \\u2192 TravelsToParisForHoneymoon(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\",\n        \"\\u2203x (HasWeddingInJuly(x) \\u2227 WellAttended(x)) ::: Some weddings in July are well-attended.\",\n        \"\\u2200x ((HasChild(x) \\u2192 ¬TravelsToParisForHoneymoon(x) \\u2228 ¬HasWedding(x))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\",\n        \"WellAttended(johnsWedding) \\u2192 (HasWeddingInJuly(johnsWedding) \\u2228 TravelsToParisForHoneymoon(john)) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\"\n    ],\n    \"Conclusion\": [\n        \"¬WellAttended(johnsWedding) ::: John does not have a wedding that is well-attended.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_130",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has at least one child.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"HasWedding(x)\": \"x has a wedding\",\n        \"HasChild(x)\": \"x has at least one child\",\n        \"TravelToParisForHoneymoon(x)\": \"x travels to Paris for their honeymoon\",\n        \"BelongToJuly(x)\": \"weddings that occur in July belong to x\",\n        \"WellAttended(x)\": \"x is well-attended\"\n    },\n    \"Premises\": [\n        \"\\u2200x (HasWedding(x) \\u2192 HasChild(x))\", \n        \"\\u2200x (TravelToParisForHoneymoon(x) \\u2192 HasWedding(x))\",\n        \"\\u2200x (BelongToJuly(x) \\u2192 TravelToParisForHoneymoon(x))\",\n        \"\\u2203x (BelongToJuly(x) \\u2227 WellAttended(x))\",\n        \"\\u00ac(HasChild(john) \\u2192 \\u00ac(TravelToParisForHoneymoon(john) \\u2228 HasWedding(john)))\", \n        \"(WellAttended(john) \\u2192 (BelongToJuly(john) \\u2228 TravelToParisForHoneymoon(john)))\"\n    ],\n    \"Conclusion\": {\n        \"\\u2203x (HasChild(x))\": \"John has at least one child.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_131",
    "context": "All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Wedding(x)\": \"x has a wedding\",\n        \"Child(x)\": \"x has at least one child\",\n        \"TravelParis(x)\": \"x travels to Paris for their honeymoon\",\n        \"JulyWedding(x)\": \"x's wedding occurs in July\",\n        \"WellAttended(x)\": \"x's wedding is well-attended\"\n    },\n    \"Premises\": [\n        \"∀x (Wedding(x) → Child(x))\",  # All people who have a wedding are people who have at least one child.\n        \"∀x (TravelParis(x) → Wedding(x))\",  # All people who travel to Paris for their honeymoon are people who have a wedding.\n        \"∀x (JulyWedding(x) → TravelParis(x))\",  # All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n        \"∃x (JulyWedding(x) ∧ WellAttended(x))\",  # Some weddings in July are well-attended.\n        \"(Child(john) → ¬TravelParis(john) ∧ ¬Wedding(john))\",  # If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n        \"((Wedding(john) ∧ WellAttended(john)) → (JulyWedding(john) ∨ TravelParis(john)))\"  # If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\n    ],\n    \"Conclusion\": {\n        \"(¬WellAttended(john) ∧ ¬TravelParis(john))\"  # John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_132",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Platypus are mammals with no teeth.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Mammal(x)\": \"x is a mammal.\",\n        \"Teeth(x)\": \"x has teeth.\"\n    },\n    \"Premises\": [\n        \"∃x (Mammal(x) ∧ Teeth(x))\", // Some mammals have teeth.\n        \"¬Teeth(platypus)\", // Platypus have no teeth.\n        \"Mammal(platypus)\" // Platypus are mammals.\n    ],\n    \"Conclusion\": \"(Mammal(platypus) ∧ ¬Teeth(platypus))\" // Platypus are mammals with no teeth.\n}"
    ]
  },
  {
    "id": "FOLIO_dev_133",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Platypus are reptiles.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Mammal(x)\": \"x is a mammal\",\n        \"Reptile(x)\": \"x is a reptile\",\n        \"Teeth(x)\": \"x has teeth\"\n    },\n    \"Premises\": [\n        \"∃x (Mammal(x) ∧ Teeth(x))\",  # Some mammals have teeth\n        \"∀x (Platypus(x) → ¬Teeth(x))\",  # Platypus have no teeth\n        \"∀x (Platypus(x) → Mammal(x))\",  # Platypus are mammals\n        \"Humans ∧ Teeth(humans)\"  # Humans have teeth\n    ],\n    \"Conclusion\": [\n        \"¬∃x (Platypus(x) ∧ Reptile(x))\"  # Platypus are not reptiles\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_134",
    "context": "[BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals. Humans have teeth.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Humans are mammals.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Mammal(x)\": \"x is a mammal.\",\n        \"HaveTeeth(x)\": \"x has teeth.\"\n    },\n    \"Premises\": [\n        \"\\u2203x (Mammal(x) \\u2227 HaveTeeth(x))\",  # Some mammals have teeth.\n        \"\\u221A x (Platypus(x) \\u2192 ¬HaveTeeth(x))\",  # Platypus have no teeth.\n        \"\\u221A x (Platypus(x) \\u2192 Mammal(x))\",  # Platypus are mammals.\n        \"HaveTeeth(Humans)\"  # Humans have teeth.\n    ],\n    \"Conclusion\": {\n        \"Mammal(Humans)\": \"Humans are mammals.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_135",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Space sucks.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Here is the response in JSON format:\n\n\n```\n{\n    \"Predicates\": {\n        \"Suck(x)\": \"x sucks\",\n        \"Vacuum(x)\": \"x is a vacuum\",\n        \"Vampire(x)\": \"x is a vampire\",\n        \"Duster(x)\": \"x is a duster\"\n    },\n    \"Premises\": [\n        \"∀x (Plunger(x) → Suck(x))\",  // Plungers suck\n        \"∀x (Vacuum(x) → Suck(x))\",  // Vacuums suck\n        \"∀x (Vampire(x) → Suck(x))\",  // Vampires suck\n        \"Vacuum(space)\",  // Space is a vacuum\n        \"¬∃x (Duster(x) ∧ Suck(x))\"  // A duster is a household appliance that doesn't suck\n    ],\n    \"Conclusion\": {\n        \"? Suck(space)\": \"Does space suck?\"\n    }\n}\n```\n\nThis represents the logical structure of the problem and question, using predicates to define the key concepts, premises to state the given information, and a conclusion to frame the question being asked."
    ]
  },
  {
    "id": "FOLIO_dev_136",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Space is a vampire.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Suck(x)\": \"x sucks\",\n        \"IsVacuum(x)\": \"x is a vacuum\",\n        \"IsVampire(x)\": \"x is a vampire\",\n        \"IsHouseholdAppliance(x)\": \"x is a household appliance\"\n    },\n    \"Premises\": [\n        \"∀x (Plunger(x) → Suck(x))\",  # Plungers suck\n        \"∀x (Vacuum(x) → Suck(x))\",  # Vacuums suck\n        \"∀x (Vampire(x) → Suck(x))\",  # Vampires suck\n        \"IsVacuum(space)\",  # Space is a vacuum\n        \"Duster(duster) ∧ IsHouseholdAppliance(duster) ∧ ¬Suck(duster)\"  # A duster is a household appliance that doesn't suck\n    ],\n    \"Conclusion\": {\n        \"¬IsVampire(space)\": \"Space is not a vampire\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_137",
    "context": "Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If something is a household appliance, it sucks.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Suck(x)\": \"x sucks\",\n        \"Vacuum(x)\": \"x is a vacuum\",\n        \"Vampire(x)\": \"x is a vampire\",\n        \"HouseholdAppliance(x)\": \"x is a household appliance\"\n    },\n    \"Premises\": [\n        \"∀x (Plunger(x) → Suck(x))\",  # Plungers suck\n        \"∀x (Vacuum(x) → Suck(x))\",  # Vacuums suck\n        \"∀x (Vampire(x) → Suck(x))\",  # Vampires suck\n        \"Vacuum(space)\",  # Space is a vacuum\n        \"¬Suck(duster) ∧ HouseholdAppliance(duster)\"  # A duster is a household appliance that doesn't suck\n    ],\n    \"Conclusion\": {\n        \"∀x (HouseholdAppliance(x) → Suck(x))\"  # If something is a household appliance, it sucks.\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_138",
    "context": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Supervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"SupervisedLearning(x)\": \"x is supervised learning\",\n        \"UnsupervisedLearning(x)\": \"x is unsupervised learning\",\n        \"ReinforcementLearning(x)\": \"x is reinforcement learning\",\n        \"RequiresLabelledData(x)\": \"x requires labelled data\",\n        \"TrainedWithMLAlgorithm(x, y)\": \"y is trained with machine learning algorithm x\"\n    },\n    \"Premises\": [\n        \"(∃x (SupervisedLearning(x) ∧ ∃y (UnsupervisedLearning(y)) ∧ ∃z (ReinforcementLearning(z))))\", \n        \"¬(RequiresLabelledData(UnsupervisedLearning))\",\n        \"(∃x (TrainedWithMLAlgorithm(x, stateOfTheArtTextSummarizationModel)))\",\n        \"¬(ReinforcementLearning(stateOfTheArtTextSummarizationModel))\",\n        \"(RequiresLabelledData(stateOfTheArtTextSummarizationModel))\"\n    ],\n    \"Conclusion\": {\n        \"∃x (SupervisedLearning(x) ∧ TrainedWithMLAlgorithm(x, stateOfTheArtTextSummarizationModel))\": \n        \"Supervised learning is used to train the state-of-the-art text summarization model.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_139",
    "context": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Unsupervised learning is used to train the state-of-the-art text summarization model.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Supervised(x)\": \"x is supervised learning\",\n        \"Unsupervised(x)\": \"x is unsupervised learning\",\n        \"Reinforcement(x)\": \"x is reinforcement learning\",\n        \"LabelledData(x)\": \"x requires labelled data\"\n    },\n    \"Premises\": [\n        \"∀x (Supervised(x) ∨ Unsupervised(x) ∨ Reinforcement(x))\", \n        \"¬∃x (Unsupervised(x) ∧ LabelledData(x))\", \n        \"StateOfTheArt(model, textSummarization)\", \n        \"TrainedWith(model, machineLearningAlgorithm)\",\n        \"¬Reinforcement(stateOfTheArtModel)\"\n    ],\n    \"Conclusion\": {\n        \"¬∃x (Unsupervised(x) ∧ TrainedWith(model, x))\": \"Unsupervised learning is used to train the state-of-the-art text summarization model\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_140",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is loved by children.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Funny(x)\": \"x is funny\",\n        \"Popular(x)\": \"x is popular\",\n        \"Ugly(x)\": \"x is ugly\",\n        \"LovedByChildren(x)\": \"x is loved by children\",\n        \"FromTheSimpsons(x)\": \"x is from The Simpsons\",\n        \"Yellow(x)\": \"x is yellow\"\n    },\n    \"Premises\": [\n        \"∀x (Funny(x) → Popular(x))\",  # If a cartoon character is funny, then it is popular.\n        \"∀x (Ugly(x) → ¬Popular(x))\",  # If a cartoon character is ugly, then it is not popular.\n        \"∀x (LovedByChildren(x) → Funny(x))\",  # If a cartoon character is loved by children, then it is funny.\n        \"∀x (FromTheSimpsons(x) → LovedByChildren(x))\",  # If a cartoon character is from The Simpsons, then it is loved by children.\n        \"∀x (Yellow(x) → FromTheSimpsons(x))\",  # If a cartoon character is yellow, then it is from The Simpsons.\n        \"(FromTheSimpsons(ben) ∨ Funny(ben))\"  # Ben is either from The Simpsons or funny.\n    ],\n    \"Conclusion\": {\n        \"LovedByChildren(ben)\": \"Is Ben loved by children?\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_141",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is ugly or yellow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Funny(x)\": \"x is funny\",\n        \"Popular(x)\": \"x is popular\",\n        \"Ugly(x)\": \"x is ugly\",\n        \"LovedByChildren(x)\": \"x is loved by children\",\n        \"FromTheSimpsons(x)\": \"x is from The Simpsons\",\n        \"Yellow(x)\": \"x is yellow\"\n    },\n    \"Premises\": [\n        \"∀x (Funny(x) → Popular(x))\", \n        \"∀x (Ugly(x) → ¬Popular(x))\", \n        \"∀x (LovedByChildren(x) → Funny(x))\", \n        \"∀x (FromTheSimpsons(x) → LovedByChildren(x))\", \n        \"∀x (Yellow(x) → FromTheSimpsons(x))\", \n        \"(FromTheSimpsons(ben) ∨ Funny(ben))\"\n    ],\n    \"Conclusion\": [\n        \"(Ugly(ben) ∨ Yellow(ben))\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_142",
    "context": "If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ben is either yellow and ugly or neither yellow nor ugly.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Funny(x)\": \"x is funny.\",\n        \"Popular(x)\": \"x is popular.\",\n        \"Ugly(x)\": \"x is ugly.\",\n        \"LovedByChildren(x)\": \"x is loved by children.\",\n        \"FromTheSimpsons(x)\": \"x is from The Simpsons.\",\n        \"Yellow(x)\": \"x is yellow.\"\n    },\n    \"Premises\": [\n        \"∀x (Funny(x) → Popular(x))\",  # If a cartoon character is funny, then it is popular.\n        \"∀x (Ugly(x) → ¬Popular(x))\",  # If a cartoon character is ugly, then it is not popular.\n        \"∀x (LovedByChildren(x) → Funny(x))\",  # If a cartoon character is loved by children, then it is funny.\n        \"∀x (FromTheSimpsons(x) → LovedByChildren(x))\",  # If a cartoon character is from The Simpsons, then it is loved by children.\n        \"∀x (Yellow(x) → FromTheSimpsons(x))\",  # If a cartoon character is yellow, then it is from The Simpsons.\n        \"(FromTheSimpsons(ben) ∨ Funny(ben))\"  # Ben is either from The Simpsons or funny.\n    ],\n    \"Conclusion\": {\n        \"((Yellow(ben) ∧ Ugly(ben)) ∨ ¬(Yellow(ben) ∨ Ugly(ben)))\" \n        # Ben is either yellow and ugly or neither yellow nor ugly.\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_143",
    "context": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Heck cattle are artificially selected.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{\"Predicates\": \"Animal(x) ::: x is an animal.\nBackBreed(x, y) ::: x is back-bred to resemble y.\nExtinct(x) ::: x is extinct.\nArtificiallySelected(x) ::: x is artificially selected.\", \n\"Premises\": \"∀x (HeckCattle(x) → Animal(x)) ::: Heck cattle are animals.\n∀x (Aurochs(x) → Animal(x)) ::: Aurochs are animals.\n∃x (BackBreed(heckCattle, aurochs) ∧ Animal(aurochs) ∧ Extinct(aurochs)) ::: Some animals to be bred-back resemble animals that are extinct.\", \n\"Conclusion\": \"∃x (HeckCattle(x) ∧ ArtificiallySelected(x)) ::: Some Heck cattle are artificially selected.\"}}"
    ]
  },
  {
    "id": "FOLIO_dev_144",
    "context": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Aurochs are extinct.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"BredBack(x)\": \"x is bred-back\",\n        \"Resemble(x, y)\": \"x resembles y\",\n        \"Extinct(x)\": \"x is extinct\",\n        \"Animal(x)\": \"x is an animal\"\n    },\n    \"Premises\": [\n        \"∀x (HeckCattle(x) → Animal(x))\",  // Heck cattle are animals\n        \"∀x (Aurochs(x) → Animal(x))\",  // Aurochs are animals\n        \"∃x ∃y (Animal(x) ∧ BredBack(x) ∧ Resemble(x, y) ∧ Extinct(y))\"  // Some animals to be bred-back resemble animals that are extinct\n    ],\n    \"Conclusion\": {\n        \"Extinct(Aurochs)\"  // Aurochs are extinct\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_145",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jerry is young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```json\n{\n    \"Predicates\": [\n        \"Student(x)\": \"x is a student.\",\n        \"Human(x)\": \"x is a human.\",\n        \"Study(x)\": \"x studies.\",\n        \"Teach(x)\": \"x teaches.\",\n        \"Young(x)\": \"x is young.\",\n        \"Manager(x)\": \"x is a manager.\"\n    ],\n    \"Premises\": [\n        \"∀x (Student(x) → Human(x))\": \"All students are humans.\",\n        \"∀x (Study(x) → Student(x))\": \"If someone studies, then they are a student.\",\n        \"∀x (Study(x) ⊕ Teach(x))\": \"A person either studies or teaches.\",\n        \"¬∃x (Young(x) ∧ Teach(x))\": \"No young person teaches.\",\n        \"¬(Teach(jerry) ∨ Manager(jerry))\": \"Jerry neither teaches nor is a manager.\",\n        \"(Young(rose) ∨ Student(rose))\": \"Rose is young or a student.\"\n    ],\n    \"Conclusion\": [\n        \"Young(jerry)\": \"Jerry is young.\"\n    ]\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_146",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jerry is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n\"Predicates\": {\n        \"Student(x)\": \"x is a student\",\n        \"Human(x)\": \"x is human\",\n        \"Studies(x)\": \"x studies\",\n        \"Teaches(x)\": \"x teaches\",\n        \"Young(x)\": \"x is young\",\n        \"Manager(x)\": \"x is a manager\"\n    },\n\"Premises\": [\n        \"∀x (Student(x) → Human(x))\",  # All students are humans.\n        \"∀x (Studies(x) → Student(x))\",  # If someone studies, then they are a student.\n        \"∀x (Studies(x) ⊕ Teaches(x))\",  # A person either studies or teaches.\n        \"¬∃x (Young(x) ∧ Teaches(x))\",  # No young person teaches.\n        \"¬Teaches(jerry) ∧ ¬Manager(jerry)\",  # Jerry neither teaches nor is a manager.\n        \"(Young(rose) ∨ Student(rose))\"  # Rose is young or a student.\n    ],\n\"Conclusion\": [\n        \"¬Young(jerry)\"  # Jerry is not young.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_147",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rose is a human or a manager.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Student(x)\": \"x is a student.\",\n    \"Human(x)\": \"x is a human.\",\n    \"Studies(x)\": \"x studies.\",\n    \"Teaches(x)\": \"x teaches.\",\n    \"Young(x)\": \"x is young.\",\n    \"Manager(x)\": \"x is a manager.\"\n  },\n  \"Premises\": [\n    \"∀x (Student(x) → Human(x))\", # All students are humans.\n    \"∀x (Studies(x) → Student(x))\", # If someone studies, then they are a student.\n    \"∀x (Studies(x) ⊕ Teaches(x))\", # A person either studies or teaches.\n    \"¬∃x (Young(x) ∧ Teaches(x))\", # No young person teaches.\n    \"¬(Teaches(jerry) ∨ Manager(jerry))\", # Jerry neither teaches nor is a manager.\n    \"(Young(rose) ∨ Student(rose))\" # Rose is young or a student.\n  ],\n  \"Conclusion\": {\n    \"(Human(rose) ∨ Manager(rose))\" # Is the statement true, false, or uncertain? Rose is a human or a manager.\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_148",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rose is a human or Jerry is a manager.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Student(x)\": \"x is a student.\",\n        \"Human(x)\": \"x is a human.\",\n        \"Study(x)\": \"x studies.\",\n        \"Teach(x)\": \"x teaches.\",\n        \"Young(x)\": \"x is young.\",\n        \"Manager(x)\": \"x is a manager.\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Student(x) \\u2192 Human(x))\", \n        \"\\u2200x (Study(x) \\u2192 Student(x))\", \n        \"\\u2200x (Teach(x) \\u2501 Study(x))\",\n        \"\\u2070x (\\u201cYoung(x) \\u2192 Teach(x)\\u201d)\",\n        \"\\u2070(Teach(jerry) \\u2501 Manager(jerry))\",\n        \"(Young(rose) \\u2501 Student(rose))\"\n    ],\n    \"Conclusion\": {\n        \"Human(rose) \\u2501 Manager(jerry)\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_149",
    "context": "All students are humans. If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? It is not true that Rose is a student and Jerry is a human.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Student(x)\": \"x is a student\",\n        \"Human(x)\": \"x is human\",\n        \"Studies(x)\": \"x studies\",\n        \"Teaches(x)\": \"x teaches\",\n        \"Young(x)\": \"x is young\",\n        \"Manager(x)\": \"x is a manager\"\n    },\n    \"Premises\": [\n        \"∀x (Student(x) → Human(x))\",  # All students are humans.\n        \"∀x (Studies(x) → Student(x))\",  # If someone studies, then they are a student.\n        \"∀x (Teaches(x) ⊕ Studies(x))\",  # A person either teaches or studies.\n        \"¬∃x (Young(x) ∧ Teaches(x))\",  # No young person teaches.\n        \"¬(Teaches(jerry) ∨ Manager(jerry))\"  # Jerry neither teaches nor is a manager.\n        \"(Young(rose) ∨ Student(rose))\"  # Rose is young or a student.\n    ],\n    \"Conclusion\": {\n        \"¬(Student(rose) ∧ Human(jerry))\": \"It is not true that Rose is a student and Jerry is human.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_150",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Neapolitan Chronicles is an English book.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Publish(x, y)\": \"x is the publisher of y\",\n    \"TranslateFrom(x, y)\": \"x was translated from y\",\n    \"BookInEnglish(x)\": \"x is a book in English\",\n    \"SpecializeIn(x, y)\": \"x specializes in translating y into English\"\n  },\n  \"Premises\": [\n    \"∀x (Publish(newVesselPress, x) → BookInEnglish(x))\", // All of New Vessel Press's published books are in English.\n    \"Publish(newVesselPress, neapolitanChronicles)\", // Neapolitan Chronicles is a book published by New Vessel Press.\n    \"TranslateFrom(neapolitanChronicles, italian)\" // Neapolitan Chronicles was translated from Italian.\n  ],\n  \"Conclusion\": {\n    \"BookInEnglish(neapolitanChronicles)\": \"Is Neapolitan Chronicles an English book?\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_151",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Harry Potter was published by New Vessel Press.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Based on the given instructions and examples, here is the solution in JSON format:\n\n\n```json\n{\n    \"Predicates\": {\n        \"PublishedBy(x, y)\": \"x is published by y\",\n        \"InLanguage(x, y)\": \"book x is in language y\",\n        \"TranslatedFrom(x, y)\": \"book x was translated from language y\"\n    },\n    \"Premises\": [\n        \"∀x (PublishedBy(x, NewVesselPress) → InLanguage(x, English))\", \n        \"PublishedBy(NeapolitanChronicles, NewVesselPress)\", \n        \"TranslatedFrom(NeapolitanChronicles, Italian)\", \n        \"PublishedBy(PalaceOfFlies, NewVesselPress)\"\n    ],\n    \"Conclusion\": [\n        \"¬PublishedBy(HarryPotter, NewVesselPress)\" \n    ]\n}\n```\n\nThis solution breaks down the problem into predicates that capture the main entities and properties being discussed. The premises are then formulated as logical statements based on these predicates, and the conclusion is derived from the question about Harry Potter's publication status with New Vessel Press."
    ]
  },
  {
    "id": "FOLIO_dev_152",
    "context": "New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Palace of Flies was translated from Italian.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"PublishedBy(x, y)\": \"x is a book published by publisher y\",\n        \"TranslatedFrom(x, y)\": \"book x was translated from language y\",\n        \"SpecializesIn(x, y)\": \"publisher x specializes in translating from language y\",\n        \"IsEnglish(z)\": \"z is the English language\"\n    },\n    \"Premises\": [\n        \"∀x (PublishedBy(x, newVesselPress) → IsEnglish(x))\",  // All of New Vessel Press's published books are in English.\n        \"PublishedBy(neapolitanChronicles, newVesselPress)\",  // Neapolitan Chronicles is a book published by New Vessel Press.\n        \"TranslatedFrom(neapolitanChronicles, italian)\",  // Neapolitan Chronicles was translated from Italian.\n        \"PublishedBy(palaceOfFlies, newVesselPress)\"  // Palace of Flies is a book published by New Vessel Press.\n    ],\n    \"Conclusion\": {\n        \"∃y (TranslatedFrom(palaceOfFlies, y) ∧ y = italian)\": \"Is it true that Palace of Flies was translated from Italian?\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_153",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Remy visits the office supply store regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"OwnLargeMonitor(x)\": \"x owns a large desktop monitor at their home\",\n    \"WorkRegularlyAtHome(x)\": \"x works regularly and often at home\",\n    \"HaveImpressiveOffice(x)\": \"x has a fully stocked and impressive home office\",\n    \"SpendTimeTidying(x)\": \"x spends their free time tidying and organizing the spaces in their homes\",\n    \"VisitSupplyStore(x)\": \"x visits the office supply store regularly\",\n    \"GoToBedLateAndWakeUpAfterNoon(x)\": \"x goes to bed late and wakes up every day after noon\"\n  },\n  \"Premises\": [\n    \"∀x (OwnLargeMonitor(x) → WorkRegularlyAtHome(x))\", \n    \"∀x (HaveImpressiveOffice(x) → OwnLargeMonitor(x))\",\n    \"∀x (WorkRegularlyAtHome(x) → SpendTimeTidying(x))\",\n    \"∀x (WorkRegularlyAtHome(x) → VisitSupplyStore(x))\",\n    \"∀x (SpendTimeTidying(x) → ¬GoToBedLateAndWakeUpAfterNoon(x))\"\n  ],\n  \"Conclusion\": {\n    \"VisitSupplyStore(remy)\": \"Remy visits the office supply store regularly\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_154",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n\"Predicates\": {\n\"HomeOffice(x)\": \"x has a fully stocked and impressive home office\",\n\"Monitor(x)\": \"x owns a large desktop monitor at their home\",\n\"WorkAtHome(x)\": \"x works regularly and often at home\",\n\"TidyAndOrganize(x)\": \"x spends their free time tidying and organizing the spaces in their home\",\n\"LateRiser(x)\": \"x goes to bed late and wakes up every day after noon\",\n\"VisitOfficeSupplyStore(x)\": \"x visits the office supply store regularly\"\n},\n\"Premises\": [\n\"(Monitor(x) → WorkAtHome(x))\", \n\"(HomeOffice(x) → Monitor(x))\", \n\"(WorkAtHome(x) → TidyAndOrganize(x))\", \n\"(WorkAtHome(x) → VisitOfficeSupplyStore(x))\", \n\"((TidyAndOrganize(x) → ¬LateRiser(x))\",\n\"(LateRiser(remy) ∧ TidyAndOrganize(remy)) ⊕ ¬(LateRiser(remy) ∨ TidyAndOrganize(remy)))\"\n],\n\"Conclusion\": {\n\"(HomeOffice(remy) ∧ VisitOfficeSupplyStore(remy))\"\n}\n}"
    ]
  },
  {
    "id": "FOLIO_dev_155",
    "context": "If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"HomeMonitor(x)\": \"x owns a large desktop monitor at their home.\",\n        \"WorkRegularly(x)\": \"x works regularly and often at home.\",\n        \"ImpressiveOffice(x)\": \"x has a fully stocked and impressive home office.\",\n        \"TidySpace(x)\": \"x spends their free time tidying and organizing the spaces in their homes.\",\n        \"VisitOfficeSupplyStore(x)\": \"x visits the office supply store regularly.\",\n        \"BedLateAndWakeAfterNoon(x)\": \"x goes to bed late and wakes up every day after noon.\"\n    },\n    \"Premises\": [\n        \"\\u2200x (HomeMonitor(x) \\u2192 WorkRegularly(x))\",\n        \"\\u2200x (ImpressiveOffice(x) \\u2192 HomeMonitor(x))\",\n        \"\\u2200x (WorkRegularly(x) \\u2192 TidySpace(x))\",\n        \"\\u2200x (WorkRegularly(x) \\u2192 VisitOfficeSupplyStore(x))\",\n        \"(BedLateAndWakeAfterNoon(remy) \\u2227 TidySpace(remy)) \\u22c5 ¬(BedLateAndWakeAfterNoon(remy) \\u2228 TidySpace(remy))\"\n    ],\n    \"Conclusion\": [\n        \"(BedLateAndWakeAfterNoon(remy) \\u2228 VisitOfficeSupplyStore(remy)) \\u2192 ¬(TidySpace(remy) \\u2228 ImpressiveOffice(remy))\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_156",
    "context": "All humans are mortal. All Greeks are humans.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Greeks are mortal.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Human(x)\": \"x is a human\",\n        \"Greek(x)\": \"x is a Greek\",\n        \"Mortal(x)\": \"x is mortal\"\n    },\n    \"Premises\": [\n        \"∀x (Human(x) → Mortal(x))\",  // All humans are mortal\n        \"∀x (Greek(x) → Human(x))\"   // All Greeks are humans\n    ],\n    \"Conclusion\": {\n        \"∃x (Greek(x) ∧ Mortal(x))\": \"Some Greeks are mortal\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_157",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James has a part-time job offered by the university.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Student(x)\": \"x is a student\",\n        \"Library(x)\": \"x works in the library\",\n        \"CSDept(x)\": \"x is from the computer science department\",\n        \"PartTimeJob(x)\": \"x has a part-time job offered by the university\",\n        \"DatabaseCourse(x)\": \"x takes the database course\",\n        \"InstructedByDavid(x)\": \"x is instructed by professor David\",\n        \"Lab(x)\": \"x works in the lab\"\n    },\n    \"Premises\": [\n        \"∀x (Student(x) ∧ Library(x) → ¬CSDept(x))\", \n        \"∀x (PartTimeJob(x) → Library(x))\", \n        \"∀x (DatabaseCourse(x) → CSDept(x))\", \n        \"∀x (InstructedByDavid(x) → DatabaseCourse(x))\", \n        \"∀x (Lab(x) → InstructedByDavid(x))\", \n        \"Lab(james)\", \n        \"¬(PartTimeJob(jack) ∨ Lab(jack))\"\n    ],\n    \"Conclusion\": {\n        \"Query\": \"PartTimeJob(james)\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_158",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James does not have a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Student(x)\": \"x is a student\",\n        \"Library(x)\": \"x works in the library\",\n        \"CSdept(x)\": \"x is from the computer science department\",\n        \"PartTimeJob(x)\": \"x has a part-time job offered by the university\",\n        \"DatabaseCourse(x)\": \"x takes the database course\",\n        \"InstructedByDavid(x)\": \"x is instructed by professor David\",\n        \"LabWork(x)\": \"x works in the lab\"\n    },\n    \"Premises\": [\n        \"∀x (Student(x) ∧ Library(x) → ¬CSdept(x))\",  # No students who work in the library are from the computer science department\n        \"∀x (PartTimeJob(x) → Library(x))\",  # All students who have part-time jobs offered by the university are students who work in the library\n        \"∀x (DatabaseCourse(x) → CSdept(x))\",  # All students who take the database course are from the computer science department\n        \"∀x (InstructedByDavid(x) → DatabaseCourse(x))\",  # All students instructed by professor David are taking the database course\n        \"∀x (LabWork(x) → InstructedByDavid(x))\",  # All students working in the lab are instructed by professor David\n        \"LabWork(james)\"  # James is a student working in the lab\n    ],\n    \"Conclusion\": [\n        \"¬PartTimeJob(james)\"  # James does not have a part-time job offered by the university\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_159",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James either takes the database course or has a part-time job offered by the university.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": \n    {\n        \"Student(x)\": \"x is a student.\",\n        \"WorkInLibrary(x)\": \"x works in the library.\",\n        \"FromCS(x)\": \"x is from the computer science department.\",\n        \"HasPartTimeJob(x)\": \"x has a part-time job offered by the university.\",\n        \"TakeDatabaseCourse(x)\": \"x takes the database course.\",\n        \"InstructedByDavid(x)\": \"x is instructed by professor David.\",\n        \"WorkInLab(x)\": \"x works in the lab.\"\n    },\n    \n    \"Premises\": \n    {\n        \"∀x (Student(x) ∧ WorkInLibrary(x) → ¬FromCS(x))\": \"No students who work in the library are from the computer science department.\",\n        \"∀x (HasPartTimeJob(x) → WorkInLibrary(x))\": \"All students who have part-time jobs offered by the university are students who work in the library.\",\n        \"∀x (TakeDatabaseCourse(x) → FromCS(x))\": \"All students who take the database course are from the computer science department.\",\n        \"∀x (InstructedByDavid(x) → TakeDatabaseCourse(x))\": \"All students instructed by professor David are taking the database course.\",\n        \"∀x (WorkInLab(x) → InstructedByDavid(x))\": \"All students working in the lab are instructed by professor David.\",\n        \"WorkInLab(james)\": \"James is a student working in the lab.\",\n        \"¬(HasPartTimeJob(jack) ∨ WorkInLab(jack))\": \"Jack neither has a part-time job offered by the university nor works in the lab.\"\n    },\n    \n    \"Conclusion\": \n    {\n        \"(TakeDatabaseCourse(james) ⊕ HasPartTimeJob(james))\": \"James either takes the database course or has a part-time job offered by the university.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_160",
    "context": "No students who work in the library are from the computer science department. All students who have part-time jobs offered by the university are students who work in the library. All students who take the database course are from the computer science department. All students instructed by professor David are taking the database course. All students working in the lab are instructed by professor David. James is a student working in the lab. Jack neither has a part-time job offered by the university nor works in the lab.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Jack takes the database course.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{{\n     \"Predicates\": {\n         \"Student(x)\": \"x is a student\",\n         \"Library(x)\": \"x works in the library\",\n         \"CompSci(x)\": \"x is from the computer science department\",\n         \"PartTimeJob(x)\": \"x has a part-time job offered by the university\",\n         \"DatabaseCourse(x)\": \"x takes the database course\",\n         \"InstructedByDavid(x)\": \"x is instructed by professor David\",\n         \"Lab(x)\": \"x works in the lab\"\n     },\n     \"Premises\": [\n         \"∀x (Student(x) ∧ Library(x) → ¬CompSci(x))\", \n         \"∀x (PartTimeJob(x) → Library(x))\", \n         \"∀x (DatabaseCourse(x) → CompSci(x))\", \n         \"∀x (InstructedByDavid(x) → DatabaseCourse(x))\",\n         \"∀x (Lab(x) → InstructedByDavid(x))\", \n         \"Lab(james)\", \n         \"¬(PartTimeJob(jack) ∨ Lab(jack))\"\n     ],\n     \"Conclusion\": {\n         \"?DatabaseCourse(jack)\"\n     }\n}}"
    ]
  },
  {
    "id": "FOLIO_dev_161",
    "context": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If George likes music and has access to a program, he will compose.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Likes(x, y)\": \"x likes y\",\n    \"WantsToCompose(x)\": \"x wants to compose\",\n    \"HasAccessToProgram(x)\": \"x has access to a program\",\n    \"CanCompose(x)\": \"x can compose\",\n    \"WillCompose(x)\": \"x will compose\"\n  },\n  \"Premises\": [\n    \"∀x (Likes(x, music) → WantsToCompose(x))\": \"If George likes music, he wants to compose.\",\n    \"∀x (HasAccessToProgram(x) → CanCompose(x))\": \"If George has access to a program, he can compose.\",\n    \"∀x ((CanCompose(x) ∧ WantsToCompose(x)) → WillCompose(x))\": \"If George can compose and wants to compose, he will compose.\"\n  ],\n  \"Conclusion\": {\n    \"(Likes(george, music) ∧ HasAccessToProgram(george)) → WillCompose(george)\": \"If George likes music and has access to a program, he will compose.\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_162",
    "context": "If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If George will not compose, George can not compose.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Likes(x, y)\": \"x likes y\",\n    \"WantsToCompose(x)\": \"x wants to compose music\",\n    \"HasAccessToProgram(x)\": \"x has access to a program\",\n    \"CanCompose(x)\": \"x can compose music\",\n    \"WillCompose(x)\": \"x will compose music\"\n  },\n  \"Premises\": [\n    \"∀x (Likes(x, music) → WantsToCompose(x))\", // If George likes music, he wants to compose.\n    \"∀x (HasAccessToProgram(x) → CanCompose(x))\", // If George has access to a program, he can compose.\n    \"∀x ((CanCompose(x) ∧ WantsToCompose(x)) → WillCompose(x))\" // If George can compose and wants to compose, he will compose.\n  ],\n  \"Conclusion\": {\n    \"¬WillCompose(george) → ¬CanCompose(george)\" // If George will not compose, then George cannot compose.\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_163",
    "context": "A hawk never lands. Some birds are hawks.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All birds land",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Hawk(x)\": \"x is a hawk\",\n        \"Bird(x)\": \"x is a bird\",\n        \"Land(x)\": \"x lands\"\n    },\n    \"Premises\": [\n        \"\\u2200x (Hawk(x) \\u2192 ¬Land(x))\", # A hawk never lands\n        \"\\u2203x (Bird(x) \\u2227 Hawk(x))\"  # Some birds are hawks\n    ],\n    \"Conclusion\": {\n        \"\\u2200x (Bird(x) → Land(x))\" : \"All birds land\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_164",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Breaking Bad is on Monday at 8 pm.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"RoseGivenOutOnTV(x)\": \"x is given out on TV\",\n        \"IsOnTheBachelor(x)\": \"x is on the Bachelor\",\n        \"PortraysRealPeople(x)\": \"x portrays the lives of real people\",\n        \"IsRealityTVShow(x)\": \"x is a reality TV show\"\n    },\n    \"Premises\": [\n        \"∃t (RoseGivenOutOnTV(t) ∧ Time(t, mondayAt8pm))\", \n        \"∀x (RoseGivenOutOnTV(x) → IsOnTheBachelor(x))\", \n        \"∀x (IsOnTheBachelor(x) → PortraysRealPeople(x))\",\n        \"∀x (PortraysRealPeople(x) → IsRealityTVShow(x))\",\n        \"¬IsRealityTVShow(breakingBad)\"\n    ],\n    \"Conclusion\": {\n        \"¬(Time(breakingBad, mondayAt8pm))\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_165",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"RoseGivenOutOnTV(x)\": \"x is a rose given out on TV\",\n        \"IsOnTheBachelor(x)\": \"x is on the Bachelor\",\n        \"PortraysRealPeople(x)\": \"x portrays the lives of real people\",\n        \"IsRealityTVShow(x)\": \"x is a reality TV show\",\n        \"IsBreakingBad(x)\": \"x is Breaking Bad\"\n    ],\n    \"Premises\": [\n        \"∃x (RoseGivenOutOnTV(x) ∧ IsOnTheBachelor(x))\": \"Some roses given out on TV are on the Bachelor\",\n        \"∀x (RoseGivenOutOnTV(x) → IsOnTheBachelor(x))\": \"Every rose given out on TV is on the Bachelor\",\n        \"∀x (IsOnTheBachelor(x) → PortraysRealPeople(x))\": \"Everything on the Bachelor portrays the lives of real people\",\n        \"∀x (PortraysRealPeople(x) → IsRealityTVShow(x))\": \"All shows portraying the lives of real people are reality TV shows\",\n        \"¬IsRealityTVShow(BreakingBad)\": \"Breaking Bad is not a reality TV show\"\n    ],\n    \"Conclusion\": [\n        \"∃x (RoseGivenOutOnTV(x) ∧ IsBreakingBad(x) ∧ Monday(x) ∧ 8pm(x))\": \"Breaking Bad is a TV show in which roses are given out on Monday at 8 pm\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_166",
    "context": "On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"GivenOutOnTV(x)\": \"x is given out on TV\",\n        \"Rose(x)\": \"x is a rose\",\n        \"OnBachelor(x)\": \"x is on the Bachelor\",\n        \"PortraysRealPeople(x)\": \"x portrays the lives of real people\",\n        \"RealityTVShow(x)\": \"x is a reality TV show\",\n        \"IsMondayAt8pm(x)\": \"it is Monday at 8 pm during x\"\n    },\n    \"Premises\": [\n        \"∃t ∃d (Day(t) ∧ Time(d, 8pm) ∧ GivenOutOnTV(roses) ∧ DayOfWeek(t, monday))\": \"On some Mondays at 8 pm, roses are given out on TV\",\n        \"∀x ((GivenOutOnTV(x) ∧ Rose(x)) → OnBachelor(x))\": \"Every rose given out on TV is on the Bachelor\",\n        \"∀x (OnBachelor(x) → PortraysRealPeople(x))\": \"Everything on the Bachelor portrays the lives of real people\",\n        \"∀x (PortraysRealPeople(x) → RealityTVShow(x))\": \"All shows portraying the lives of real people are reality TV shows\",\n        \"¬RealityTVShow(BreakingBad)\": \"Breaking Bad is not a reality TV show\"\n    ],\n    \"Conclusion\": [\n        \"(GivenOutOnTV(roses) ∧ During(BreakingBad)) → IsMondayAt8pm(BreakingBad)\": \"If roses are given out during Breaking Bad, then it is on Monday at 8 pm\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_167",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Heinrich Schmidt was either German or Russian.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"German(x)\": \"x is German.\",\n        \"Russian(x)\": \"x is Russian.\"\n    },\n    \"Premises\": {\n        \"German(HeinrichScmidt)\": \"Heinrich Schmidt was a Nazi German politician.\"\n    },\n    \"Conclusion\": {\n        \"(German(HeinrichSchmidt) ⊕ Russian(HeinrichSchmidt))\": \"Heinrich Schmidt was either German or Russian.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_168",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"NaziGermanPolitician(x)\": \"x is a Nazi German politician\",\n        \"MemberOfPrussianStateParliament(x)\": \"x is a member of the Prussian State Parliament\",\n        \"MemberOfNaziReichstag(x)\": \"x is a member of the Nazi Reichstag\"\n    },\n    \"Premises\": [\n        \"NaziGermanPolitician(heinrichScmidt)\",\n        \"MemberOfPrussianStateParliament(heinrichScmidt)\",\n        \"MemberOfNaziReichstag(heinrichScmidt)\"\n    ],\n    \"Conclusion\": {\n        \"∃x (NaziGermanPolitician(x) ∧ MemberOfPrussianStateParliament(x) ∧ MemberOfNaziReichstag(x))\": \"Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_169",
    "context": "Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No politicans are part of the Nazi Reichstag.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Nazi(x)\": \"x is a Nazi\",\n        \"Politician(x)\": \"x is a politician\",\n        \"MemberOfPrussianStateParliament(x)\": \"x is a member of the Prussian State Parliament\",\n        \"MemberOfReichstag(x)\": \"x is a member of the Nazi Reichstag\"\n    },\n    \"Premises\": [\n        \"Nazi(heinrich) ∧ Politician(heinrich)\",\n        \"MemberOfPrussianStateParliament(heinrich)\",\n        \"MemberOfReichstag(heinrich)\"\n    ],\n    \"Conclusion\": {\n        \"¬∃x (Politician(x) ∧ MemberOfReichstag(x))\": \"No politicians are part of the Nazi Reichstag\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_170",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Colorectal cancer is a severe cancer",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"DeadlyDisease(x) ::: x is a deadly disease.\",\n        \"SurvivalRateLow(x) ::: The survival rate of x is low.\",\n        \"SevereCancer(x) ::: x is a severe cancer.\",\n        \"BileDuctCancer(x) ::: x is bile duct cancer.\",\n        \"Cholangiocarcinoma(x) ::: x is Cholangiocarcinoma.\",\n        \"MildFlu(x) ::: x has mild flu.\",\n        \"ColorectalCancer(x) ::: x is colorectal cancer.\"\n    ],\n    \"Premises\": [\n        \"∀x (DeadlyDisease(x) → SurvivalRateLow(x)) ::: If something is a deadly disease, then its survival rate is low.\",\n        \"∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.\",\n        \"BileDuctCancer(bileDuctCancer) ::: Bile duct cancer is a severe cancer.\",\n        \"∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\",\n        \"¬∃x (MildFlu(x) ∧ SurvivalRateLow(x)) ::: No one with mild flu has a low survival rate.\",\n        \"(ColorectalCancer(colorectalCancer) ∧ BileDuctCancer(colorectalCancer) ∧ SurvivalRateLow(colorectalCancer)) → ¬BileDuctCancer(colorectalCancer) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\"\n    ],\n    \"Conclusion\": [\n        \"SevereCancer(colorectalCancer) ::: Colorectal cancer is a severe cancer.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_171",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"DeadlyDisease(x) ::: x is a deadly disease.\",\n        \"SevereCancer(x) ::: x is a severe cancer.\",\n        \"BileDuctCancer(x) ::: x is a bile duct cancer.\",\n        \"Cholangiocarcinoma(x) ::: x is a Cholangiocarcinoma.\",\n        \"MildFlu(x) ::: x has a mild flu.\",\n        \"LowSurvivalRate(x) ::: x has a low survival rate.\",\n        \"Is(x, y) ::: x is y.\"\n    ],\n    \"Premises\": [\n        \"∀x (DeadlyDisease(x) → LowSurvivalRate(x)) ::: If something is a deadly disease, then its survival rate is low.\",\n        \"∀x (SevereCancer(x) → DeadlyDisease(x)) ::: All severe cancers are deadly diseases.\",\n        \"BileDuctCancer(colorectalCancer) ::: Bile duct cancer is a severe cancer.\",\n        \"∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\",\n        \"¬∃x (MildFlu(x) ∧ LowSurvivalRate(x)) ::: No one with mild flu has a low survival rate.\",\n        \"(BileDuctCancer(colorectalCancer) ∧ LowSurvivalRate(colorectalCancer)) → ¬BileDuctCancer(colorectalCancer) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\"\n    ],\n    \"Conclusion\": [\n        \"(BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) → (BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer)) ::: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_172",
    "context": "If something is a deadly disease, then its survival rate is low. All severe cancers are deadly diseases. Bile duct cancer is a severe cancer. All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"DeadlyDisease(x)\": \"x is a deadly disease.\",\n        \"SurvivalRateLow(x)\": \"the survival rate of x is low.\",\n        \"SevereCancer(x)\": \"x is a severe cancer.\",\n        \"BileDuctCancer(x)\": \"x is a bile duct cancer.\",\n        \"Cholangiocarcinoma(x)\": \"x is a Cholangiocarcinoma.\",\n        \"MildFlu(x)\": \"x has a mild flu.\",\n        \"ColorectalCancer(x)\": \"x is a colorectal cancer.\"\n    },\n    \"Premises\": [\n        \"\\u2200x (DeadlyDisease(x) \\u2192 SurvivalRateLow(x))\", # If something is a deadly disease, then its survival rate is low.\n        \"\\u2200x (SevereCancer(x) \\u2192 DeadlyDisease(x))\", # All severe cancers are deadly diseases.\n        \"BileDuctCancer(bileductcancer)\", # Bile duct cancer is a severe cancer.\n        \"\\u2200x (Cholangiocarcinoma(x) \\u2192 BileDuctCancer(x))\", # All Cholangiocarcinoma is bile duct cancer.\n        \"\\u2200x (MildFlu(x) \\u2192 ¬SurvivalRateLow(x))\", # No one with mild flu has a low survival rate.\n        \"(BileDuctCancer(colorectalcancer) ∧ SurvivalRateLow(colorectalcancer)) \\u2192 ¬BileDuctCancer(colorectalcancer)\" # If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n    ],\n    \"Conclusion\": \"(¬MildFlu(colorectalcancer) ∧ Cholangiocarcinoma(colorectalcancer)) \\u2192 (BileDuctCancer(colorectalcancer) ∨ Cholangiocarcinoma(colorectalcancer))\" # If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\n}"
    ]
  },
  {
    "id": "FOLIO_dev_173",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor eats salads regularly.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Based on the given instructions and analysis of the problem, I will define the Predicates, Premises, and Conclusion as follows:\n\n\n```json\n{\n    \"Predicates\": {\n        \"Conscious(x)\": \"x is very conscious about their health and eating habits\",\n        \"EatsSalads(x)\": \"x eats salads regularly\",\n        \"HealthChildhoodHome(x)\": \"x grew up in a health-conscious childhood home\",\n        \"FulfillsNutrition(x)\": \"x fulfills their nutritional daily intakes\",\n        \"GoodRelationshipWithParents(x)\": \"x has a good relationship with their parents\",\n        \"VisitsGym(x)\": \"x visits the gym at least once a day\"\n    },\n    \"Premises\": [\n        \"\\u2200x (EatsSalads(x) \\u2192 Conscious(x))\",  # All people who eat salads regularly are very conscious about their health and eating habits.\n        \"\\u2200x (HealthChildhoodHome(x) \\u2192 EatsSalads(x))\",  # All people who grew up in health-conscious childhood homes eat salads regularly.\n        \"\\u2200x (FulfillsNutrition(x) \\u2192 HealthChildhoodHome(x))\",  # All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n        \"(GoodRelationshipWithParents(taylor) \\u2192 FulfillsNutrition(taylor))\",  # If Taylor has a good relationship with her parents, then she fulfills her nutritional daily intakes.\n        \"(GoodRelationshipWithParents(taylor) \\u2192 \\u00AC EatsSalads(taylor))\",  # If Taylor has a good relationship with her parents, then she does not eat salads regularly.\n        \"\\u2200x (VisitsGym(x) \\u2192 FulfillsNutrition(x))\",  # If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n        \"(HealthChildhoodHome(taylor) \\u2227 GoodRelationshipWithParents(taylor)) \\u22C6 \\u00AC(HealthChildhoodHome(taylor) \\u2228 GoodRelationshipWithParents(taylor))\"  # It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n    ],\n    \"Conclusion\": \"EatsSalads(taylor)\"  # Taylor eats salads regularly\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_174",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor visits the gym at least once a day.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"HealthConscious(x)\": \"x is very conscious about their health and eating habits.\",\n        \"EatsSaladsRegularly(x)\": \"x eats salads regularly.\",\n        \"GrewUpInHealthConsciousHome(x)\": \"x grew up in a health-conscious childhood home.\",\n        \"FulfillsNutritionalIntakes(x)\": \"x fulfills their nutritional daily intakes.\",\n        \"GoodRelationshipWithParents(x)\": \"x has a good relationship with their parents.\",\n        \"VisitsGymDaily(x)\": \"x visits the gym at least once a day.\"\n    },\n    \"Premises\": [\n        \"\\u2200x (EatsSaladsRegularly(x) \\u2192 HealthConscious(x))\",  // All people who eat salads regularly are very conscious about their health and eating habits.\n        \"\\u2200x (GrewUpInHealthConsciousHome(x) \\u2192 EatsSaladsRegularly(x))\",  // All people who grew up in health-conscious childhood homes eat salads regularly.\n        \"\\u2200x (FulfillsNutritionalIntakes(x) \\u2192 GrewUpInHealthConsciousHome(x))\",  // All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n        \"\\u2200x (GoodRelationshipWithParents(x) \\u2192 FulfillsNutritionalIntakes(x))\",  // If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n        \"\\u2200x (GoodRelationshipWithParents(x) \\u2192 \\u00ACEatsSaladsRegularly(x))\",  // If people have good relationships with their parents, then they do not eat salads regularly.\n        \"\\u2200x (VisitsGymDaily(x) \\u2192 FulfillsNutritionalIntakes(x))\"  // If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    ],\n    \"Conclusion\": {\n        \"(GrewUpInHealthConsciousHome(taylor) \\u2227 GoodRelationshipWithParents(taylor)) \\u22C6 (\\u00ACGrewUpInHealthConsciousHome(taylor) \\u2227 \\u00ACGoodRelationshipWithParents(taylor)) \\u2192 VisitsGymDaily(taylor)\"  // It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents. Hence we need to determine if Taylor visits the gym at least once a day.\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_175",
    "context": "All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"HealthConscious(x)\": \"x is conscious about their health and eating habits.\",\n        \"EatSalads(x)\": \"x eats salads regularly.\",\n        \"GrewUpInHealthConsciousHome(x)\": \"x grew up in a health-conscious childhood home.\",\n        \"FulfillNutritionalIntakes(x)\": \"x fulfills their nutritional daily intakes.\",\n        \"GoodRelationshipWithParents(x)\": \"x has a good relationship with their parents.\",\n        \"VisitGymDaily(x)\": \"x visits the gym at least once a day.\"\n    },\n    \"Premises\": [\n        \"∀x (EatSalads(x) → HealthConscious(x))\",  # All people who eat salads regularly are very conscious about their health and eating habits.\n        \"∀x (GrewUpInHealthConsciousHome(x) → EatSalads(x))\",  # All people who grew up in health-conscious childhood homes eat salads regularly.\n        \"∀x (FulfillNutritionalIntakes(x) → GrewUpInHealthConsciousHome(x))\",  # All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n        \"∀x (GoodRelationshipWithParents(x) → FulfillNutritionalIntakes(x))\",  # If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n        \"∀x (GoodRelationshipWithParents(x) → ¬EatSalads(x))\",  # If people have good relationships with their parents, then they do not eat salads regularly.\n        \"∀x (VisitGymDaily(x) → FulfillNutritionalIntakes(x))\"  # If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    ],\n    \"Conclusion\": [\n        \"(GrewUpInHealthConsciousHome(taylor) ∧ GoodRelationshipWithParents(taylor)) ⊕ ¬(GrewUpInHealthConsciousHome(taylor) ∨ GoodRelationshipWithParents(taylor)))\",  # It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\n        \"¬(GrewUpInHealthConsciousHome(taylor) ∨ VisitGymDaily(taylor))\"  # Based on the above information, is the following statement true, false, or uncertain? Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_176",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The world championships is a sporting event.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"SportingEvent(x)\": \"x is a sporting event\",\n    \"OlympicGames(x)\": \"x is the Olympic games\",\n    \"LastOlympicGamesIn(x, y)\": \"the last Olympic games was in x at year y\",\n    \"WonMostMedals(x, y)\": \"x won the most medals in y\"\n  },\n  \"Premises\": [\n    \"SportingEvent(OlympicGames)\", \n    \"LastOlympicGamesIn(Tokyo, tokyoYear)\",\n    \"WonMostMedals(UnitedStates, Tokyo)\"\n  ],\n  \"Conclusion\": {\n    \"Query\": \"Is the world championships a sporting event?\",\n    \"Logical Formula\": \"¬SportingEvent(worldChampionships)\" \n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_177",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The last Olympic games were not in Tokyo.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Event(x)\": \"x is a sporting event.\",\n        \"LastOlympic(x)\": \"The last Olympic games was in x.\",\n        \"WonMostMedalsIn(x, y)\": \"y won the most medals in x.\"\n    },\n    \"Premises\": [\n        \"Event(olympicGames)\",\n        \"LastOlympic(tokyo)\",\n        \"WonMostMedalsIn(tokyo, unitedStates)\"\n    ],\n    \"Conclusion\": {\n        \"¬LastOlympic(tokyo)\": \"The last Olympic games were not in Tokyo.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_178",
    "context": "[BG] The Olympic games is a sporting event. The last Olympic games was in Tokyo. The United States won the most medals in Tokyo.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The United States won the most medals in the last Olympic games.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"OlympicGames(x)\": \"x is an Olympic games\",\n    \"SportingEvent(x)\": \"x is a sporting event\",\n    \"LastOlympicGames(x)\": \"x was the last Olympic games\",\n    \"WonMostMedalsIn(x, y)\": \"y won the most medals in x\"\n  },\n  \"Premises\": [\n    \"∀x (OlympicGames(x) → SportingEvent(x))\", \n    \"LastOlympicGames(tokyo)\", \n    \"WonMostMedalsIn(tokyo, unitedstates)\"\n  ],\n  \"Conclusion\": {\n    \"WonMostMedalsIn(LastOlympicGames(y), unitedstates)\": \"The United States won the most medals in the last Olympic games\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_179",
    "context": "All horses have hooves. No humans have hooves.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some humans are horses.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Horse(x)\": \"x is a horse.\",\n        \"Human(x)\": \"x is a human.\",\n        \"Hooves(x)\": \"x has hooves.\"\n    },\n    \"Premises\": [\n        \"∀x (Horse(x) → Hooves(x))\",  # All horses have hooves.\n        \"¬∃x (Human(x) ∧ Hooves(x))\"   # No humans have hooves.\n    ],\n    \"Conclusion\": {\n        \"∃x (Human(x) ∧ Horse(x))\": \"Some humans are horses.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_180",
    "context": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Susan flies from LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Flies(x, y)\": \"x flies to airport y\",\n    \"Departure(x, y)\": \"the departure of x is y\",\n    \"Arrival(x, y)\": \"the arrival of x is y\"\n  },\n  \"Premises\": [\n    \"(∃y Departure(susan, y) ∧ Arrival(susan, lga)) ∨ (Departure(susan, lga) ∧ ∃y Arrival(susan, y))\", \n    \"¬(Departure(x, y) ∧ Arrival(x, y))\",\n    \"(∃x Departure(john, x) ∧ Arrival(john, lga))\"\n  ],\n  \"Conclusion\": {\n    \"(Departure(susan, lga) ∧ ∃y Arrival(susan, y))\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_181",
    "context": "Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? John flies to LGA airport.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"FliesTo(x, y)\": \"x flies to airport y\",\n        \"FliesFrom(x, y)\": \"x flies from airport y\"\n    },\n    \"Premises\": [\n        \"∀x ∀y (FliesTo(x, y) → ¬(Departure(x) = Arrival(y))) ::: The departure and arrival can not be the same airport.\",\n        \"FliesTo(susan, LGA) ::: Susan flies to LGA airport.\",\n        \"FliesFrom(john, LGA) ::: John flies from LGA airport.\"\n    ],\n    \"Conclusion\": [\n        \"¬(FliesTo(john, LGA)) ::: The statement that John flies to LGA airport is false.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_182",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is a grumpy person.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Nice(x, y)\": \"x is nice to y\",\n        \"Mean(x, y)\": \"x is mean to y\",\n        \"Love(x, y)\": \"x loves y\",\n        \"Grumpy(x)\": \"x is a grumpy person\",\n        \"OwnsPet(x)\": \"x owns a pet\"\n    },\n    \"Premises\": {\n        \"∀x ∀y (Nice(x, animals) → ¬Mean(x, animals))\": \"No one nice to animals is mean to animals.\",\n        \"∃x (Grumpy(x) ∧ Mean(x, animals))\": \"Some grumpy people are mean to animals.\",\n        \"∀x ∀y (Love(x, animals) → Nice(x, animals))\": \"All animal lovers are nice to animals.\",\n        \"∀x (OwnsPet(x) → Love(x, animals))\": \"If someone owns a pet, then they love animals.\",\n        \"OwnsPet(tom)\": \"Tom is a pet owner.\"\n    },\n    \"Conclusion\": {\n        \"Grumpy(tom)\": \"Tom is a grumpy person.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_183",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is not a grumpy person and mean to animals.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Nice(x, y)\": \"x is nice to y\",\n        \"Mean(x, y)\": \"x is mean to y\",\n        \"Grumpy(x)\": \"x is a grumpy person\",\n        \"AnimalLover(x)\": \"x loves animals\",\n        \"OwnsPet(x)\": \"x owns a pet\"\n    },\n    \"Premises\": [\n        \"∀x ∀y (Nice(x, y) → ¬Mean(x, y))\",  # No one nice to animals is mean to animals.\n        \"∃x (Grumpy(x) ∧ Mean(x, animals))\",  # Some grumpy people are mean to animals.\n        \"∀x (AnimalLover(x) → Nice(x, animals))\",  # All animal lovers are nice to animals.\n        \"∀x (OwnsPet(x) → AnimalLover(x))\"  # If someone owns a pet, then they love animals.\n    ],\n    \"Conclusion\": [\n        \"(¬Grumpy(Tom) ∧ ¬Mean(Tom, animals))\"  # Tom is not a grumpy person and mean to animals.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_184",
    "context": "No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"NiceToAnimals(x)\": \"x is nice to animals\",\n        \"MeanToAnimals(x)\": \"x is mean to animals\",\n        \"AnimalLover(x)\": \"x is an animal lover\",\n        \"OwnsPet(x)\": \"x owns a pet\",\n        \"Grumpy(x)\": \"x is grumpy\"\n    },\n    \"Premises\": [\n        \"∀x (NiceToAnimals(x) → ¬MeanToAnimals(x))\",  # No one nice to animals is mean to animals.\n        \"∃x (Grumpy(x) ∧ MeanToAnimals(x))\",  # Some grumpy people are mean to animals.\n        \"∀x (AnimalLover(x) → NiceToAnimals(x))\",  # All animal lovers are nice to animals.\n        \"∀x (OwnsPet(x) → AnimalLover(x))\",  # If someone owns a pet, then they love animals.\n        \"OwnsPet(tom)\"  # Tom is a pet owner.\n    ],\n    \"Conclusion\": {\n        \"(¬Grumpy(tom) ∧ ¬MeanToAnimals(tom)) → (¬Grumpy(tom) ∨ ¬AnimalLover(tom))\"  \n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_185",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dani Shapiro is a novel writer.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Novel(x)\": \"x is a novel\",\n        \"Podcast(x)\": \"x is a podcast\",\n        \"BornInAmericanCity(x, y)\": \"person x was born in city y\",\n        \"IsAmerican(x)\": \"x is an American person\",\n        \"WrittenBy(x, y)\": \"book/podcast x is written/created by person y\",\n        \"NovelWriter(x)\": \"x is a novel writer\"\n    },\n    \"Premises\": [\n        \"¬∃x (Novel(x) ∧ Podcast(x))\", \n        \"∀x ∀y (BornInAmericanCity(x, y) → IsAmerican(x))\",\n        \"∀x ∀y (Novel(y) ∧ WrittenBy(y, x) → NovelWriter(x))\",\n        \"IsAmerican(daniShapiro)\",\n        \"WrittenBy(familyHistory, daniShapiro)\",\n        \"Novel(familyHistory)\",\n        \"YearOfPublication(familyHistory, 2003)\",\n        \"Created(familySecrets, daniShapiro)\",\n        \"Podcast(familySecrets)\",\n        \"IsAmericanCity(boston)\"\n    ],\n    \"Conclusion\": {\n        \"NovelWriter(daniShapiro)\": \"Dani Shapiro is a novel writer\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_186",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Family Secrets is a novel.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```json\n{\n    \"Predicates\": {\n        \"Podcast(x)\": \"x is a podcast.\",\n        \"Novel(x)\": \"x is a novel.\",\n        \"AmericanCity(x)\": \"x is an American city.\",\n        \"PersonBornIn(x, y)\": \"person x is born in city y.\",\n        \"IsAmerican(x)\": \"x is American.\",\n        \"BookWrittenBy(x, y)\": \"book x is written by person y.\",\n        \"NovelWriter(x)\": \"x is a novel writer.\",\n        \"CreatedPodcast(x, y)\": \"person x created podcast y.\"\n    },\n    \"Premises\": [\n        \"¬∃x (Podcast(x) ∧ Novel(x))\", \n        \"∀x ∀y (PersonBornIn(x, y) ∧ AmericanCity(y) → IsAmerican(x))\",\n        \"∀x ∀y (Novel(x) ∧ BookWrittenBy(x, y) → NovelWriter(y))\",\n        \"IsAmerican(daniShapiro) ∧ NovelWriter(daniShapiro)\",\n        \"BookWrittenBy(familyHistory, daniShapiro) ∧ Novel(familyHistory) ∧ YearOfPublication(familyHistory, year2003)\",\n        \"CreatedPodcast(daniShapiro, familySecrets)\",\n        \"AmericanCity(boston)\"\n    ],\n    \"Conclusion\": {\n        \"Novel(familySecrets)\": \"Family Secrets is a novel.\"\n    }\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_187",
    "context": "A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Dani Shapiro was born in Boston.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"AmericanCity(x)\": \"x is an American city\",\n        \"BornIn(x, y)\": \"x was born in y\",\n        \"IsAmerican(x)\": \"x is American\",\n        \"NovelWriter(x)\": \"x is a novel writer\",\n        \"WrittenBy(x, y)\": \"x is written by y\",\n        \"IsNovel(x)\": \"x is a novel\",\n        \"CreatedPodcast(x, y)\": \"x created podcast y\"\n    },\n    \"Premises\": {\n        \"¬∃x (Podcast(x) ∧ IsNovel(x))\": \"A podcast is not a novel.\",\n        \"∀x ∀y (BornIn(x, y) → IsAmerican(x))\": \"If a person is born in American City, the person is American.\",\n        \"∀x ∀y (IsNovel(y) ∧ WrittenBy(y, x) → NovelWriter(x))\": \"If a book is novel and it is written by a person, then the person is a novel writer.\",\n        \"AmericanWriter(daniShapiro)\": \"Dani Shapiro is an American writer.\",\n        \"WrittenBy(familyHistory, daniShapiro)\": \"Family History is written by Dani Shapiro.\",\n        \"IsNovel(familyHistory)\": \"Family History is a novel written in 2003.\",\n        \"CreatedPodcast(daniShapiro, familySecrets)\": \"Dani Shapiro created a podcast called Family Secrets.\",\n        \"AmericanCity(boston)\": \"Boston is an American city.\"\n    },\n    \"Conclusion\": {\n        \"∃x (BornIn(daniShapiro, boston))\": \"Dani Shapiro was born in Boston.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_188",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is an American.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"BasketballPlayer(x)\": \"x is a basketball player.\",\n    \"American(x)\": \"x is an American.\",\n    \"Tall(x)\": \"x is tall.\",\n    \"WearLargeShoes(x)\": \"x wears large shoes.\",\n    \"WearLargeSizedClothes(x)\": \"x wears large-sized clothes.\"\n  },\n  \"Premises\": [\n    \"∃x (BasketballPlayer(x) ∧ ¬American(x))\", \n    \"∀x (BasketballPlayer(x) → Tall(x))\",\n    \"∀x (Tall(x) → WearLargeShoes(x))\",\n    \"∀x (WearLargeShoes(x) → WearLargeSizedClothes(x))\",\n    \"¬WearLargeSizedClothes(yuri)\"\n  ],\n  \"Conclusion\": {\n    \"American(yuri)\": \"Yuri is an American.\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_189",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is not an American basketball player.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"BasketballPlayer(x)\": \"x is a basketball player\",\n        \"American(x)\": \"x is an American\",\n        \"Tall(x)\": \"x is tall\",\n        \"LargeShoes(x)\": \"x wears large shoes\",\n        \"LargeClothes(x)\": \"x wears large-sized clothes\"\n    },\n    \"Premises\": [\n        \"∃x (BasketballPlayer(x) ∧ ¬American(x))\", \n        \"∀x (BasketballPlayer(x) → Tall(x))\", \n        \"∀x (Tall(x) → LargeShoes(x))\", \n        \"∀x (LargeShoes(x) → LargeClothes(x))\", \n        \"¬LargeClothes(yuri)\"\n    ],\n    \"Conclusion\": {\n        \"¬(BasketballPlayer(yuri) ∧ American(yuri))\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_190",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Yuri is an American basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"BasketballPlayer(x)\": \"x is a basketball player.\",\n        \"American(x)\": \"x is an American.\",\n        \"Tall(x)\": \"x is tall.\",\n        \"WearLargeShoes(x)\": \"x wears large shoes.\",\n        \"WearLargeClothes(x)\": \"x wears large-sized clothes.\"\n    },\n    \"Premises\": [\n        \"∃x (BasketballPlayer(x) ∧ ¬American(x))\",  // Some basketball players are not American.\n        \"∀x (BasketballPlayer(x) → Tall(x))\",  // All basketball players are tall.\n        \"∀x (Tall(x) → WearLargeShoes(x))\",  // If someone is tall, they wear large shoes.\n        \"∀x (WearLargeShoes(x) → WearLargeClothes(x))\",  // If someone wears large shoes, they wear large-sized clothes.\n        \"¬WearLargeClothes(yuri)\"  // Yuri does not wear large-size clothes.\n    ],\n    \"Conclusion\": {\n        \"American(yuri) ∧ BasketballPlayer(yuri)\": \"Yuri is an American basketball player.\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_191",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Yuri does not wear large shoes, then Yuri is an American basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"BasketballPlayer(x)\": \"x is a basketball player.\",\n        \"American(x)\": \"x is American.\",\n        \"Tall(x)\": \"x is tall.\",\n        \"LargeShoes(x)\": \"x wears large shoes.\",\n        \"LargeClothes(x)\": \"x wears large-sized clothes.\"\n    },\n    \"Premises\": [\n        \"∃x (BasketballPlayer(x) ∧ ¬American(x))\": \"Some basketball players are not American.\",\n        \"∀x (BasketballPlayer(x) → Tall(x))\": \"All basketball players are tall.\",\n        \"∀x (Tall(x) → LargeShoes(x))\": \"If someone is tall, they wear large shoes.\",\n        \"∀x (LargeShoes(x) → LargeClothes(x))\": \"If someone wears large shoes, they wear large-sized clothes.\",\n        \"¬LargeClothes(yuri)\": \"Yuri does not wear large-size clothes.\"\n    ],\n    \"Conclusion\": [\n        \"(¬LargeShoes(yuri) → (BasketballPlayer(yuri) ∧ American(yuri)))\": \"If Yuri does not wear large shoes, then Yuri is an American basketball player.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_192",
    "context": "Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Yuri is not an American basketball player, then Yuri is a basketball player.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"BasketballPlayer(x)\": \"x is a basketball player.\",\n        \"American(x)\": \"x is an American.\",\n        \"Tall(x)\": \"x is tall.\",\n        \"WearLargeShoes(x)\": \"x wears large shoes.\",\n        \"WearLargeClothes(x)\": \"x wears large-size clothes.\"\n    },\n    \"Premises\": [\n        \"∃x (BasketballPlayer(x) ∧ ¬American(x))\", # Some basketball players are not American.\n        \"∀x (BasketballPlayer(x) → Tall(x))\", # All basketball players are tall.\n        \"∀x (Tall(x) → WearLargeShoes(x))\", # If someone is tall, they wear large shoes.\n        \"∀x (WearLargeShoes(x) → WearLargeClothes(x))\", # If someone wears large shoes, they wear large-sized clothes.\n        \"¬WearLargeClothes(yuri)\" # Yuri does not wear large-size clothes.\n    ],\n    \"Conclusion\": [\n        \"(¬American(yuri) ∧ BasketballPlayer(yuri)) → BasketballPlayer(yuri)\" # If Yuri is not an American basketball player, then Yuri is a basketball player.\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_193",
    "context": "Events are either happy or sad. At least one event is happy.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All events are sad.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Happy(x)\": \"x is a happy event\",\n        \"Sad(x)\": \"x is a sad event\"\n    },\n    \"Premises\": [\n        \"∀x (Happy(x) ⊕ Sad(x))\",  # Events are either happy or sad\n        \"∃x (Happy(x))\"  # At least one event is happy\n    ],\n    \"Conclusion\": {\n        \"¬∀x (Sad(x))\": \"Not all events are sad\"\n    }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_194",
    "context": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Steinhauer was not the winner of the 1992 du Maurier Classic.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"Winner(x, y)\": \"x is the winner of tournament y\",\n        \"Participant(x, y)\": \"x participated in tournament y\",\n        \"Tied(x, y)\": \"x and y are tied\",\n        \"From(x, y)\": \"x is from country y\"\n    ],\n    \"Premises\": [\n        \"Winner(steinhauer, duMaurierClassic1992)\",\n        \"Participant(steinhauer, duMaurierClassic1992)\",\n        \"∃y ∃z (Tied(leaderboard1992, y) ∧ From(y, belgium))\",\n        \"From(descampe, belgium) ∧ OnTheLeaderboard(descampe, leaderboard1992)\",\n        \"∀x (OnTheLeaderboard(x, leaderboard1992) → Participant(x, duMaurierClassic1992))\"\n    ],\n    \"Conclusion\": [\n        \"¬Winner(steinhauer, duMaurierClassic1992)\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_195",
    "context": "The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"Winner(x, y)\": \"x is the winner of event y\",\n        \"Participated(x, y)\": \"x participated in event y\",\n        \"SixWayTie(y)\": \"y had a six-way tie on the leaderboard\",\n        \"FromBelgium(x)\": \"x is from Belgium\",\n        \"OnLeaderboard(x, y)\": \"x is on the leaderboard of event y\"\n    },\n    \"Premises\": [\n        \"Winner(steinhauer, duMaurierClassic1992) ∧ Participated(steinhauer, duMaurierClassic1992)\",\n        \"SixWayTie(duMaurierClassic1992) ∧ ∃x (FromBelgium(x) ∧ OnLeaderboard(x, duMaurierClassic1992))\",\n        \"FromBelgium(descampe) ∧ OnLeaderboard(descampe, duMaurierClassic1992)\",\n        \"∀x (OnLeaderboard(x, duMaurierClassic1992) → Participated(x, duMaurierClassic1992))\"\n    ],\n    \"Conclusion\": [\n        \"SixWayTie(duMaurierClassic1992) ∧ OnLeaderboard(descampe, duMaurierClassic1992)\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_196",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi is terricolous.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{{\"Predicates\":\n\"Barks(x) ::: x barks\",\n\"Likes(y, x) ::: y likes x\",\n\"Dogs(x) ::: x is a dog\",\n\"Animal(x) ::: x is an animal\",\n\"Jumps(x) ::: x jumps\",\n\"HasLegs(x) ::: x has legs\",\n\"Terricolous(x) ::: x is terricolous\"},\n\n\"Premises\": [\n\"∀x (Barks(x) → ¬Likes(jane, x)) ::: If an animal barks, then Jane does not like it.\",\n\"∀x (Dogs(x) → Animal(x) ∧ Barks(x)) ::: All dogs are animals that bark.\",\n\"∀x (Jumps(x) → Likes(jane, x)) ::: If an animal jumps, then Jane likes it.\",\n\"∀x (HasLegs(x) → Jumps(x)) ::: If an animal has legs, then it jumps.\",\n\"∀x (Terricolous(x) → HasLegs(x)) ::: If an animal is terricolous, then it has legs.\",\n\"(¬Jumps(kiki) ∧ ¬HasLegs(kiki)) → Terricolous(kiki) ∨ HasLegs(kiki) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\"\n],\n\n\"Conclusion\": \n\"Terricolous(kiki) ::: KiKi is terricolous\"}}"
    ]
  },
  {
    "id": "FOLIO_dev_197",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi barks and is a dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```json\n{\n  \"Predicates\": {\n    \"Animal(x)\": \"x is an animal\",\n    \"Bark(x)\": \"x barks\",\n    \"Dog(x)\": \"x is a dog\",\n    \"Jump(x)\": \"x jumps\",\n    \"Like(x, y)\": \"x likes y\",\n    \"Legs(x)\": \"x has legs\",\n    \"Terricolous(x)\": \"x is terricolous\"\n  },\n  \"Premises\": [\n    \"\\u2200x (Bark(x) \\u2192 ¬Like(jane, x))\", \n    \"\\u2200x (Dog(x) \\u2192 Animal(x) \\u2227 Bark(x))\", \n    \"\\u2200x (Jump(x) \\u2192 Like(jane, x))\", \n    \"\\u2200x (Legs(x) \\u2192 Jump(x))\", \n    \"\\u2200x (Terricolous(x) \\u2192 Legs(x))\", \n    \"(¬Jump(kiki) \\u2228 ¬Legs(kiki)) \\u2192 (Terricolous(kiki) \\u2228 Legs(kiki))\"\n  ],\n  \"Conclusion\": {\n    \"Bark(kiki) \\u2227 Dog(kiki)\"\n  }\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_198",
    "context": "If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs. If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? KiKi neither barks nor is a dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n\"Predicates\": {\n\"Bark(x)\": \"x barks\",\n\"Like(x, y)\": \"x likes y\",\n\"Dogs(x)\": \"x is a dog\",\n\"Animals(x)\": \"x is an animal\",\n\"Jump(x)\": \"x jumps\",\n\"Legs(x)\": \"x has legs\",\n\"Terricolous(x)\": \"x is terricolous\"\n},\n\"Premises\": [\n\"(∀x (Bark(x) → ¬Like(jane, x)))\", // If an animal barks, then Jane does not like it\n\"(∀x (Dogs(x) → Animals(x) ∧ Bark(x)))\", // All dogs are animals that bark\n\"(∀x (Jump(x) → Like(jane, x)))\", // If an animal jumps, then Jane likes it\n\"(∀x (Legs(x) → Jump(x)))\", // If an animal has legs, then it jumps\n\"(∀x (Terricolous(x) → Legs(x)))\", // If an animal is terricolous, then it has legs\n\"((¬Jump(kiki) ∧ ¬Legs(kiki)) → (Terricolous(kiki) ∨ Legs(kiki)))\" // If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs\n],\n\"Conclusion\": {\n\"(∀x ((Bark(x) ⊕ Dogs(x))))\", // KiKi neither barks nor is a dog.\n}\n}"
    ]
  },
  {
    "id": "FOLIO_dev_199",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No one playing for Nautico is Brazilian.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "Based on the provided instructions and examples, I will analyze the problem and question, then answer with the predicates, premises, and conclusion in JSON format.\n\n### Predicates\n\n* Brazilian(x) ::: x is a Brazilian.\n* FootballPlayer(x) ::: x is a football player.\n* LoanedOutTo(x, y) ::: x was loaned out to y.\n* PlaysFor(x, y) ::: x plays for y.\n* IsAFC(x) ::: x is a football club.\n\n### Premises\n\n* Brazilian(AiltonSilva) ∧ FootballPlayer(AiltonSilva) ::: Ailton Silva is a Brazillian footballer.\n* LoanedOutTo(Ailton, Braga) ::: Ailton was loaned out to Braga.\n* PlaysFor(AiltonSilva, Nautico) ::: Ailton Silva plays for Nautico.\n* IsAFC(Nautico) ∧ IsAFC(Braga) ::: Nautico and Braga are football clubs.\n\n### Conclusion\n\n¬∃x (PlaysFor(x, Nautico) ∧ Brazilian(x)) ::: No one playing for Nautico is Brazilian.\n\nHere's the JSON representation:\n\n```json\n{\n    \"Predicates\": [\n        \"Brazilian(x) ::: x is a Brazilian.\",\n        \"FootballPlayer(x) ::: x is a football player.\",\n        \"LoanedOutTo(x, y) ::: x was loaned out to y.\",\n        \"PlaysFor(x, y) ::: x plays for y.\",\n        \"IsAFC(x) ::: x is a football club.\"\n    ],\n    \"Premises\": [\n        \"Brazilian(AiltonSilva) ∧ FootballPlayer(AiltonSilva)\",\n        \"LoanedOutTo(Ailton, Braga)\",\n        \"PlaysFor(AiltonSilva, Nautico)\",\n        \"IsAFC(Nautico) ∧ IsAFC(Braga)\"\n    ],\n    \"Conclusion\": [\n        \"¬∃x (PlaysFor(x, Nautico) ∧ Brazilian(x)) ::: No one playing for Nautico is Brazilian.\"\n    ]\n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_200",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva foes not play for a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": [\n        \"FootballPlayer(x) ::: x is a football player.\",\n        \"LoanedOut(x, y) ::: x was loaned out to y.\",\n        \"PlaysFor(x, y) ::: x plays for y.\",\n        \"IsA(x, y) ::: x is a y.\",\n        \"AlongWith(x, y) ::: x is along with y.\"\n    ],\n    \"Premises\": [\n        \"FootballPlayer(Ailton) ∧ LoanedOut(Ailton, Braga) ::: Ailton is a football player who was loaned out to Braga.\",\n        \"IsA(AiltonSilva, BrazillianFootballer) ∧ PlaysFor(AiltonSilva, Nautico) ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\",\n        \"AlongWith(Nautico, Braga) ::: Nautico is a football club along with Braga.\",\n        \"IsA(Fluminense, FootballClub) ::: Fluminense is a football club.\"\n    ],\n    \"Conclusion\": [\n        \"¬PlaysFor(AiltonSilva, x) ::: Ailton Silva does not play for a football club.\"\n    ]\n}"
    ]
  },
  {
    "id": "FOLIO_dev_201",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton was not loaned out to a football club.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n  \"Predicates\": {\n    \"Footballer(x)\": \"x is a football player.\",\n    \"LoanedOut(x, y)\": \"x was loaned out to y.\",\n    \"PlaysFor(x, y)\": \"x plays for y.\",\n    \"IsClub(x)\": \"x is a football club.\"\n  },\n  \"Premises\": [\n    \"Footballer(Ailton)\",\n    \"LoanedOut(Ailton, Braga)\",\n    \"PlaysFor(Ailton, Nautico)\",\n    \"IsClub(Nautico)\",\n    \"IsClub(Braga)\",\n    \"IsClub(Fluminense)\"\n  ],\n  \"Conclusion\": {\n    \"¬∃y (IsClub(y) ∧ LoanedOut(Ailton, y))\": \"Ailton was not loaned out to a football club.\"\n  }\n}"
    ]
  },
  {
    "id": "FOLIO_dev_202",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva played for Fluminense.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "```json\n{\n    \"Predicates\": {\n        \"Brazilian(x)\": \"x is Brazilian.\",\n        \"Player(x)\": \"x is a player.\",\n        \"LoanOut(x, y)\": \"x was loaned out to y.\",\n        \"PlaysFor(x, y)\": \"x plays for y.\",\n        \"Club(x)\": \"x is a football club.\"\n    },\n    \"Premises\": [\n        \"(Brazilian(ailton) ∧ Player(ailton) ∧ LoanOut(ailton, braga))\",\n        \"(Player(ailton) ∧ PlaysFor(ailton, nautico))\",\n        \"(Club(nautico) ∧ Club(braga))\",\n        \"Club(fluminense)\"\n    ],\n    \"Conclusion\": \"¬PlaysFor(ailton, fluminense)\" \n}\n```"
    ]
  },
  {
    "id": "FOLIO_dev_203",
    "context": "Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Ailton Silva was loaned out to a football club.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "raw_logic_programs": [
      "{\n    \"Predicates\": {\n        \"FootballPlayer(x)\": \"x is a football player\",\n        \"LoanedOut(x, y)\": \"x was loaned out to y\",\n        \"IsA(x, y)\": \"x is a y\",\n        \"PlaysFor(x, y)\": \"x plays for y\"\n    },\n    \"Premises\": [\n        \"IsA(AiltonSilva, FootballPlayer)\", \n        \"LoanedOut(AiltonSilva, Braga)\", \n        \"IsA(Braga, FootballClub)\",\n        \"IsA(Nautico, FootballClub)\",\n        \"PlaysFor(AiltonSilva, Nautico)\"\n    ],\n    \"Conclusion\": {\n        \"∃y (FootballClub(y) ∧ LoanedOut(AiltonSilva, y))\": \"Ailton Silva was loaned out to a football club.\"\n    }\n}"
    ]
  }
]